{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ETL Pipelines with Prefect\n",
    "==========================\n",
    "\n",
    "[Prefect](https://github.com/PrefectHQ/prefect) is a platform for automating data workflows.  Data engineers and data scientists can build, test and deploy production pipelines without worrying about all of the [\"negative engineering\" aspects](https://medium.com/the-prefect-blog/positive-and-negative-data-engineering-a02cb497583d) of production.  For example, Prefect makes it easy to deploy a workflow that runs on a complicated schedule, requires task retries in the event of failures, and sends notifications when certain tasks are complete.  Prefect was built on top of Dask, and [relies on Dask](http://stories.dask.org/en/latest/prefect-workflows.html#how-dask-helps) to schedule and manage the execution of a Prefect workflow in a distributed environment.\n",
    "\n",
    "This example demonstrates running a Prefect ETL Flow on Dask which ultimately creates a GIF.  While this is a somewhat unconventional use case of Prefect, we're no strangers to [unconventional use cases](https://medium.com/the-prefect-blog/prefect-runs-on-prefect-3e6df553c3a4).\n",
    "\n",
    "In the world of workflow engines, Prefect supports many unique features; in this particular example we will see:\n",
    "\n",
    "- parametrization of workflows\n",
    "- dynamic runtime \"mapping\" of workflow tasks\n",
    "- customizable execution logic\n",
    "\n",
    "You wouldn't get this from any other engine.\n",
    "\n",
    "**Contents**\n",
    "\n",
    "0. [Description of goal](#Goal)\n",
    "1. [Setting up our environment](#Setting-up-our-environment)\n",
    "2. Building our Flow\n",
    "    1. [Extract](#Extract)\n",
    "    1. [Transform](#Transform)\n",
    "    1. [Load](#Load)\n",
    "    1. [Putting the pieces together](#Build-the-Flow)\n",
    "3. [Running our Flow on Dask](#Running-our-Flow-on-Dask)\n",
    "4. [Watching our GIF](#Play)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Goal](#Goal)\n",
    "----\n",
    "\n",
    "To demonstrate how Prefect and Dask work together, we are going to build and execute a standard \"Extract / Transform / Load\" (ETL) workflow for processing some basic image data.  Most ETL workflows involve a scheduled migration of data from one database to another.  In our case, we will be moving data from a file located at a known URL to our local hard disk, converting the individual file into a series of frames, and compiling those frames into a GIF.  The URL references a file containing raw bytes such as:\n",
    "\n",
    "```python\n",
    "b\"\"\"aÙ\u0001w\u0001˜\u0000\u0000≠•∆≠≠ﬁ#!\b\u0015\u0016\u0003≠≠÷≠•Ω≠úΩ••µú•µîúµ•úΩ••Ω3&\u0015µ•Ω\u0018!\u000b",
    "µ≠∆≠•¥4(%µú∑≠≠Œ≠î≠≠≠∆≠îµúî≠úîµE5.≠ú≠≠•Œµµﬁ••∆•≠ŒµµŒúúΩ62&)1&623µ•∆Ωµ÷úî•ßjxΩΩÁú•Ωµ≠Œ••≠ú•≠Ω≠∆≠µÁâUV≠µ‹ΩµŒîî•NC5µ≠Ÿôãô•î•µ•µîú≠#\u0017\bVHCuhl≠≠ΩôchâRIoc]™≠Á≠î•™ú»öis•ú•f7,íYfL9?îî≠≠•÷∑ò™gWVxGEΩ≠–))1qB5µ≠Ω81\u0018R,\u0015´tÜñWV\u001e",
    "!\u001e",
    "HCDBB5;5?\"\"\"\n",
    "```\n",
    "\n",
    "The steps of our workflow will be as follows:\n",
    "- Extract: pull the data file from a URL (speicified by a `Parameter`) to disk\n",
    "- Transform: split the file into multiple files, each corresponding to a single frame\n",
    "- Load: Store each frame individually, and compile the frames together into a GIF\n",
    "\n",
    "Once we have built our Flow, we can execute it with different values for the `Parameter` or even run it on a nightly schedule.\n",
    "\n",
    "**NOTE:** If we planned on executing this Flow in a truly distributed environment, writing the images to the local filesystem would _not_ be appropriate.  We would instead use an external datastore such as Google Cloud Storage, or a proper database."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Setting up our environment](#Setting-up-our-environment)\n",
    "--------------------------\n",
    "\n",
    "Before proceeding, we need to install both the [`prefect`](https://pypi.org/project/prefect/) and [`imageio`](https://pypi.org/project/imageio/) packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-14T16:48:15.431575Z",
     "iopub.status.busy": "2021-10-14T16:48:15.430953Z",
     "iopub.status.idle": "2021-10-14T16:48:21.294862Z",
     "shell.execute_reply": "2021-10-14T16:48:21.295381Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: imageio in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (2.9.0)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting prefect[viz]\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Downloading prefect-0.15.6-py3-none-any.whl (568 kB)\r\n",
      "\u001b[?25l\r",
      "\r",
      "     |▋                               | 10 kB 20.7 MB/s eta 0:00:01\r",
      "     |█▏                              | 20 kB 28.1 MB/s eta 0:00:01\r",
      "     |█▊                              | 30 kB 34.0 MB/s eta 0:00:01\r",
      "     |██▎                             | 40 kB 23.3 MB/s eta 0:00:01\r",
      "     |██▉                             | 51 kB 24.4 MB/s eta 0:00:01\r",
      "     |███▌                            | 61 kB 23.5 MB/s eta 0:00:01\r",
      "     |████                            | 71 kB 21.7 MB/s eta 0:00:01\r",
      "     |████▋                           | 81 kB 23.3 MB/s eta 0:00:01\r",
      "     |█████▏                          | 92 kB 22.0 MB/s eta 0:00:01\r",
      "     |█████▊                          | 102 kB 20.3 MB/s eta 0:00:01\r",
      "     |██████▍                         | 112 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████                         | 122 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████▌                        | 133 kB 20.3 MB/s eta 0:00:01\r",
      "     |████████                        | 143 kB 20.3 MB/s eta 0:00:01\r",
      "     |████████▋                       | 153 kB 20.3 MB/s eta 0:00:01\r",
      "     |█████████▏                      | 163 kB 20.3 MB/s eta 0:00:01\r",
      "     |█████████▉                      | 174 kB 20.3 MB/s eta 0:00:01\r",
      "     |██████████▍                     | 184 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████████                     | 194 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████████▌                    | 204 kB 20.3 MB/s eta 0:00:01\r",
      "     |████████████                    | 215 kB 20.3 MB/s eta 0:00:01\r",
      "     |████████████▊                   | 225 kB 20.3 MB/s eta 0:00:01\r",
      "     |█████████████▎                  | 235 kB 20.3 MB/s eta 0:00:01\r",
      "     |█████████████▉                  | 245 kB 20.3 MB/s eta 0:00:01\r",
      "     |██████████████▍                 | 256 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████████████                 | 266 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████████████▌                | 276 kB 20.3 MB/s eta 0:00:01\r",
      "     |████████████████▏               | 286 kB 20.3 MB/s eta 0:00:01\r",
      "     |████████████████▊               | 296 kB 20.3 MB/s eta 0:00:01\r",
      "     |█████████████████▎              | 307 kB 20.3 MB/s eta 0:00:01\r",
      "     |█████████████████▉              | 317 kB 20.3 MB/s eta 0:00:01\r",
      "     |██████████████████▍             | 327 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████████████████             | 337 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████████████████▋            | 348 kB 20.3 MB/s eta 0:00:01\r",
      "     |████████████████████▏           | 358 kB 20.3 MB/s eta 0:00:01\r",
      "     |████████████████████▊           | 368 kB 20.3 MB/s eta 0:00:01\r",
      "     |█████████████████████▎          | 378 kB 20.3 MB/s eta 0:00:01\r",
      "     |██████████████████████          | 389 kB 20.3 MB/s eta 0:00:01\r",
      "     |██████████████████████▌         | 399 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████████████████████         | 409 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████████████████████▋        | 419 kB 20.3 MB/s eta 0:00:01\r",
      "     |████████████████████████▏       | 430 kB 20.3 MB/s eta 0:00:01\r",
      "     |████████████████████████▊       | 440 kB 20.3 MB/s eta 0:00:01\r",
      "     |█████████████████████████▍      | 450 kB 20.3 MB/s eta 0:00:01\r",
      "     |██████████████████████████      | 460 kB 20.3 MB/s eta 0:00:01\r",
      "     |██████████████████████████▌     | 471 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████████████████████████     | 481 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████████████████████████▋    | 491 kB 20.3 MB/s eta 0:00:01\r",
      "     |████████████████████████████▎   | 501 kB 20.3 MB/s eta 0:00:01\r",
      "     |████████████████████████████▉   | 512 kB 20.3 MB/s eta 0:00:01\r",
      "     |█████████████████████████████▍  | 522 kB 20.3 MB/s eta 0:00:01\r",
      "     |██████████████████████████████  | 532 kB 20.3 MB/s eta 0:00:01\r",
      "     |██████████████████████████████▌ | 542 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████████████████████████████ | 552 kB 20.3 MB/s eta 0:00:01\r",
      "     |███████████████████████████████▊| 563 kB 20.3 MB/s eta 0:00:01\r",
      "     |████████████████████████████████| 568 kB 20.3 MB/s            \r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[?25hRequirement already satisfied: pillow in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from imageio) (8.3.2)\r\n",
      "Requirement already satisfied: numpy in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from imageio) (1.21.2)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting python-slugify>=1.2.6\r\n",
      "  Downloading python_slugify-5.0.2-py2.py3-none-any.whl (6.7 kB)\r\n",
      "Requirement already satisfied: pytz>=2018.7 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from prefect[viz]) (2021.3)\r\n",
      "Requirement already satisfied: dask>=2.17.0 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from prefect[viz]) (2.20.0)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting croniter<2.0,>=0.3.24\r\n",
      "  Downloading croniter-1.0.15-py2.py3-none-any.whl (16 kB)\r\n",
      "Requirement already satisfied: msgpack>=0.6.0 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from prefect[viz]) (1.0.2)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting requests<2.26,>=2.20\r\n",
      "  Downloading requests-2.25.1-py2.py3-none-any.whl (61 kB)\r\n",
      "\u001b[?25l\r",
      "\r",
      "     |█████▍                          | 10 kB 23.7 MB/s eta 0:00:01\r",
      "     |██████████▊                     | 20 kB 32.7 MB/s eta 0:00:01\r",
      "     |████████████████                | 30 kB 37.5 MB/s eta 0:00:01\r",
      "     |█████████████████████▍          | 40 kB 40.6 MB/s eta 0:00:01\r",
      "     |██████████████████████████▊     | 51 kB 37.5 MB/s eta 0:00:01\r",
      "     |████████████████████████████████| 61 kB 17.0 MB/s            \r\n",
      "\u001b[?25hRequirement already satisfied: urllib3>=1.24.3 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from prefect[viz]) (1.26.7)\r\n",
      "Requirement already satisfied: distributed>=2.17.0 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from prefect[viz]) (2.30.1)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pendulum>=2.0.4\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Downloading pendulum-2.1.2-cp38-cp38-manylinux1_x86_64.whl (155 kB)\r\n",
      "\u001b[?25l\r",
      "\r",
      "     |██                              | 10 kB 23.3 MB/s eta 0:00:01\r",
      "     |████▏                           | 20 kB 30.4 MB/s eta 0:00:01\r",
      "     |██████▎                         | 30 kB 33.9 MB/s eta 0:00:01\r",
      "     |████████▍                       | 40 kB 36.6 MB/s eta 0:00:01\r",
      "     |██████████▌                     | 51 kB 37.0 MB/s eta 0:00:01\r",
      "     |████████████▋                   | 61 kB 37.6 MB/s eta 0:00:01\r",
      "     |██████████████▊                 | 71 kB 35.0 MB/s eta 0:00:01\r",
      "     |████████████████▉               | 81 kB 33.6 MB/s eta 0:00:01\r",
      "     |███████████████████             | 92 kB 35.3 MB/s eta 0:00:01\r",
      "     |█████████████████████           | 102 kB 36.1 MB/s eta 0:00:01\r",
      "     |███████████████████████▏        | 112 kB 36.1 MB/s eta 0:00:01\r",
      "     |█████████████████████████▎      | 122 kB 36.1 MB/s eta 0:00:01\r",
      "     |███████████████████████████▍    | 133 kB 36.1 MB/s eta 0:00:01\r",
      "     |█████████████████████████████▌  | 143 kB 36.1 MB/s eta 0:00:01\r",
      "     |███████████████████████████████▋| 153 kB 36.1 MB/s eta 0:00:01\r",
      "     |████████████████████████████████| 155 kB 36.1 MB/s            \r\n",
      "\u001b[?25hCollecting tabulate>=0.8.0\r\n",
      "  Downloading tabulate-0.8.9-py3-none-any.whl (25 kB)\r\n",
      "Requirement already satisfied: toml>=0.9.4 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from prefect[viz]) (0.10.2)\r\n",
      "Requirement already satisfied: cloudpickle>=1.3.0 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from prefect[viz]) (2.0.0)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting mypy-extensions>=0.4.0\r\n",
      "  Downloading mypy_extensions-0.4.3-py2.py3-none-any.whl (4.5 kB)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting python-box>=5.1.0\r\n",
      "  Downloading python_box-5.4.1-py3-none-any.whl (21 kB)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting marshmallow-oneofschema>=2.0.0b2\r\n",
      "  Downloading marshmallow_oneofschema-3.0.1-py2.py3-none-any.whl (5.8 kB)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting marshmallow>=3.0.0b19\r\n",
      "  Downloading marshmallow-3.13.0-py2.py3-none-any.whl (47 kB)\r\n",
      "\u001b[?25l\r",
      "\r",
      "     |███████                         | 10 kB 50.2 MB/s eta 0:00:01\r",
      "     |█████████████▉                  | 20 kB 59.2 MB/s eta 0:00:01\r",
      "     |████████████████████▊           | 30 kB 32.0 MB/s eta 0:00:01\r",
      "     |███████████████████████████▋    | 40 kB 37.2 MB/s eta 0:00:01\r",
      "     |████████████████████████████████| 47 kB 13.9 MB/s            \r\n",
      "\u001b[?25hRequirement already satisfied: pyyaml>=3.13 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from prefect[viz]) (5.4.1)\r\n",
      "Requirement already satisfied: click<8.0,>=7.0 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from prefect[viz]) (7.1.2)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting docker>=3.4.1\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Downloading docker-5.0.3-py2.py3-none-any.whl (146 kB)\r\n",
      "\u001b[?25l\r",
      "\r",
      "     |██▎                             | 10 kB 37.3 MB/s eta 0:00:01\r",
      "     |████▌                           | 20 kB 43.6 MB/s eta 0:00:01\r",
      "     |██████▊                         | 30 kB 52.8 MB/s eta 0:00:01\r",
      "     |█████████                       | 40 kB 56.9 MB/s eta 0:00:01\r",
      "     |███████████▏                    | 51 kB 60.0 MB/s eta 0:00:01\r",
      "     |█████████████▌                  | 61 kB 65.0 MB/s eta 0:00:01\r",
      "     |███████████████▊                | 71 kB 68.5 MB/s eta 0:00:01\r",
      "     |██████████████████              | 81 kB 72.4 MB/s eta 0:00:01\r",
      "     |████████████████████▏           | 92 kB 74.9 MB/s eta 0:00:01\r",
      "     |██████████████████████▍         | 102 kB 74.7 MB/s eta 0:00:01\r",
      "     |████████████████████████▋       | 112 kB 74.7 MB/s eta 0:00:01\r",
      "     |███████████████████████████     | 122 kB 74.7 MB/s eta 0:00:01\r",
      "     |█████████████████████████████▏  | 133 kB 74.7 MB/s eta 0:00:01\r",
      "     |███████████████████████████████▍| 143 kB 74.7 MB/s eta 0:00:01\r",
      "     |████████████████████████████████| 146 kB 74.7 MB/s            \r\n",
      "\u001b[?25hRequirement already satisfied: python-dateutil>=2.7.0 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from prefect[viz]) (2.8.2)\r\n",
      "Requirement already satisfied: graphviz>=0.8.3 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from prefect[viz]) (0.17)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: sortedcontainers!=2.0.0,!=2.0.1 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from distributed>=2.17.0->prefect[viz]) (2.4.0)\r\n",
      "Requirement already satisfied: tblib>=1.6.0 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from distributed>=2.17.0->prefect[viz]) (1.7.0)\r\n",
      "Requirement already satisfied: setuptools in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from distributed>=2.17.0->prefect[viz]) (58.2.0)\r\n",
      "Requirement already satisfied: toolz>=0.8.2 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from distributed>=2.17.0->prefect[viz]) (0.11.1)\r\n",
      "Requirement already satisfied: zict>=0.1.3 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from distributed>=2.17.0->prefect[viz]) (2.0.0)\r\n",
      "Requirement already satisfied: tornado>=6.0.3 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from distributed>=2.17.0->prefect[viz]) (6.1)\r\n",
      "Requirement already satisfied: psutil>=5.0 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from distributed>=2.17.0->prefect[viz]) (5.8.0)\r\n",
      "Requirement already satisfied: websocket-client>=0.32.0 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from docker>=3.4.1->prefect[viz]) (0.57.0)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pytzdata>=2020.1\r\n",
      "  Downloading pytzdata-2020.1-py2.py3-none-any.whl (489 kB)\r\n",
      "\u001b[?25l\r",
      "\r",
      "     |▊                               | 10 kB 27.7 MB/s eta 0:00:01\r",
      "     |█▍                              | 20 kB 35.7 MB/s eta 0:00:01\r",
      "     |██                              | 30 kB 44.0 MB/s eta 0:00:01\r",
      "     |██▊                             | 40 kB 50.6 MB/s eta 0:00:01\r",
      "     |███▍                            | 51 kB 54.4 MB/s eta 0:00:01\r",
      "     |████                            | 61 kB 55.3 MB/s eta 0:00:01\r",
      "     |████▊                           | 71 kB 54.4 MB/s eta 0:00:01\r",
      "     |█████▍                          | 81 kB 56.4 MB/s eta 0:00:01\r",
      "     |██████                          | 92 kB 58.9 MB/s eta 0:00:01\r",
      "     |██████▊                         | 102 kB 60.8 MB/s eta 0:00:01\r",
      "     |███████▍                        | 112 kB 60.8 MB/s eta 0:00:01\r",
      "     |████████                        | 122 kB 60.8 MB/s eta 0:00:01\r",
      "     |████████▊                       | 133 kB 60.8 MB/s eta 0:00:01\r",
      "     |█████████▍                      | 143 kB 60.8 MB/s eta 0:00:01\r",
      "     |██████████                      | 153 kB 60.8 MB/s eta 0:00:01\r",
      "     |██████████▊                     | 163 kB 60.8 MB/s eta 0:00:01\r",
      "     |███████████▍                    | 174 kB 60.8 MB/s eta 0:00:01\r",
      "     |████████████                    | 184 kB 60.8 MB/s eta 0:00:01\r",
      "     |████████████▊                   | 194 kB 60.8 MB/s eta 0:00:01\r",
      "     |█████████████▍                  | 204 kB 60.8 MB/s eta 0:00:01\r",
      "     |██████████████                  | 215 kB 60.8 MB/s eta 0:00:01\r",
      "     |██████████████▊                 | 225 kB 60.8 MB/s eta 0:00:01\r",
      "     |███████████████▍                | 235 kB 60.8 MB/s eta 0:00:01\r",
      "     |████████████████                | 245 kB 60.8 MB/s eta 0:00:01\r",
      "     |████████████████▊               | 256 kB 60.8 MB/s eta 0:00:01\r",
      "     |█████████████████▍              | 266 kB 60.8 MB/s eta 0:00:01\r",
      "     |██████████████████              | 276 kB 60.8 MB/s eta 0:00:01\r",
      "     |██████████████████▊             | 286 kB 60.8 MB/s eta 0:00:01\r",
      "     |███████████████████▍            | 296 kB 60.8 MB/s eta 0:00:01\r",
      "     |████████████████████            | 307 kB 60.8 MB/s eta 0:00:01\r",
      "     |████████████████████▊           | 317 kB 60.8 MB/s eta 0:00:01\r",
      "     |█████████████████████▍          | 327 kB 60.8 MB/s eta 0:00:01\r",
      "     |██████████████████████          | 337 kB 60.8 MB/s eta 0:00:01\r",
      "     |██████████████████████▊         | 348 kB 60.8 MB/s eta 0:00:01\r",
      "     |███████████████████████▍        | 358 kB 60.8 MB/s eta 0:00:01\r",
      "     |████████████████████████        | 368 kB 60.8 MB/s eta 0:00:01\r",
      "     |████████████████████████▊       | 378 kB 60.8 MB/s eta 0:00:01\r",
      "     |█████████████████████████▍      | 389 kB 60.8 MB/s eta 0:00:01\r",
      "     |██████████████████████████      | 399 kB 60.8 MB/s eta 0:00:01\r",
      "     |██████████████████████████▊     | 409 kB 60.8 MB/s eta 0:00:01\r",
      "     |███████████████████████████▍    | 419 kB 60.8 MB/s eta 0:00:01\r",
      "     |████████████████████████████    | 430 kB 60.8 MB/s eta 0:00:01\r",
      "     |████████████████████████████▊   | 440 kB 60.8 MB/s eta 0:00:01\r",
      "     |█████████████████████████████▍  | 450 kB 60.8 MB/s eta 0:00:01\r",
      "     |██████████████████████████████  | 460 kB 60.8 MB/s eta 0:00:01\r",
      "     |██████████████████████████████▊ | 471 kB 60.8 MB/s eta 0:00:01\r",
      "     |███████████████████████████████▍| 481 kB 60.8 MB/s eta 0:00:01"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "     |████████████████████████████████| 489 kB 60.8 MB/s            \r\n",
      "\u001b[?25hRequirement already satisfied: six>=1.5 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from python-dateutil>=2.7.0->prefect[viz]) (1.16.0)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting text-unidecode>=1.3\r\n",
      "  Downloading text_unidecode-1.3-py2.py3-none-any.whl (78 kB)\r\n",
      "\u001b[?25l\r",
      "\r",
      "     |████▏                           | 10 kB 22.3 MB/s eta 0:00:01\r",
      "     |████████▍                       | 20 kB 30.3 MB/s eta 0:00:01\r",
      "     |████████████▋                   | 30 kB 32.3 MB/s eta 0:00:01\r",
      "     |████████████████▊               | 40 kB 33.4 MB/s eta 0:00:01\r",
      "     |█████████████████████           | 51 kB 34.5 MB/s eta 0:00:01\r",
      "     |█████████████████████████▏      | 61 kB 34.6 MB/s eta 0:00:01\r",
      "     |█████████████████████████████▍  | 71 kB 36.2 MB/s eta 0:00:01\r",
      "     |████████████████████████████████| 78 kB 15.7 MB/s            \r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[?25hCollecting idna<3,>=2.5\r\n",
      "  Downloading idna-2.10-py2.py3-none-any.whl (58 kB)\r\n",
      "\u001b[?25l\r",
      "\r",
      "     |█████▋                          | 10 kB 24.5 MB/s eta 0:00:01\r",
      "     |███████████▏                    | 20 kB 30.1 MB/s eta 0:00:01\r",
      "     |████████████████▊               | 30 kB 32.3 MB/s eta 0:00:01\r",
      "     |██████████████████████▎         | 40 kB 35.4 MB/s eta 0:00:01\r",
      "     |███████████████████████████▉    | 51 kB 38.0 MB/s eta 0:00:01\r",
      "     |████████████████████████████████| 58 kB 14.0 MB/s            \r\n",
      "\u001b[?25hRequirement already satisfied: chardet<5,>=3.0.2 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from requests<2.26,>=2.20->prefect[viz]) (4.0.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from requests<2.26,>=2.20->prefect[viz]) (2021.10.8)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: heapdict in /usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages (from zict>=0.1.3->distributed>=2.17.0->prefect[viz]) (1.0.1)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Installing collected packages: idna, text-unidecode, requests, pytzdata, marshmallow, tabulate, python-slugify, python-box, pendulum, mypy-extensions, marshmallow-oneofschema, docker, croniter, prefect\r\n",
      "  Attempting uninstall: idna\r\n",
      "    Found existing installation: idna 3.1\r\n",
      "    Uninstalling idna-3.1:\r\n",
      "      Successfully uninstalled idna-3.1\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Attempting uninstall: requests\r\n",
      "    Found existing installation: requests 2.26.0\r\n",
      "    Uninstalling requests-2.26.0:\r\n",
      "      Successfully uninstalled requests-2.26.0\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully installed croniter-1.0.15 docker-5.0.3 idna-2.10 marshmallow-3.13.0 marshmallow-oneofschema-3.0.1 mypy-extensions-0.4.3 pendulum-2.1.2 prefect-0.15.6 python-box-5.4.1 python-slugify-5.0.2 pytzdata-2020.1 requests-2.25.1 tabulate-0.8.9 text-unidecode-1.3\r\n"
     ]
    }
   ],
   "source": [
    "!pip install imageio prefect[viz]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### [Extract](#Extract)\n",
    "\n",
    "First, we will define our tasks for _extracting_ the image data file from a given URL and saving it to a given file location.  To do so, we will utilize two methods for creating Prefect Tasks:\n",
    "- the `task` decorator for converting any Python function into a task\n",
    "- a pre-written, configurable Task from the [Prefect \"Task Library\"](https://docs.prefect.io/guide/task_library/) which helps us abstract some standard boilerplate\n",
    "\n",
    "Additionally, we will utilize the following Prefect concepts:\n",
    "- a [Prefect signal](https://docs.prefect.io/guide/core_concepts/execution.html#state-signals) for marking this task and its downstream depedencies as successfully \"Skipped\" if the file is already present in our local filesystem\n",
    "- retry semantics: if, for whatever reason, our `curl` command fails to connect, we want it to retry up to 2 times with a 10 second delay.  This way, if we run this workflow on a schedule we won't need to concern ourselves with temporary intermittent connection issues.\n",
    "\n",
    "Right now we are simply defining our individual tasks - we won't actually set up our dependency structure until we create the full Flow."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-14T16:48:21.302608Z",
     "iopub.status.busy": "2021-10-14T16:48:21.301588Z",
     "iopub.status.idle": "2021-10-14T16:48:21.775612Z",
     "shell.execute_reply": "2021-10-14T16:48:21.776025Z"
    }
   },
   "outputs": [],
   "source": [
    "import datetime\n",
    "import os\n",
    "\n",
    "import prefect\n",
    "from prefect import task\n",
    "from prefect.engine.signals import SKIP\n",
    "from prefect.tasks.shell import ShellTask\n",
    "\n",
    "\n",
    "@task\n",
    "def curl_cmd(url: str, fname: str) -> str:\n",
    "    \"\"\"\n",
    "    The curl command we wish to execute.\n",
    "    \"\"\"\n",
    "    if os.path.exists(fname):\n",
    "        raise SKIP(\"Image data file already exists.\")\n",
    "    return \"curl -fL -o {fname} {url}\".format(fname=fname, url=url)\n",
    "\n",
    "\n",
    "# ShellTask is a task from the Task library which will execute a given command in a subprocess\n",
    "# and fail if the command returns a non-zero exit code\n",
    "\n",
    "download = ShellTask(name=\"curl_task\", max_retries=2, retry_delay=datetime.timedelta(seconds=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### [Transform](#Transform)\n",
    "\n",
    "Next up, we need to define our task which loads the image data file and splits it into multiple frames.  In this case, each frame is delimited by 4 newlines.  Note that, in the event the previous two tasks are \"Skipped\", the default behavior in Prefect is to skip downstream dependencies as well.  However, as with most things in Prefect, this behavior is customizable.  In this case, we want this task to run regardless of whether the upstreams skipped or not, so we set the `skip_on_upstream_skip` flag to `False`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-14T16:48:21.781329Z",
     "iopub.status.busy": "2021-10-14T16:48:21.780779Z",
     "iopub.status.idle": "2021-10-14T16:48:21.788359Z",
     "shell.execute_reply": "2021-10-14T16:48:21.789653Z"
    }
   },
   "outputs": [],
   "source": [
    "@task(skip_on_upstream_skip=False)\n",
    "def load_and_split(fname: str) -> list:\n",
    "    \"\"\"\n",
    "    Loads image data file at `fname` and splits it into\n",
    "    multiple frames.  Returns a list of bytes, one element\n",
    "    for each frame.\n",
    "    \"\"\"\n",
    "    with open(fname, \"rb\") as f:\n",
    "        images = f.read()\n",
    "        \n",
    "    return [img for img in images.split(b\"\\n\" * 4) if img]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### [Load](#Load)\n",
    "\n",
    "Finally, we want to write our frames to disk as well as combine the frames into a single GIF.  In order to achieve this goal, we are going to utilize [Prefect's task \"mapping\" feature](https://docs.prefect.io/guide/core_concepts/mapping.html) which conveniently spawns new tasks in response to upstream outputs.  In this case, we will write a single task for writing an image to disk, and \"map\" this task over all the image frames returned by `load_and_split` above!  To infer which frame we are on, we look in [`prefect.context`](https://docs.prefect.io/guide/core_concepts/execution.html#context).\n",
    "\n",
    "Additionally, we can \"reduce\" over a mapped task - in this case, we will take the collection of mapped tasks and pass them into our `combine_to_gif` task for creating and saving our GIF."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-14T16:48:21.794624Z",
     "iopub.status.busy": "2021-10-14T16:48:21.794055Z",
     "iopub.status.idle": "2021-10-14T16:48:21.801052Z",
     "shell.execute_reply": "2021-10-14T16:48:21.800391Z"
    }
   },
   "outputs": [],
   "source": [
    "@task\n",
    "def write_to_disk(image: bytes) -> bytes:\n",
    "    \"\"\"\n",
    "    Given a single image represented as bytes, writes the image\n",
    "    to the present working directory with a filename determined\n",
    "    by `map_index`.  Returns the image bytes.\n",
    "    \"\"\"\n",
    "    frame_no = prefect.context.get(\"map_index\")\n",
    "    with open(\"frame_{0:0=2d}.gif\".format(frame_no), \"wb\") as f:\n",
    "        f.write(image)\n",
    "    return image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-14T16:48:21.807647Z",
     "iopub.status.busy": "2021-10-14T16:48:21.807043Z",
     "iopub.status.idle": "2021-10-14T16:48:22.005300Z",
     "shell.execute_reply": "2021-10-14T16:48:22.004732Z"
    }
   },
   "outputs": [],
   "source": [
    "import imageio\n",
    "from io import BytesIO\n",
    "\n",
    "\n",
    "@task\n",
    "def combine_to_gif(image_bytes: list) -> None:\n",
    "    \"\"\"\n",
    "    Given a list of ordered images represented as bytes,\n",
    "    combines them into a single GIF stored in the present working directory.\n",
    "    \"\"\"\n",
    "    images = [imageio.imread(BytesIO(image)) for image in image_bytes]\n",
    "    imageio.mimsave('./clip.gif', images)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Build the Flow](#Build-the-Flow)\n",
    "---------------\n",
    "\n",
    "Finally, we need to put our tasks together into a Prefect \"Flow\".  Similar to Dask's `delayed` interface, all computation is deferred and no Task code will be executed in this step.  Because Prefect maintains a stricter contract between tasks and additionally needs the ability to run in non-Dask execution environments, the mechanism for deferring execution is independent of Dask.\n",
    "\n",
    "In addition to the tasks we have already defined, we introduce two \"Parameters\" for specifying the URL and local file location of our data.  At runtime, we can optionally override these tasks to return different values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-14T16:48:22.013446Z",
     "iopub.status.busy": "2021-10-14T16:48:22.012917Z",
     "iopub.status.idle": "2021-10-14T16:48:22.099487Z",
     "shell.execute_reply": "2021-10-14T16:48:22.100442Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.49.1 (20211004.0028)\n",
       " -->\n",
       "<!-- Pages: 1 -->\n",
       "<svg width=\"282pt\" height=\"465pt\"\n",
       " viewBox=\"0.00 0.00 282.44 465.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 461)\">\n",
       "<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-461 278.44,-461 278.44,4 -4,4\"/>\n",
       "<!-- 139690232237312 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>139690232237312</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"154\" cy=\"-352\" rx=\"52.79\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"154\" y=\"-348.3\" font-family=\"Times,serif\" font-size=\"14.00\">curl_cmd</text>\n",
       "</g>\n",
       "<!-- 139690232237408 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>139690232237408</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"154\" cy=\"-265\" rx=\"52.79\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"154\" y=\"-261.3\" font-family=\"Times,serif\" font-size=\"14.00\">curl_task</text>\n",
       "</g>\n",
       "<!-- 139690232237312&#45;&gt;139690232237408 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>139690232237312&#45;&gt;139690232237408</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M154,-333.8C154,-322.16 154,-306.55 154,-293.24\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"157.5,-293.18 154,-283.18 150.5,-293.18 157.5,-293.18\"/>\n",
       "<text text-anchor=\"middle\" x=\"189\" y=\"-304.8\" font-family=\"Times,serif\" font-size=\"14.00\">command</text>\n",
       "</g>\n",
       "<!-- 139690232237984 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>139690232237984</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"85\" cy=\"-192\" rx=\"76.89\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"85\" y=\"-188.3\" font-family=\"Times,serif\" font-size=\"14.00\">load_and_split</text>\n",
       "</g>\n",
       "<!-- 139690232258672 -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>139690232258672</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"170,-123 0,-123 0,-87 170,-87 170,-123\"/>\n",
       "<text text-anchor=\"middle\" x=\"85\" y=\"-101.3\" font-family=\"Times,serif\" font-size=\"14.00\">write_to_disk &lt;map&gt;</text>\n",
       "</g>\n",
       "<!-- 139690232237984&#45;&gt;139690232258672 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>139690232237984&#45;&gt;139690232258672</title>\n",
       "<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"5,2\" d=\"M85,-173.8C85,-162.16 85,-146.55 85,-133.24\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"88.5,-133.18 85,-123.18 81.5,-133.18 88.5,-133.18\"/>\n",
       "<text text-anchor=\"middle\" x=\"107\" y=\"-144.8\" font-family=\"Times,serif\" font-size=\"14.00\">image</text>\n",
       "</g>\n",
       "<!-- 139690232237408&#45;&gt;139690232237984 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>139690232237408&#45;&gt;139690232237984</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M138,-247.53C129.24,-238.52 118.23,-227.19 108.51,-217.19\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"110.88,-214.6 101.4,-209.87 105.86,-219.48 110.88,-214.6\"/>\n",
       "</g>\n",
       "<!-- 139690232259200 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>139690232259200</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"85\" cy=\"-18\" rx=\"79.89\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"85\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">combine_to_gif</text>\n",
       "</g>\n",
       "<!-- 139690232236112 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>139690232236112</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"214\" cy=\"-439\" rx=\"60.39\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"214\" y=\"-435.3\" font-family=\"Times,serif\" font-size=\"14.00\">DATA_URL</text>\n",
       "</g>\n",
       "<!-- 139690232236112&#45;&gt;139690232237312 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>139690232236112&#45;&gt;139690232237312</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M202.15,-421.21C193.44,-408.87 181.45,-391.89 171.62,-377.97\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"174.46,-375.91 165.83,-369.76 168.74,-379.95 174.46,-375.91\"/>\n",
       "<text text-anchor=\"middle\" x=\"198.5\" y=\"-391.8\" font-family=\"Times,serif\" font-size=\"14.00\">url</text>\n",
       "</g>\n",
       "<!-- 139690232236208 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>139690232236208</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"73\" cy=\"-439\" rx=\"62.29\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"73\" y=\"-435.3\" font-family=\"Times,serif\" font-size=\"14.00\">DATA_FILE</text>\n",
       "</g>\n",
       "<!-- 139690232236208&#45;&gt;139690232237312 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>139690232236208&#45;&gt;139690232237312</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M89,-421.21C101.06,-408.55 117.76,-391.03 131.22,-376.91\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"133.94,-379.12 138.31,-369.47 128.87,-374.29 133.94,-379.12\"/>\n",
       "<text text-anchor=\"middle\" x=\"141.5\" y=\"-391.8\" font-family=\"Times,serif\" font-size=\"14.00\">fname</text>\n",
       "</g>\n",
       "<!-- 139690232236208&#45;&gt;139690232237984 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>139690232236208&#45;&gt;139690232237984</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M73.84,-420.77C75.9,-378.86 81.16,-271.31 83.66,-220.44\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"87.16,-220.37 84.16,-210.21 80.17,-220.03 87.16,-220.37\"/>\n",
       "<text text-anchor=\"middle\" x=\"102.5\" y=\"-304.8\" font-family=\"Times,serif\" font-size=\"14.00\">fname</text>\n",
       "</g>\n",
       "<!-- 139690232258672&#45;&gt;139690232259200 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>139690232258672&#45;&gt;139690232259200</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M85,-86.8C85,-75.16 85,-59.55 85,-46.24\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"88.5,-46.18 85,-36.18 81.5,-46.18 88.5,-46.18\"/>\n",
       "<text text-anchor=\"middle\" x=\"130\" y=\"-57.8\" font-family=\"Times,serif\" font-size=\"14.00\">image_bytes</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.dot.Digraph at 0x7f0c4cb3ed30>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from prefect import Parameter, Flow\n",
    "\n",
    "\n",
    "DATA_URL = Parameter(\"DATA_URL\", \n",
    "                     default=\"https://github.com/cicdw/image-data/blob/master/all-images.img?raw=true\")\n",
    "\n",
    "DATA_FILE = Parameter(\"DATA_FILE\", default=\"image-data.img\")\n",
    "\n",
    "\n",
    "with Flow(\"Image ETL\") as flow:\n",
    "    \n",
    "    # Extract\n",
    "    command = curl_cmd(DATA_URL, DATA_FILE)\n",
    "    curl = download(command=command)\n",
    "    \n",
    "    # Transform\n",
    "    # we use the `upstream_tasks` keyword to specify non-data dependencies\n",
    "    images = load_and_split(fname=DATA_FILE, upstream_tasks=[curl])\n",
    "    \n",
    "    # Load  \n",
    "    frames = write_to_disk.map(images)\n",
    "    result = combine_to_gif(frames)\n",
    "    \n",
    "\n",
    "flow.visualize()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### [Running the Flow on Dask](#Running-the-Flow-on-Dask)\n",
    "\n",
    "Now we have built our Flow, independently of Dask.  We could execute this Flow sequentially, Task after Task, but there is inherent parallelism in our mapping of the images to files that we want to exploit.  Luckily, Dask makes this easy to achieve.\n",
    "\n",
    "First, we will start a local Dask cluster.  Then, we will run our Flow against Prefect's `DaskExecutor`, which will submit each Task to our Dask cluster and use Dask's distributed scheduler for determining when and where each Task should run.  Essentially, we built a Directed Acylic Graph (DAG) and are simply \"submitting\" that DAG to Dask for handling its execution in a distributed way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-14T16:48:22.105129Z",
     "iopub.status.busy": "2021-10-14T16:48:22.104599Z",
     "iopub.status.idle": "2021-10-14T16:48:31.511489Z",
     "shell.execute_reply": "2021-10-14T16:48:31.515931Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages/distributed/node.py:151: UserWarning: Port 8787 is already in use.\n",
      "Perhaps you already have a cluster running?\n",
      "Hosting the HTTP server on port 42103 instead\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2021-10-14 16:48:25+0000] INFO - prefect.FlowRunner | Beginning Flow run for 'Image ETL'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2021-10-14 16:48:25+0000] INFO - prefect.DaskExecutor | Connecting to an existing Dask cluster at tcp://127.0.0.1:43371\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-7-2d65d26da62c>:11: UserWarning: prefect.engine.executors.DaskExecutor has been moved to `prefect.executors.DaskExecutor`, please update your imports\n",
      "  executor = DaskExecutor(address=client.scheduler.address)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages/distributed/worker.py:3373: UserWarning: Large object of size 2.03 MB detected in task graph: \n",
      "  {'task': <Task: write_to_disk>, 'state': None, 'up ... _parent': True}\n",
      "Consider scattering large objects ahead of time\n",
      "with client.scatter to reduce scheduler burden and \n",
      "keep data on workers\n",
      "\n",
      "    future = client.submit(func, big_data)    # bad\n",
      "\n",
      "    big_future = client.scatter(big_data)     # good\n",
      "    future = client.submit(func, big_future)  # good\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2021-10-14 16:48:31+0000] INFO - prefect.FlowRunner | Flow run SUCCESS: all reference tasks succeeded\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Success: \"All reference tasks succeeded.\">"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# start our Dask cluster\n",
    "from dask.distributed import Client\n",
    "\n",
    "\n",
    "client = Client(n_workers=4, threads_per_worker=1)\n",
    "\n",
    "# point Prefect's DaskExecutor to our Dask cluster\n",
    "\n",
    "from prefect.engine.executors import DaskExecutor\n",
    "\n",
    "executor = DaskExecutor(address=client.scheduler.address)\n",
    "flow.run(executor=executor)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Next Steps](#Next-Steps)\n",
    "----------\n",
    "\n",
    "Now that we've built our workflow, what next?  The interested reader should try to:\n",
    "\n",
    "- run the Flow again to see how the `SKIP` signal behaves\n",
    "- use different parameters for both the URL and the file location (Parameter values can be overriden by simply passing their names as keyword arguments to `flow.run()`)\n",
    "- introduce a new Parameter for the filename of the final GIF\n",
    "- use Prefect's [scheduler interface](https://docs.prefect.io/guide/core_concepts/schedules.html) to run our workflow on a schedule"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Play](#Play)\n",
    "----\n",
    "\n",
    "Finally, let's watch our creation!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-10-14T16:48:31.519995Z",
     "iopub.status.busy": "2021-10-14T16:48:31.519318Z",
     "iopub.status.idle": "2021-10-14T16:48:31.525042Z",
     "shell.execute_reply": "2021-10-14T16:48:31.525614Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<img src=\"./clip.gif\" alt=\"Rick Daskley\">"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import HTML\n",
    "\n",
    "HTML('<img src=\"./clip.gif\" alt=\"Rick Daskley\">')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
