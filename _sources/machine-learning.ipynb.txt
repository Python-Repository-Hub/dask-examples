{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dask for Machine Learning\n",
    "\n",
    "This is a high-level overview demonstrating some the components of Dask-ML.\n",
    "Visit the main [Dask-ML](http://ml.dask.org) documentation, see the [dask tutorial](https://github.com/dask/dask-tutorial) notebook 08, or explore some of the other machine-learning examples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:56.909222Z",
     "iopub.status.busy": "2021-07-19T14:35:56.908694Z",
     "iopub.status.idle": "2021-07-19T14:35:57.747384Z",
     "shell.execute_reply": "2021-07-19T14:35:57.747952Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages/distributed/node.py:151: UserWarning: Port 8787 is already in use.\n",
      "Perhaps you already have a cluster running?\n",
      "Hosting the HTTP server on port 33679 instead\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table style=\"border: 2px solid white;\">\n",
       "<tr>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Client</h3>\n",
       "<ul style=\"text-align: left; list-style: none; margin: 0; padding: 0;\">\n",
       "  <li><b>Scheduler: </b>inproc://10.1.0.87/5832/1</li>\n",
       "  <li><b>Dashboard: </b><a href='http://10.1.0.87:33679/status' target='_blank'>http://10.1.0.87:33679/status</a></li>\n",
       "</ul>\n",
       "</td>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Cluster</h3>\n",
       "<ul style=\"text-align: left; list-style:none; margin: 0; padding: 0;\">\n",
       "  <li><b>Workers: </b>1</li>\n",
       "  <li><b>Cores: </b>4</li>\n",
       "  <li><b>Memory: </b>2.00 GB</li>\n",
       "</ul>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Client: 'inproc://10.1.0.87/5832/1' processes=1 threads=4, memory=2.00 GB>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from dask.distributed import Client, progress\n",
    "client = Client(processes=False, threads_per_worker=4,\n",
    "                n_workers=1, memory_limit='2GB')\n",
    "client"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Distributed Training\n",
    "\n",
    "<img src=\"images/scikit-learn-logo-notext.png\"/> <img src=\"images/joblib_logo.svg\" width=\"20%\"/> \n",
    "\n",
    "Scikit-learn uses [joblib](http://joblib.readthedocs.io/) for single-machine parallelism. This lets you train most estimators (anything that accepts an `n_jobs` parameter) using all the cores of your laptop or workstation.\n",
    "\n",
    "Alternatively, Scikit-Learn can use Dask for parallelism.  This lets you train those estimators using all the cores of your *cluster* without significantly changing your code.\n",
    "\n",
    "This is most useful for training large models on medium-sized datasets. You may have a large model when searching over many hyper-parameters, or when using an ensemble method with many individual estimators. For too small datasets, training times will typically be small enough that cluster-wide parallelism isn't helpful. For too large datasets (larger than a single machine's memory), the scikit-learn estimators may not be able to cope (see below)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create Scikit-Learn Estimator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:57.751681Z",
     "iopub.status.busy": "2021-07-19T14:35:57.749910Z",
     "iopub.status.idle": "2021-07-19T14:35:58.045703Z",
     "shell.execute_reply": "2021-07-19T14:35:58.046470Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.datasets import make_classification\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll use scikit-learn to create a pair of small random arrays, one for the features `X`, and one for the target `y`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:58.048798Z",
     "iopub.status.busy": "2021-07-19T14:35:58.048353Z",
     "iopub.status.idle": "2021-07-19T14:35:58.056621Z",
     "shell.execute_reply": "2021-07-19T14:35:58.056255Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.06377997,  0.67640868,  1.06935647, -0.21758002,  0.46021477,\n",
       "        -0.39916689, -0.07918751,  1.20938491, -0.78531472, -0.17218611,\n",
       "        -1.08535744, -0.99311895,  0.30693511,  0.06405769, -1.0542328 ,\n",
       "        -0.52749607, -0.0741832 , -0.35562842,  1.05721416, -0.90259159],\n",
       "       [ 0.0708476 , -1.69528125,  2.44944917, -0.5304942 , -0.93296221,\n",
       "         2.86520354,  2.43572851, -1.61850016,  1.30071691,  0.34840246,\n",
       "         0.54493439,  0.22532411,  0.60556322, -0.19210097, -0.06802699,\n",
       "         0.9716812 , -1.79204799,  0.01708348, -0.37566904, -0.62323644],\n",
       "       [ 0.94028404, -0.49214582,  0.67795602, -0.22775445,  1.40175261,\n",
       "         1.23165333, -0.77746425,  0.01561602,  1.33171299,  1.08477266,\n",
       "        -0.97805157, -0.05012039,  0.94838552, -0.17342825, -0.47767184,\n",
       "         0.76089649,  1.00115812, -0.06946407,  1.35904607, -1.18958963],\n",
       "       [-0.29951677,  0.75988955,  0.18280267, -1.55023271,  0.33821802,\n",
       "         0.36324148, -2.10052547, -0.4380675 , -0.16639343, -0.34083531,\n",
       "         0.42435643,  1.17872434,  2.8314804 ,  0.14241375, -0.20281911,\n",
       "         2.40571546,  0.31330473,  0.40435568, -0.28754632, -2.8478034 ],\n",
       "       [-2.63062675,  0.23103376,  0.04246253,  0.47885055,  1.54674163,\n",
       "         1.6379556 , -1.53207229, -0.73444479,  0.46585484,  0.4738362 ,\n",
       "         0.98981401, -1.06119392, -0.88887952,  1.23840892, -0.57282854,\n",
       "        -1.27533949,  1.0030065 , -0.47712843,  0.09853558,  0.52780407]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y = make_classification(n_samples=1000, random_state=0)\n",
    "X[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll fit a [Support Vector Classifier](http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html), using [grid search](http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html) to find the best value of the $C$ hyperparameter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:58.062116Z",
     "iopub.status.busy": "2021-07-19T14:35:58.061033Z",
     "iopub.status.idle": "2021-07-19T14:35:58.063334Z",
     "shell.execute_reply": "2021-07-19T14:35:58.062907Z"
    }
   },
   "outputs": [],
   "source": [
    "param_grid = {\"C\": [0.001, 0.01, 0.1, 0.5, 1.0, 2.0, 5.0, 10.0],\n",
    "              \"kernel\": ['rbf', 'poly', 'sigmoid'],\n",
    "              \"shrinking\": [True, False]}\n",
    "\n",
    "grid_search = GridSearchCV(SVC(gamma='auto', random_state=0, probability=True),\n",
    "                           param_grid=param_grid,\n",
    "                           return_train_score=False,\n",
    "                           cv=3,\n",
    "                           n_jobs=-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To fit that normally, we would call\n",
    "\n",
    "```python\n",
    "grid_search.fit(X, y)\n",
    "```\n",
    "\n",
    "To fit it using the cluster, we just need to use a context manager provided by joblib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:58.066489Z",
     "iopub.status.busy": "2021-07-19T14:35:58.066077Z",
     "iopub.status.idle": "2021-07-19T14:36:05.005162Z",
     "shell.execute_reply": "2021-07-19T14:36:05.004419Z"
    }
   },
   "outputs": [],
   "source": [
    "import joblib\n",
    "\n",
    "with joblib.parallel_backend('dask'):\n",
    "    grid_search.fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We fit 48 different models, one for each hyper-parameter combination in `param_grid`, distributed across the cluster. At this point, we have a regular scikit-learn model, which can be used for prediction, scoring, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:36:05.016824Z",
     "iopub.status.busy": "2021-07-19T14:36:05.009047Z",
     "iopub.status.idle": "2021-07-19T14:36:05.028231Z",
     "shell.execute_reply": "2021-07-19T14:36:05.027489Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_C</th>\n",
       "      <th>param_kernel</th>\n",
       "      <th>param_shrinking</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.227411</td>\n",
       "      <td>0.012685</td>\n",
       "      <td>0.019135</td>\n",
       "      <td>0.001966</td>\n",
       "      <td>0.001</td>\n",
       "      <td>rbf</td>\n",
       "      <td>True</td>\n",
       "      <td>{'C': 0.001, 'kernel': 'rbf', 'shrinking': True}</td>\n",
       "      <td>0.502994</td>\n",
       "      <td>0.501502</td>\n",
       "      <td>0.501502</td>\n",
       "      <td>0.501999</td>\n",
       "      <td>0.000704</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.229613</td>\n",
       "      <td>0.003402</td>\n",
       "      <td>0.022272</td>\n",
       "      <td>0.005095</td>\n",
       "      <td>0.001</td>\n",
       "      <td>rbf</td>\n",
       "      <td>False</td>\n",
       "      <td>{'C': 0.001, 'kernel': 'rbf', 'shrinking': False}</td>\n",
       "      <td>0.502994</td>\n",
       "      <td>0.501502</td>\n",
       "      <td>0.501502</td>\n",
       "      <td>0.501999</td>\n",
       "      <td>0.000704</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.166891</td>\n",
       "      <td>0.002126</td>\n",
       "      <td>0.012325</td>\n",
       "      <td>0.000938</td>\n",
       "      <td>0.001</td>\n",
       "      <td>poly</td>\n",
       "      <td>True</td>\n",
       "      <td>{'C': 0.001, 'kernel': 'poly', 'shrinking': True}</td>\n",
       "      <td>0.502994</td>\n",
       "      <td>0.501502</td>\n",
       "      <td>0.501502</td>\n",
       "      <td>0.501999</td>\n",
       "      <td>0.000704</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.185066</td>\n",
       "      <td>0.002251</td>\n",
       "      <td>0.013511</td>\n",
       "      <td>0.004918</td>\n",
       "      <td>0.001</td>\n",
       "      <td>poly</td>\n",
       "      <td>False</td>\n",
       "      <td>{'C': 0.001, 'kernel': 'poly', 'shrinking': Fa...</td>\n",
       "      <td>0.502994</td>\n",
       "      <td>0.501502</td>\n",
       "      <td>0.501502</td>\n",
       "      <td>0.501999</td>\n",
       "      <td>0.000704</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.373508</td>\n",
       "      <td>0.010605</td>\n",
       "      <td>0.040563</td>\n",
       "      <td>0.003634</td>\n",
       "      <td>0.001</td>\n",
       "      <td>sigmoid</td>\n",
       "      <td>True</td>\n",
       "      <td>{'C': 0.001, 'kernel': 'sigmoid', 'shrinking':...</td>\n",
       "      <td>0.502994</td>\n",
       "      <td>0.501502</td>\n",
       "      <td>0.501502</td>\n",
       "      <td>0.501999</td>\n",
       "      <td>0.000704</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time param_C  \\\n",
       "0       0.227411      0.012685         0.019135        0.001966   0.001   \n",
       "1       0.229613      0.003402         0.022272        0.005095   0.001   \n",
       "2       0.166891      0.002126         0.012325        0.000938   0.001   \n",
       "3       0.185066      0.002251         0.013511        0.004918   0.001   \n",
       "4       0.373508      0.010605         0.040563        0.003634   0.001   \n",
       "\n",
       "  param_kernel param_shrinking  \\\n",
       "0          rbf            True   \n",
       "1          rbf           False   \n",
       "2         poly            True   \n",
       "3         poly           False   \n",
       "4      sigmoid            True   \n",
       "\n",
       "                                              params  split0_test_score  \\\n",
       "0   {'C': 0.001, 'kernel': 'rbf', 'shrinking': True}           0.502994   \n",
       "1  {'C': 0.001, 'kernel': 'rbf', 'shrinking': False}           0.502994   \n",
       "2  {'C': 0.001, 'kernel': 'poly', 'shrinking': True}           0.502994   \n",
       "3  {'C': 0.001, 'kernel': 'poly', 'shrinking': Fa...           0.502994   \n",
       "4  {'C': 0.001, 'kernel': 'sigmoid', 'shrinking':...           0.502994   \n",
       "\n",
       "   split1_test_score  split2_test_score  mean_test_score  std_test_score  \\\n",
       "0           0.501502           0.501502         0.501999        0.000704   \n",
       "1           0.501502           0.501502         0.501999        0.000704   \n",
       "2           0.501502           0.501502         0.501999        0.000704   \n",
       "3           0.501502           0.501502         0.501999        0.000704   \n",
       "4           0.501502           0.501502         0.501999        0.000704   \n",
       "\n",
       "   rank_test_score  \n",
       "0               41  \n",
       "1               41  \n",
       "2               41  \n",
       "3               41  \n",
       "4               41  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(grid_search.cv_results_).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:36:05.030405Z",
     "iopub.status.busy": "2021-07-19T14:36:05.029828Z",
     "iopub.status.idle": "2021-07-19T14:36:05.045491Z",
     "shell.execute_reply": "2021-07-19T14:36:05.045865Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 1, 1, 0])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.predict(X)[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:36:05.053334Z",
     "iopub.status.busy": "2021-07-19T14:36:05.051721Z",
     "iopub.status.idle": "2021-07-19T14:36:05.063163Z",
     "shell.execute_reply": "2021-07-19T14:36:05.063506Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.983"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.score(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For more on training scikit-learn models with distributed joblib, see the [dask-ml documentation](http://dask-ml.readthedocs.io/en/latest/joblib.html)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training on Large Datasets\n",
    "\n",
    "Most estimators in scikit-learn are designed to work on in-memory arrays. Training with larger datasets may require different algorithms.\n",
    "\n",
    "All of the algorithms implemented in Dask-ML work well on larger than memory datasets, which you might store in a [dask array](http://dask.pydata.org/en/latest/array.html) or [dataframe](http://dask.pydata.org/en/latest/dataframe.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:36:05.067063Z",
     "iopub.status.busy": "2021-07-19T14:36:05.066625Z",
     "iopub.status.idle": "2021-07-19T14:36:05.228134Z",
     "shell.execute_reply": "2021-07-19T14:36:05.227698Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:36:05.231976Z",
     "iopub.status.busy": "2021-07-19T14:36:05.231484Z",
     "iopub.status.idle": "2021-07-19T14:36:06.009813Z",
     "shell.execute_reply": "2021-07-19T14:36:06.009043Z"
    }
   },
   "outputs": [],
   "source": [
    "import dask_ml.datasets\n",
    "import dask_ml.cluster\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example, we'll use `dask_ml.datasets.make_blobs` to generate some random *dask* arrays."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:36:06.017281Z",
     "iopub.status.busy": "2021-07-19T14:36:06.015964Z",
     "iopub.status.idle": "2021-07-19T14:36:06.364711Z",
     "shell.execute_reply": "2021-07-19T14:36:06.365240Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 160.00 MB </td> <td> 16.00 MB </td></tr>\n",
       "    <tr><th> Shape </th><td> (10000000, 2) </td> <td> (1000000, 2) </td></tr>\n",
       "    <tr><th> Count </th><td> 10 Tasks </td><td> 10 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> float64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 25.412617,0.000000 25.412617,120.000000 0.000000,120.000000\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >2</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">10000000</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<concatenate, shape=(10000000, 2), dtype=float64, chunksize=(1000000, 2), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y = dask_ml.datasets.make_blobs(n_samples=10000000,\n",
    "                                   chunks=1000000,\n",
    "                                   random_state=0,\n",
    "                                   centers=3)\n",
    "X = X.persist()\n",
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll use the k-means implemented in Dask-ML to cluster the points. It uses the `k-means||` (read: \"k-means parallel\") initialization algorithm, which scales better than `k-means++`. All of the computation, both during and after initialization, can be done in parallel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:36:06.367586Z",
     "iopub.status.busy": "2021-07-19T14:36:06.367176Z",
     "iopub.status.idle": "2021-07-19T14:36:19.298431Z",
     "shell.execute_reply": "2021-07-19T14:36:19.298759Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KMeans(init_max_iter=2, n_clusters=3, oversampling_factor=10)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "km = dask_ml.cluster.KMeans(n_clusters=3, init_max_iter=2, oversampling_factor=10)\n",
    "km.fit(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll plot a sample of points, colored by the cluster each falls into."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:36:19.302453Z",
     "iopub.status.busy": "2021-07-19T14:36:19.302046Z",
     "iopub.status.idle": "2021-07-19T14:36:20.190130Z",
     "shell.execute_reply": "2021-07-19T14:36:20.190724Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(X[::10000, 0], X[::10000, 1], marker='.', c=km.labels_[::10000],\n",
    "           cmap='viridis', alpha=0.25);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For all the estimators implemented in Dask-ML, see the [API documentation](http://dask-ml.readthedocs.io/en/latest/modules/api.html)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
