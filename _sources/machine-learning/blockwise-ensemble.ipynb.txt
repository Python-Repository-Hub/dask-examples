{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Blockwise Ensemble Methods\n",
    "\n",
    "Dask-ML provides some [ensemble methods](https://ml.dask.org/modules/api.html#module-dask_ml.ensemble) that are tailored to `dask.array`'s and `dask.dataframe`'s blocked structure. The basic idea is to fit a copy of some sub-estimator to each block (or partition) of the dask Array or DataFrame. Becuase each block fits in memory, the sub-estimator only needs to handle in-memory data structures like a NumPy array or pandas DataFrame. It also will be relatively fast, since each block fits in memory and we won't need to move large amounts of data between workers on a cluster. We end up with an ensemble of models: one per block in the training dataset.\n",
    "\n",
    "At prediction time, we combine the results from all the models in the ensemble. For regression problems, this means averaging the predictions from each sub-estimator. For classification problems, each sub-estimator votes and the results are combined. See https://scikit-learn.org/stable/modules/ensemble.html#voting-classifier for details on how they can be combeind. See https://scikit-learn.org/stable/modules/ensemble.html for a general overview of why averaging ensemble methods can be useful.\n",
    "\n",
    "It's crucially important that the distribution of values in your dataset be relatively uniform across partitions. Otherwise the parameters learned on any given partition of the data will be poor for the dataset as a whole. This will be shown in detail later."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's randomly generate an example dataset. In practice, you would load the data from storage. We'll create a `dask.array` with 10 blocks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:14.455614Z",
     "iopub.status.busy": "2021-07-19T14:49:14.454975Z",
     "iopub.status.idle": "2021-07-19T14:49:17.559676Z",
     "shell.execute_reply": "2021-07-19T14:49:17.560005Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 160.00 MB </td> <td> 16.00 MB </td></tr>\n",
       "    <tr><th> Shape </th><td> (1000000, 20) </td> <td> (100000, 20) </td></tr>\n",
       "    <tr><th> Count </th><td> 10 Tasks </td><td> 10 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> float64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 25.412617,0.000000 25.412617,120.000000 0.000000,120.000000\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">1000000</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(1000000, 20), dtype=float64, chunksize=(100000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from distributed import Client\n",
    "import dask_ml.datasets\n",
    "import dask_ml.ensemble\n",
    "\n",
    "client = Client(n_workers=4, threads_per_worker=1)\n",
    "\n",
    "X, y = dask_ml.datasets.make_classification(n_samples=1_000_000,\n",
    "                                            n_informative=10,\n",
    "                                            shift=2, scale=2,\n",
    "                                            chunks=100_000)\n",
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classification\n",
    "\n",
    "The `sub-estimator` should be an instantiated scikit-learn-API compatible estimator (anything that implements the `fit` / `predict` API, including pipelines). It only needs to handle in-memory datasets. We'll use `sklearn.linear_model.RidgeClassifier`.\n",
    "\n",
    "To get the output shapes right, we require that you provide the `classes` for classification problems, either when creating the estimator or in `.fit` if the sub-estimator also requires the classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:17.566609Z",
     "iopub.status.busy": "2021-07-19T14:49:17.564509Z",
     "iopub.status.idle": "2021-07-19T14:49:17.569948Z",
     "shell.execute_reply": "2021-07-19T14:49:17.569590Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BlockwiseVotingClassifier(classes=[0, 1],\n",
       "                          estimator=RidgeClassifier(random_state=0))"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sklearn.linear_model\n",
    "\n",
    "subestimator = sklearn.linear_model.RidgeClassifier(random_state=0)\n",
    "clf = dask_ml.ensemble.BlockwiseVotingClassifier(\n",
    "    subestimator,\n",
    "    classes=[0, 1]\n",
    ")\n",
    "clf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can train normally. This will *independently* fit a clone of `subestimator` on each partition of `X` and `y`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:17.575108Z",
     "iopub.status.busy": "2021-07-19T14:49:17.574718Z",
     "iopub.status.idle": "2021-07-19T14:49:20.211049Z",
     "shell.execute_reply": "2021-07-19T14:49:20.210222Z"
    }
   },
   "outputs": [],
   "source": [
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All of the fitted estimators are available at `.estimators_`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:20.215847Z",
     "iopub.status.busy": "2021-07-19T14:49:20.215450Z",
     "iopub.status.idle": "2021-07-19T14:49:20.220528Z",
     "shell.execute_reply": "2021-07-19T14:49:20.221114Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0)]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.estimators_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are different estimators! They've been trained on separate batches of data and have learned different parameters. We can plot the difference in the learned `coef_` of the first two models to visualize this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:20.223616Z",
     "iopub.status.busy": "2021-07-19T14:49:20.222804Z",
     "iopub.status.idle": "2021-07-19T14:49:20.449503Z",
     "shell.execute_reply": "2021-07-19T14:49:20.449086Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:20.466349Z",
     "iopub.status.busy": "2021-07-19T14:49:20.465934Z",
     "iopub.status.idle": "2021-07-19T14:49:20.571582Z",
     "shell.execute_reply": "2021-07-19T14:49:20.572169Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = clf.estimators_[0].coef_\n",
    "b = clf.estimators_[1].coef_\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.bar(np.arange(a.shape[1]), (a - b).ravel())\n",
    "ax.set(xticks=[], xlabel=\"Feature\", title=\"Difference in Learned Coefficients\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That said, the assumption backing this entire process is that the distribution of the data is relatively uniform across partitions. The parameters learned by the each member of the ensemble should be relatively similar, and so will give relatively similar predictions when applied to the same data.\n",
    "\n",
    "When you `predict`, the result will have the same chunking pattern as the input array you're predicting for (which need not match the partitioning of the training data)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:20.582959Z",
     "iopub.status.busy": "2021-07-19T14:49:20.581108Z",
     "iopub.status.idle": "2021-07-19T14:49:20.587061Z",
     "shell.execute_reply": "2021-07-19T14:49:20.586702Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 8.00 MB </td> <td> 800.00 kB </td></tr>\n",
       "    <tr><th> Shape </th><td> (1000000,) </td> <td> (100000,) </td></tr>\n",
       "    <tr><th> Count </th><td> 31 Tasks </td><td> 10 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> int64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"170\" height=\"75\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"12\" y1=\"0\" x2=\"12\" y2=\"25\" />\n",
       "  <line x1=\"24\" y1=\"0\" x2=\"24\" y2=\"25\" />\n",
       "  <line x1=\"36\" y1=\"0\" x2=\"36\" y2=\"25\" />\n",
       "  <line x1=\"48\" y1=\"0\" x2=\"48\" y2=\"25\" />\n",
       "  <line x1=\"60\" y1=\"0\" x2=\"60\" y2=\"25\" />\n",
       "  <line x1=\"72\" y1=\"0\" x2=\"72\" y2=\"25\" />\n",
       "  <line x1=\"84\" y1=\"0\" x2=\"84\" y2=\"25\" />\n",
       "  <line x1=\"96\" y1=\"0\" x2=\"96\" y2=\"25\" />\n",
       "  <line x1=\"108\" y1=\"0\" x2=\"108\" y2=\"25\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 120.000000,0.000000 120.000000,25.412617 0.000000,25.412617\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"45.412617\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >1000000</text>\n",
       "  <text x=\"140.000000\" y=\"12.706308\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(0,140.000000,12.706308)\">1</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<_vote_block, shape=(1000000,), dtype=int64, chunksize=(100000,), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds = clf.predict(X)\n",
    "preds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This generates a set of tasks that\n",
    "\n",
    "1. Calls `subestimator.predict(chunk)` for each subestimator (10 in our case)\n",
    "2. Concatenates those predictions together\n",
    "3. Somehow averages the predictions to a single overall prediction\n",
    "\n",
    "We used the default `voting=\"hard\"` strategy, which means we just choose the class that had the higest number of votes. If the first two sub-estimators picked class `0` and the other eight picked class `1` for the first row, the final prediction for that row will be class `1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:20.591860Z",
     "iopub.status.busy": "2021-07-19T14:49:20.591467Z",
     "iopub.status.idle": "2021-07-19T14:49:21.452674Z",
     "shell.execute_reply": "2021-07-19T14:49:21.452260Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 1, 1, 0, 1, 0, 0])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:10].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With `voting=\"soft\"` we have access to `predict_proba`, as long as the subestimator has a `predict_proba` method. These subestimators should be well-calibrated for the predictions to be meaningful. See [probability calibration](https://scikit-learn.org/stable/modules/calibration.html#calibration) for more."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:21.472519Z",
     "iopub.status.busy": "2021-07-19T14:49:21.472060Z",
     "iopub.status.idle": "2021-07-19T14:49:23.645930Z",
     "shell.execute_reply": "2021-07-19T14:49:23.645170Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LogisticRegression(random_state=0)\n",
    "clf = dask_ml.ensemble.BlockwiseVotingClassifier(\n",
    "    subestimator,\n",
    "    classes=[0, 1],\n",
    "    voting=\"soft\"\n",
    ")\n",
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:23.652735Z",
     "iopub.status.busy": "2021-07-19T14:49:23.652319Z",
     "iopub.status.idle": "2021-07-19T14:49:23.792965Z",
     "shell.execute_reply": "2021-07-19T14:49:23.792610Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5.12800374e-01, 4.87199626e-01],\n",
       "       [9.99851801e-01, 1.48199460e-04],\n",
       "       [6.28521889e-01, 3.71478111e-01],\n",
       "       [5.44988082e-01, 4.55011918e-01],\n",
       "       [3.87698849e-03, 9.96123012e-01]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "proba = clf.predict_proba(X)\n",
    "proba[:5].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The stages here are similar to the `voting=\"hard\"` case. Only now instead of taking the majority vote we average the probabilities predicted by each sub-estimator."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression\n",
    "\n",
    "Regression is quite similar. The primary difference is that there's no voting; predictions from estimators are always reduced by averaging."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:23.797509Z",
     "iopub.status.busy": "2021-07-19T14:49:23.797052Z",
     "iopub.status.idle": "2021-07-19T14:49:23.900768Z",
     "shell.execute_reply": "2021-07-19T14:49:23.901370Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 160.00 MB </td> <td> 16.00 MB </td></tr>\n",
       "    <tr><th> Shape </th><td> (1000000, 20) </td> <td> (100000, 20) </td></tr>\n",
       "    <tr><th> Count </th><td> 10 Tasks </td><td> 10 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> float64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 25.412617,0.000000 25.412617,120.000000 0.000000,120.000000\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">1000000</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(1000000, 20), dtype=float64, chunksize=(100000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y = dask_ml.datasets.make_regression(n_samples=1_000_000,\n",
    "                                        chunks=100_000,\n",
    "                                        n_features=20)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:23.903954Z",
     "iopub.status.busy": "2021-07-19T14:49:23.903140Z",
     "iopub.status.idle": "2021-07-19T14:49:25.392446Z",
     "shell.execute_reply": "2021-07-19T14:49:25.391658Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LinearRegression()\n",
    "clf = dask_ml.ensemble.BlockwiseVotingRegressor(\n",
    "    subestimator,\n",
    ")\n",
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:25.397687Z",
     "iopub.status.busy": "2021-07-19T14:49:25.397281Z",
     "iopub.status.idle": "2021-07-19T14:49:25.519056Z",
     "shell.execute_reply": "2021-07-19T14:49:25.519567Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 24.41429662, 154.16771036,  15.4747011 ,  74.38735536,\n",
       "       -83.32241298])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict(X)[:5].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As usual with Dask-ML, scoring is done in parallel (and distributed on a cluster if you're connected to one)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:25.529093Z",
     "iopub.status.busy": "2021-07-19T14:49:25.528074Z",
     "iopub.status.idle": "2021-07-19T14:49:27.028739Z",
     "shell.execute_reply": "2021-07-19T14:49:27.030900Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The dangers of non-uniformly distributed data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, it must be re-emphasized that your data should be uniformly distributed across partitoins prior to using these ensemble methods. If it's not, then you're better off just sampling rows from each partition and fitting a single classifer to it. By \"uniform\" we don't mean \"from a uniform probabillity distribution\". Just that there shouldn't be a clear per-partition pattern to how the data is distributed.\n",
    "\n",
    "Let's demonstrate that with an example. We'll generate a dataset with a clear trend across partitions. This might represent some non-stationary time-series, though it can occur in other contexts as well (e.g. on data partitioned by geography, age, etc.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:27.034030Z",
     "iopub.status.busy": "2021-07-19T14:49:27.033627Z",
     "iopub.status.idle": "2021-07-19T14:49:27.036408Z",
     "shell.execute_reply": "2021-07-19T14:49:27.036978Z"
    }
   },
   "outputs": [],
   "source": [
    "import dask.array as da\n",
    "import dask.delayed\n",
    "import sklearn.datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:27.039428Z",
     "iopub.status.busy": "2021-07-19T14:49:27.038614Z",
     "iopub.status.idle": "2021-07-19T14:49:27.043102Z",
     "shell.execute_reply": "2021-07-19T14:49:27.043657Z"
    }
   },
   "outputs": [],
   "source": [
    "def clone_and_shift(X, y, i):\n",
    "    X = X.copy()\n",
    "    X += i + np.random.random(X.shape)\n",
    "    y += 25 * (i + np.random.random(y.shape))\n",
    "    return X, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:27.046285Z",
     "iopub.status.busy": "2021-07-19T14:49:27.045426Z",
     "iopub.status.idle": "2021-07-19T14:49:27.055739Z",
     "shell.execute_reply": "2021-07-19T14:49:27.055347Z"
    }
   },
   "outputs": [],
   "source": [
    "# Make a base dataset that we'll clone and shift\n",
    "X, y = sklearn.datasets.make_regression(n_features=4, bias=2, random_state=0)\n",
    "\n",
    "# Clone and shift 10 times, gradually increasing X and y for each partition\n",
    "Xs, ys = zip(*[dask.delayed(clone_and_shift, nout=2)(X, y, i) for i in range(10)])\n",
    "Xs = [da.from_delayed(x, shape=X.shape, dtype=X.dtype) for x in Xs]\n",
    "ys = [da.from_delayed(y_, shape=y.shape, dtype=y.dtype) for y_ in ys]\n",
    "X2 = da.concatenate(Xs)\n",
    "y2 = da.concatenate(ys)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot a sample of points, coloring by which partition the data came from."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:27.071012Z",
     "iopub.status.busy": "2021-07-19T14:49:27.069644Z",
     "iopub.status.idle": "2021-07-19T14:49:27.248733Z",
     "shell.execute_reply": "2021-07-19T14:49:27.248352Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(X2[::5, 0], y2[::5], c=np.arange(0, len(X2), 5) // 100, cmap=\"Set1\",\n",
    "           label=\"Partition\")\n",
    "ax.set(xlabel=\"Feature 0\", ylabel=\"target\", title=\"Non-stationary data (by partition)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's fit two estimators:\n",
    "\n",
    "1. One `BlockwiseVotingRegressor` on the entire dataset (which fits a `LinearRegression` on each partition)\n",
    "2. One `LinearRegression` on a sample from the entire dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:27.256268Z",
     "iopub.status.busy": "2021-07-19T14:49:27.251555Z",
     "iopub.status.idle": "2021-07-19T14:49:27.333087Z",
     "shell.execute_reply": "2021-07-19T14:49:27.332703Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LinearRegression()\n",
    "clf = dask_ml.ensemble.BlockwiseVotingRegressor(\n",
    "    subestimator,\n",
    ")\n",
    "clf.fit(X2, y2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:27.341848Z",
     "iopub.status.busy": "2021-07-19T14:49:27.339713Z",
     "iopub.status.idle": "2021-07-19T14:49:27.389191Z",
     "shell.execute_reply": "2021-07-19T14:49:27.388827Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_sampled, y_sampled = dask.compute(X2[::10], y2[::10])\n",
    "\n",
    "subestimator.fit(X_sampled, y_sampled)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comparing the scores, we find that the sampled dataset performs much better, despite training on less data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:27.417133Z",
     "iopub.status.busy": "2021-07-19T14:49:27.395974Z",
     "iopub.status.idle": "2021-07-19T14:49:27.875889Z",
     "shell.execute_reply": "2021-07-19T14:49:27.875524Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-10.942832389359356"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X2, y2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:49:27.878906Z",
     "iopub.status.busy": "2021-07-19T14:49:27.878470Z",
     "iopub.status.idle": "2021-07-19T14:49:27.956200Z",
     "shell.execute_reply": "2021-07-19T14:49:27.956807Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.07620301330413726"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subestimator.score(X2, y2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This shows that ensuring your needs to be relatively uniform across partitions. Even including the standard controls to normalize whatever underlying force is generating the non-stationary data (e.g. a time trend compontent or differencing timeseries data, dummy variables for geographic regions, etc) is not sufficient when your dataset is partioned by the non-uniform variable. You would still need to either shuffle your data prior to fitting, or just sample and fit the sub-estimator on the sub-sample that fits in memory."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
