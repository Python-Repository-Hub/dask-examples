{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Blockwise Ensemble Methods\n",
    "\n",
    "Dask-ML provides some [ensemble methods](https://ml.dask.org/modules/api.html#module-dask_ml.ensemble) that are tailored to `dask.array`'s and `dask.dataframe`'s blocked structure. The basic idea is to fit a copy of some sub-estimator to each block (or partition) of the dask Array or DataFrame. Becuase each block fits in memory, the sub-estimator only needs to handle in-memory data structures like a NumPy array or pandas DataFrame. It also will be relatively fast, since each block fits in memory and we won't need to move large amounts of data between workers on a cluster. We end up with an ensemble of models: one per block in the training dataset.\n",
    "\n",
    "At prediction time, we combine the results from all the models in the ensemble. For regression problems, this means averaging the predictions from each sub-estimator. For classification problems, each sub-estimator votes and the results are combined. See https://scikit-learn.org/stable/modules/ensemble.html#voting-classifier for details on how they can be combeind. See https://scikit-learn.org/stable/modules/ensemble.html for a general overview of why averaging ensemble methods can be useful.\n",
    "\n",
    "It's crucially important that the distribution of values in your dataset be relatively uniform across partitions. Otherwise the parameters learned on any given partition of the data will be poor for the dataset as a whole. This will be shown in detail later."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's randomly generate an example dataset. In practice, you would load the data from storage. We'll create a `dask.array` with 10 blocks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:20:49.926792Z",
     "iopub.status.busy": "2021-03-12T23:20:49.925965Z",
     "iopub.status.idle": "2021-03-12T23:20:54.631870Z",
     "shell.execute_reply": "2021-03-12T23:20:54.631335Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 160.00 MB </td> <td> 16.00 MB </td></tr>\n",
       "    <tr><th> Shape </th><td> (1000000, 20) </td> <td> (100000, 20) </td></tr>\n",
       "    <tr><th> Count </th><td> 10 Tasks </td><td> 10 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> float64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 25.412617,0.000000 25.412617,120.000000 0.000000,120.000000\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">1000000</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(1000000, 20), dtype=float64, chunksize=(100000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from distributed import Client\n",
    "import dask_ml.datasets\n",
    "import dask_ml.ensemble\n",
    "\n",
    "client = Client(n_workers=4, threads_per_worker=1)\n",
    "\n",
    "X, y = dask_ml.datasets.make_classification(n_samples=1_000_000,\n",
    "                                            n_informative=10,\n",
    "                                            shift=2, scale=2,\n",
    "                                            chunks=100_000)\n",
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classification\n",
    "\n",
    "The `sub-estimator` should be an instantiated scikit-learn-API compatible estimator (anything that implements the `fit` / `predict` API, including pipelines). It only needs to handle in-memory datasets. We'll use `sklearn.linear_model.RidgeClassifier`.\n",
    "\n",
    "To get the output shapes right, we require that you provide the `classes` for classification problems, either when creating the estimator or in `.fit` if the sub-estimator also requires the classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:20:54.639746Z",
     "iopub.status.busy": "2021-03-12T23:20:54.638714Z",
     "iopub.status.idle": "2021-03-12T23:20:54.643528Z",
     "shell.execute_reply": "2021-03-12T23:20:54.643931Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BlockwiseVotingClassifier(classes=[0, 1],\n",
       "                          estimator=RidgeClassifier(random_state=0))"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sklearn.linear_model\n",
    "\n",
    "subestimator = sklearn.linear_model.RidgeClassifier(random_state=0)\n",
    "clf = dask_ml.ensemble.BlockwiseVotingClassifier(\n",
    "    subestimator,\n",
    "    classes=[0, 1]\n",
    ")\n",
    "clf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can train normally. This will *independently* fit a clone of `subestimator` on each partition of `X` and `y`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:20:54.654518Z",
     "iopub.status.busy": "2021-03-12T23:20:54.654044Z",
     "iopub.status.idle": "2021-03-12T23:21:00.274741Z",
     "shell.execute_reply": "2021-03-12T23:21:00.275149Z"
    }
   },
   "outputs": [],
   "source": [
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All of the fitted estimators are available at `.estimators_`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:00.286746Z",
     "iopub.status.busy": "2021-03-12T23:21:00.286243Z",
     "iopub.status.idle": "2021-03-12T23:21:00.301693Z",
     "shell.execute_reply": "2021-03-12T23:21:00.300541Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0)]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.estimators_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are different estimators! They've been trained on separate batches of data and have learned different parameters. We can plot the difference in the learned `coef_` of the first two models to visualize this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:00.304625Z",
     "iopub.status.busy": "2021-03-12T23:21:00.304197Z",
     "iopub.status.idle": "2021-03-12T23:21:00.628317Z",
     "shell.execute_reply": "2021-03-12T23:21:00.627907Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:00.651581Z",
     "iopub.status.busy": "2021-03-12T23:21:00.647388Z",
     "iopub.status.idle": "2021-03-12T23:21:00.768701Z",
     "shell.execute_reply": "2021-03-12T23:21:00.769545Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = clf.estimators_[0].coef_\n",
    "b = clf.estimators_[1].coef_\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.bar(np.arange(a.shape[1]), (a - b).ravel())\n",
    "ax.set(xticks=[], xlabel=\"Feature\", title=\"Difference in Learned Coefficients\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That said, the assumption backing this entire process is that the distribution of the data is relatively uniform across partitions. The parameters learned by the each member of the ensemble should be relatively similar, and so will give relatively similar predictions when applied to the same data.\n",
    "\n",
    "When you `predict`, the result will have the same chunking pattern as the input array you're predicting for (which need not match the partitioning of the training data)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:00.772305Z",
     "iopub.status.busy": "2021-03-12T23:21:00.771684Z",
     "iopub.status.idle": "2021-03-12T23:21:00.795509Z",
     "shell.execute_reply": "2021-03-12T23:21:00.796261Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 8.00 MB </td> <td> 800.00 kB </td></tr>\n",
       "    <tr><th> Shape </th><td> (1000000,) </td> <td> (100000,) </td></tr>\n",
       "    <tr><th> Count </th><td> 31 Tasks </td><td> 10 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> int64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"170\" height=\"75\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"12\" y1=\"0\" x2=\"12\" y2=\"25\" />\n",
       "  <line x1=\"24\" y1=\"0\" x2=\"24\" y2=\"25\" />\n",
       "  <line x1=\"36\" y1=\"0\" x2=\"36\" y2=\"25\" />\n",
       "  <line x1=\"48\" y1=\"0\" x2=\"48\" y2=\"25\" />\n",
       "  <line x1=\"60\" y1=\"0\" x2=\"60\" y2=\"25\" />\n",
       "  <line x1=\"72\" y1=\"0\" x2=\"72\" y2=\"25\" />\n",
       "  <line x1=\"84\" y1=\"0\" x2=\"84\" y2=\"25\" />\n",
       "  <line x1=\"96\" y1=\"0\" x2=\"96\" y2=\"25\" />\n",
       "  <line x1=\"108\" y1=\"0\" x2=\"108\" y2=\"25\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 120.000000,0.000000 120.000000,25.412617 0.000000,25.412617\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"45.412617\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >1000000</text>\n",
       "  <text x=\"140.000000\" y=\"12.706308\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(0,140.000000,12.706308)\">1</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<_vote_block, shape=(1000000,), dtype=int64, chunksize=(100000,), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds = clf.predict(X)\n",
    "preds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This generates a set of tasks that\n",
    "\n",
    "1. Calls `subestimator.predict(chunk)` for each subestimator (10 in our case)\n",
    "2. Concatenates those predictions together\n",
    "3. Somehow averages the predictions to a single overall prediction\n",
    "\n",
    "We used the default `voting=\"hard\"` strategy, which means we just choose the class that had the higest number of votes. If the first two sub-estimators picked class `0` and the other eight picked class `1` for the first row, the final prediction for that row will be class `1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:00.799449Z",
     "iopub.status.busy": "2021-03-12T23:21:00.798884Z",
     "iopub.status.idle": "2021-03-12T23:21:02.924994Z",
     "shell.execute_reply": "2021-03-12T23:21:02.924580Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 1, 0, 0, 1, 0, 1, 1])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:10].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With `voting=\"soft\"` we have access to `predict_proba`, as long as the subestimator has a `predict_proba` method. These subestimators should be well-calibrated for the predictions to be meaningful. See [probability calibration](https://scikit-learn.org/stable/modules/calibration.html#calibration) for more."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:02.936575Z",
     "iopub.status.busy": "2021-03-12T23:21:02.936053Z",
     "iopub.status.idle": "2021-03-12T23:21:07.309178Z",
     "shell.execute_reply": "2021-03-12T23:21:07.309543Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LogisticRegression(random_state=0)\n",
    "clf = dask_ml.ensemble.BlockwiseVotingClassifier(\n",
    "    subestimator,\n",
    "    classes=[0, 1],\n",
    "    voting=\"soft\"\n",
    ")\n",
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:07.329079Z",
     "iopub.status.busy": "2021-03-12T23:21:07.317482Z",
     "iopub.status.idle": "2021-03-12T23:21:07.696777Z",
     "shell.execute_reply": "2021-03-12T23:21:07.697759Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[9.99866066e-01, 1.33934067e-04],\n",
       "       [9.97843256e-01, 2.15674401e-03],\n",
       "       [9.19002450e-01, 8.09975503e-02],\n",
       "       [4.72856473e-04, 9.99527144e-01],\n",
       "       [5.20818521e-01, 4.79181479e-01]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "proba = clf.predict_proba(X)\n",
    "proba[:5].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The stages here are similar to the `voting=\"hard\"` case. Only now instead of taking the majority vote we average the probabilities predicted by each sub-estimator."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression\n",
    "\n",
    "Regression is quite similar. The primary difference is that there's no voting; predictions from estimators are always reduced by averaging."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:07.701902Z",
     "iopub.status.busy": "2021-03-12T23:21:07.701406Z",
     "iopub.status.idle": "2021-03-12T23:21:07.959556Z",
     "shell.execute_reply": "2021-03-12T23:21:07.960244Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 160.00 MB </td> <td> 16.00 MB </td></tr>\n",
       "    <tr><th> Shape </th><td> (1000000, 20) </td> <td> (100000, 20) </td></tr>\n",
       "    <tr><th> Count </th><td> 10 Tasks </td><td> 10 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> float64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 25.412617,0.000000 25.412617,120.000000 0.000000,120.000000\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">1000000</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(1000000, 20), dtype=float64, chunksize=(100000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y = dask_ml.datasets.make_regression(n_samples=1_000_000,\n",
    "                                        chunks=100_000,\n",
    "                                        n_features=20)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:07.976378Z",
     "iopub.status.busy": "2021-03-12T23:21:07.975956Z",
     "iopub.status.idle": "2021-03-12T23:21:11.219407Z",
     "shell.execute_reply": "2021-03-12T23:21:11.218926Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LinearRegression()\n",
    "clf = dask_ml.ensemble.BlockwiseVotingRegressor(\n",
    "    subestimator,\n",
    ")\n",
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:11.228033Z",
     "iopub.status.busy": "2021-03-12T23:21:11.227521Z",
     "iopub.status.idle": "2021-03-12T23:21:11.475065Z",
     "shell.execute_reply": "2021-03-12T23:21:11.474662Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 237.0011179 ,  182.34022327,  111.57407876, -150.49161146,\n",
       "       -274.28994801])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict(X)[:5].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As usual with Dask-ML, scoring is done in parallel (and distributed on a cluster if you're connected to one)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:11.479668Z",
     "iopub.status.busy": "2021-03-12T23:21:11.479158Z",
     "iopub.status.idle": "2021-03-12T23:21:15.001889Z",
     "shell.execute_reply": "2021-03-12T23:21:15.001286Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The dangers of non-uniformly distributed data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, it must be re-emphasized that your data should be uniformly distributed across partitoins prior to using these ensemble methods. If it's not, then you're better off just sampling rows from each partition and fitting a single classifer to it. By \"uniform\" we don't mean \"from a uniform probabillity distribution\". Just that there shouldn't be a clear per-partition pattern to how the data is distributed.\n",
    "\n",
    "Let's demonstrate that with an example. We'll generate a dataset with a clear trend across partitions. This might represent some non-stationary time-series, though it can occur in other contexts as well (e.g. on data partitioned by geography, age, etc.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:15.005447Z",
     "iopub.status.busy": "2021-03-12T23:21:15.004983Z",
     "iopub.status.idle": "2021-03-12T23:21:15.008114Z",
     "shell.execute_reply": "2021-03-12T23:21:15.008451Z"
    }
   },
   "outputs": [],
   "source": [
    "import dask.array as da\n",
    "import dask.delayed\n",
    "import sklearn.datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:15.012437Z",
     "iopub.status.busy": "2021-03-12T23:21:15.010257Z",
     "iopub.status.idle": "2021-03-12T23:21:15.017177Z",
     "shell.execute_reply": "2021-03-12T23:21:15.016378Z"
    }
   },
   "outputs": [],
   "source": [
    "def clone_and_shift(X, y, i):\n",
    "    X = X.copy()\n",
    "    X += i + np.random.random(X.shape)\n",
    "    y += 25 * (i + np.random.random(y.shape))\n",
    "    return X, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:15.029179Z",
     "iopub.status.busy": "2021-03-12T23:21:15.027669Z",
     "iopub.status.idle": "2021-03-12T23:21:15.039939Z",
     "shell.execute_reply": "2021-03-12T23:21:15.040504Z"
    }
   },
   "outputs": [],
   "source": [
    "# Make a base dataset that we'll clone and shift\n",
    "X, y = sklearn.datasets.make_regression(n_features=4, bias=2, random_state=0)\n",
    "\n",
    "# Clone and shift 10 times, gradually increasing X and y for each partition\n",
    "Xs, ys = zip(*[dask.delayed(clone_and_shift, nout=2)(X, y, i) for i in range(10)])\n",
    "Xs = [da.from_delayed(x, shape=X.shape, dtype=X.dtype) for x in Xs]\n",
    "ys = [da.from_delayed(y_, shape=y.shape, dtype=y.dtype) for y_ in ys]\n",
    "X2 = da.concatenate(Xs)\n",
    "y2 = da.concatenate(ys)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot a sample of points, coloring by which partition the data came from."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:15.051142Z",
     "iopub.status.busy": "2021-03-12T23:21:15.049923Z",
     "iopub.status.idle": "2021-03-12T23:21:15.461024Z",
     "shell.execute_reply": "2021-03-12T23:21:15.460590Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(X2[::5, 0], y2[::5], c=np.arange(0, len(X2), 5) // 100, cmap=\"Set1\",\n",
    "           label=\"Partition\")\n",
    "ax.set(xlabel=\"Feature 0\", ylabel=\"target\", title=\"Non-stationary data (by partition)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's fit two estimators:\n",
    "\n",
    "1. One `BlockwiseVotingRegressor` on the entire dataset (which fits a `LinearRegression` on each partition)\n",
    "2. One `LinearRegression` on a sample from the entire dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:15.467579Z",
     "iopub.status.busy": "2021-03-12T23:21:15.466978Z",
     "iopub.status.idle": "2021-03-12T23:21:15.825035Z",
     "shell.execute_reply": "2021-03-12T23:21:15.824135Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LinearRegression()\n",
    "clf = dask_ml.ensemble.BlockwiseVotingRegressor(\n",
    "    subestimator,\n",
    ")\n",
    "clf.fit(X2, y2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:15.830445Z",
     "iopub.status.busy": "2021-03-12T23:21:15.830001Z",
     "iopub.status.idle": "2021-03-12T23:21:15.939965Z",
     "shell.execute_reply": "2021-03-12T23:21:15.941305Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_sampled, y_sampled = dask.compute(X2[::10], y2[::10])\n",
    "\n",
    "subestimator.fit(X_sampled, y_sampled)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comparing the scores, we find that the sampled dataset performs much better, despite training on less data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:15.963275Z",
     "iopub.status.busy": "2021-03-12T23:21:15.950761Z",
     "iopub.status.idle": "2021-03-12T23:21:16.334822Z",
     "shell.execute_reply": "2021-03-12T23:21:16.334332Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-12.020675834378823"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X2, y2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-12T23:21:16.339626Z",
     "iopub.status.busy": "2021-03-12T23:21:16.339176Z",
     "iopub.status.idle": "2021-03-12T23:21:16.544370Z",
     "shell.execute_reply": "2021-03-12T23:21:16.543914Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.179606867203295"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subestimator.score(X2, y2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This shows that ensuring your needs to be relatively uniform across partitions. Even including the standard controls to normalize whatever underlying force is generating the non-stationary data (e.g. a time trend compontent or differencing timeseries data, dummy variables for geographic regions, etc) is not sufficient when your dataset is partioned by the non-uniform variable. You would still need to either shuffle your data prior to fitting, or just sample and fit the sub-estimator on the sub-sample that fits in memory."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
