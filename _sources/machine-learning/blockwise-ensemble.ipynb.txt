{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Blockwise Ensemble Methods\n",
    "\n",
    "Dask-ML provides some [ensemble methods](https://ml.dask.org/modules/api.html#module-dask_ml.ensemble) that are tailored to `dask.array`'s and `dask.dataframe`'s blocked structure. The basic idea is to fit a copy of some sub-estimator to each block (or partition) of the dask Array or DataFrame. Becuase each block fits in memory, the sub-estimator only needs to handle in-memory data structures like a NumPy array or pandas DataFrame. It also will be relatively fast, since each block fits in memory and we won't need to move large amounts of data between workers on a cluster. We end up with an ensemble of models: one per block in the training dataset.\n",
    "\n",
    "At prediction time, we combine the results from all the models in the ensemble. For regression problems, this means averaging the predictions from each sub-estimator. For classification problems, each sub-estimator votes and the results are combined. See https://scikit-learn.org/stable/modules/ensemble.html#voting-classifier for details on how they can be combeind. See https://scikit-learn.org/stable/modules/ensemble.html for a general overview of why averaging ensemble methods can be useful.\n",
    "\n",
    "It's crucially important that the distribution of values in your dataset be relatively uniform across partitions. Otherwise the parameters learned on any given partition of the data will be poor for the dataset as a whole. This will be shown in detail later."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's randomly generate an example dataset. In practice, you would load the data from storage. We'll create a `dask.array` with 10 blocks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:18:56.581069Z",
     "iopub.status.busy": "2021-07-26T20:18:56.580467Z",
     "iopub.status.idle": "2021-07-26T20:19:00.219135Z",
     "shell.execute_reply": "2021-07-26T20:19:00.218317Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 160.00 MB </td> <td> 16.00 MB </td></tr>\n",
       "    <tr><th> Shape </th><td> (1000000, 20) </td> <td> (100000, 20) </td></tr>\n",
       "    <tr><th> Count </th><td> 10 Tasks </td><td> 10 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> float64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 25.412617,0.000000 25.412617,120.000000 0.000000,120.000000\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">1000000</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(1000000, 20), dtype=float64, chunksize=(100000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from distributed import Client\n",
    "import dask_ml.datasets\n",
    "import dask_ml.ensemble\n",
    "\n",
    "client = Client(n_workers=4, threads_per_worker=1)\n",
    "\n",
    "X, y = dask_ml.datasets.make_classification(n_samples=1_000_000,\n",
    "                                            n_informative=10,\n",
    "                                            shift=2, scale=2,\n",
    "                                            chunks=100_000)\n",
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classification\n",
    "\n",
    "The `sub-estimator` should be an instantiated scikit-learn-API compatible estimator (anything that implements the `fit` / `predict` API, including pipelines). It only needs to handle in-memory datasets. We'll use `sklearn.linear_model.RidgeClassifier`.\n",
    "\n",
    "To get the output shapes right, we require that you provide the `classes` for classification problems, either when creating the estimator or in `.fit` if the sub-estimator also requires the classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:00.223680Z",
     "iopub.status.busy": "2021-07-26T20:19:00.223135Z",
     "iopub.status.idle": "2021-07-26T20:19:00.229684Z",
     "shell.execute_reply": "2021-07-26T20:19:00.229307Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BlockwiseVotingClassifier(classes=[0, 1],\n",
       "                          estimator=RidgeClassifier(random_state=0))"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sklearn.linear_model\n",
    "\n",
    "subestimator = sklearn.linear_model.RidgeClassifier(random_state=0)\n",
    "clf = dask_ml.ensemble.BlockwiseVotingClassifier(\n",
    "    subestimator,\n",
    "    classes=[0, 1]\n",
    ")\n",
    "clf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can train normally. This will *independently* fit a clone of `subestimator` on each partition of `X` and `y`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:00.254152Z",
     "iopub.status.busy": "2021-07-26T20:19:00.249130Z",
     "iopub.status.idle": "2021-07-26T20:19:03.015236Z",
     "shell.execute_reply": "2021-07-26T20:19:03.016163Z"
    }
   },
   "outputs": [],
   "source": [
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All of the fitted estimators are available at `.estimators_`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:03.022409Z",
     "iopub.status.busy": "2021-07-26T20:19:03.021946Z",
     "iopub.status.idle": "2021-07-26T20:19:03.027084Z",
     "shell.execute_reply": "2021-07-26T20:19:03.027750Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0)]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.estimators_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are different estimators! They've been trained on separate batches of data and have learned different parameters. We can plot the difference in the learned `coef_` of the first two models to visualize this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:03.031591Z",
     "iopub.status.busy": "2021-07-26T20:19:03.030681Z",
     "iopub.status.idle": "2021-07-26T20:19:03.284329Z",
     "shell.execute_reply": "2021-07-26T20:19:03.285020Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:03.292970Z",
     "iopub.status.busy": "2021-07-26T20:19:03.292490Z",
     "iopub.status.idle": "2021-07-26T20:19:03.409871Z",
     "shell.execute_reply": "2021-07-26T20:19:03.410521Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = clf.estimators_[0].coef_\n",
    "b = clf.estimators_[1].coef_\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.bar(np.arange(a.shape[1]), (a - b).ravel())\n",
    "ax.set(xticks=[], xlabel=\"Feature\", title=\"Difference in Learned Coefficients\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That said, the assumption backing this entire process is that the distribution of the data is relatively uniform across partitions. The parameters learned by the each member of the ensemble should be relatively similar, and so will give relatively similar predictions when applied to the same data.\n",
    "\n",
    "When you `predict`, the result will have the same chunking pattern as the input array you're predicting for (which need not match the partitioning of the training data)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:03.417979Z",
     "iopub.status.busy": "2021-07-26T20:19:03.417537Z",
     "iopub.status.idle": "2021-07-26T20:19:03.425853Z",
     "shell.execute_reply": "2021-07-26T20:19:03.425431Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 8.00 MB </td> <td> 800.00 kB </td></tr>\n",
       "    <tr><th> Shape </th><td> (1000000,) </td> <td> (100000,) </td></tr>\n",
       "    <tr><th> Count </th><td> 31 Tasks </td><td> 10 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> int64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"170\" height=\"75\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"12\" y1=\"0\" x2=\"12\" y2=\"25\" />\n",
       "  <line x1=\"24\" y1=\"0\" x2=\"24\" y2=\"25\" />\n",
       "  <line x1=\"36\" y1=\"0\" x2=\"36\" y2=\"25\" />\n",
       "  <line x1=\"48\" y1=\"0\" x2=\"48\" y2=\"25\" />\n",
       "  <line x1=\"60\" y1=\"0\" x2=\"60\" y2=\"25\" />\n",
       "  <line x1=\"72\" y1=\"0\" x2=\"72\" y2=\"25\" />\n",
       "  <line x1=\"84\" y1=\"0\" x2=\"84\" y2=\"25\" />\n",
       "  <line x1=\"96\" y1=\"0\" x2=\"96\" y2=\"25\" />\n",
       "  <line x1=\"108\" y1=\"0\" x2=\"108\" y2=\"25\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 120.000000,0.000000 120.000000,25.412617 0.000000,25.412617\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"45.412617\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >1000000</text>\n",
       "  <text x=\"140.000000\" y=\"12.706308\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(0,140.000000,12.706308)\">1</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<_vote_block, shape=(1000000,), dtype=int64, chunksize=(100000,), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds = clf.predict(X)\n",
    "preds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This generates a set of tasks that\n",
    "\n",
    "1. Calls `subestimator.predict(chunk)` for each subestimator (10 in our case)\n",
    "2. Concatenates those predictions together\n",
    "3. Somehow averages the predictions to a single overall prediction\n",
    "\n",
    "We used the default `voting=\"hard\"` strategy, which means we just choose the class that had the higest number of votes. If the first two sub-estimators picked class `0` and the other eight picked class `1` for the first row, the final prediction for that row will be class `1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:03.429224Z",
     "iopub.status.busy": "2021-07-26T20:19:03.428760Z",
     "iopub.status.idle": "2021-07-26T20:19:04.311265Z",
     "shell.execute_reply": "2021-07-26T20:19:04.310859Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 1, 1, 0, 1, 1, 1, 0])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:10].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With `voting=\"soft\"` we have access to `predict_proba`, as long as the subestimator has a `predict_proba` method. These subestimators should be well-calibrated for the predictions to be meaningful. See [probability calibration](https://scikit-learn.org/stable/modules/calibration.html#calibration) for more."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:04.329537Z",
     "iopub.status.busy": "2021-07-26T20:19:04.317513Z",
     "iopub.status.idle": "2021-07-26T20:19:06.746270Z",
     "shell.execute_reply": "2021-07-26T20:19:06.745507Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LogisticRegression(random_state=0)\n",
    "clf = dask_ml.ensemble.BlockwiseVotingClassifier(\n",
    "    subestimator,\n",
    "    classes=[0, 1],\n",
    "    voting=\"soft\"\n",
    ")\n",
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:06.761425Z",
     "iopub.status.busy": "2021-07-26T20:19:06.759937Z",
     "iopub.status.idle": "2021-07-26T20:19:06.909086Z",
     "shell.execute_reply": "2021-07-26T20:19:06.908493Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.86911216, 0.13088784],\n",
       "       [0.97486301, 0.02513699],\n",
       "       [0.99875526, 0.00124474],\n",
       "       [0.03272671, 0.96727329],\n",
       "       [0.00562858, 0.99437142]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "proba = clf.predict_proba(X)\n",
    "proba[:5].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The stages here are similar to the `voting=\"hard\"` case. Only now instead of taking the majority vote we average the probabilities predicted by each sub-estimator."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression\n",
    "\n",
    "Regression is quite similar. The primary difference is that there's no voting; predictions from estimators are always reduced by averaging."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:06.911644Z",
     "iopub.status.busy": "2021-07-26T20:19:06.910785Z",
     "iopub.status.idle": "2021-07-26T20:19:07.031109Z",
     "shell.execute_reply": "2021-07-26T20:19:07.031478Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 160.00 MB </td> <td> 16.00 MB </td></tr>\n",
       "    <tr><th> Shape </th><td> (1000000, 20) </td> <td> (100000, 20) </td></tr>\n",
       "    <tr><th> Count </th><td> 10 Tasks </td><td> 10 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> float64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 25.412617,0.000000 25.412617,120.000000 0.000000,120.000000\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">1000000</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(1000000, 20), dtype=float64, chunksize=(100000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y = dask_ml.datasets.make_regression(n_samples=1_000_000,\n",
    "                                        chunks=100_000,\n",
    "                                        n_features=20)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:07.034308Z",
     "iopub.status.busy": "2021-07-26T20:19:07.033258Z",
     "iopub.status.idle": "2021-07-26T20:19:08.721597Z",
     "shell.execute_reply": "2021-07-26T20:19:08.720190Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LinearRegression()\n",
    "clf = dask_ml.ensemble.BlockwiseVotingRegressor(\n",
    "    subestimator,\n",
    ")\n",
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:08.731742Z",
     "iopub.status.busy": "2021-07-26T20:19:08.731099Z",
     "iopub.status.idle": "2021-07-26T20:19:08.842969Z",
     "shell.execute_reply": "2021-07-26T20:19:08.843366Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-346.86885154, -267.79712528,  107.77341861,   -0.78668572,\n",
       "         33.07241925])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict(X)[:5].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As usual with Dask-ML, scoring is done in parallel (and distributed on a cluster if you're connected to one)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:08.859089Z",
     "iopub.status.busy": "2021-07-26T20:19:08.852602Z",
     "iopub.status.idle": "2021-07-26T20:19:10.750619Z",
     "shell.execute_reply": "2021-07-26T20:19:10.749902Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The dangers of non-uniformly distributed data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, it must be re-emphasized that your data should be uniformly distributed across partitoins prior to using these ensemble methods. If it's not, then you're better off just sampling rows from each partition and fitting a single classifer to it. By \"uniform\" we don't mean \"from a uniform probabillity distribution\". Just that there shouldn't be a clear per-partition pattern to how the data is distributed.\n",
    "\n",
    "Let's demonstrate that with an example. We'll generate a dataset with a clear trend across partitions. This might represent some non-stationary time-series, though it can occur in other contexts as well (e.g. on data partitioned by geography, age, etc.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:10.754123Z",
     "iopub.status.busy": "2021-07-26T20:19:10.753451Z",
     "iopub.status.idle": "2021-07-26T20:19:10.755973Z",
     "shell.execute_reply": "2021-07-26T20:19:10.755584Z"
    }
   },
   "outputs": [],
   "source": [
    "import dask.array as da\n",
    "import dask.delayed\n",
    "import sklearn.datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:10.760689Z",
     "iopub.status.busy": "2021-07-26T20:19:10.759432Z",
     "iopub.status.idle": "2021-07-26T20:19:10.761585Z",
     "shell.execute_reply": "2021-07-26T20:19:10.762052Z"
    }
   },
   "outputs": [],
   "source": [
    "def clone_and_shift(X, y, i):\n",
    "    X = X.copy()\n",
    "    X += i + np.random.random(X.shape)\n",
    "    y += 25 * (i + np.random.random(y.shape))\n",
    "    return X, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:10.771129Z",
     "iopub.status.busy": "2021-07-26T20:19:10.767125Z",
     "iopub.status.idle": "2021-07-26T20:19:10.774034Z",
     "shell.execute_reply": "2021-07-26T20:19:10.773636Z"
    }
   },
   "outputs": [],
   "source": [
    "# Make a base dataset that we'll clone and shift\n",
    "X, y = sklearn.datasets.make_regression(n_features=4, bias=2, random_state=0)\n",
    "\n",
    "# Clone and shift 10 times, gradually increasing X and y for each partition\n",
    "Xs, ys = zip(*[dask.delayed(clone_and_shift, nout=2)(X, y, i) for i in range(10)])\n",
    "Xs = [da.from_delayed(x, shape=X.shape, dtype=X.dtype) for x in Xs]\n",
    "ys = [da.from_delayed(y_, shape=y.shape, dtype=y.dtype) for y_ in ys]\n",
    "X2 = da.concatenate(Xs)\n",
    "y2 = da.concatenate(ys)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot a sample of points, coloring by which partition the data came from."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:10.782894Z",
     "iopub.status.busy": "2021-07-26T20:19:10.778084Z",
     "iopub.status.idle": "2021-07-26T20:19:10.982815Z",
     "shell.execute_reply": "2021-07-26T20:19:10.983144Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(X2[::5, 0], y2[::5], c=np.arange(0, len(X2), 5) // 100, cmap=\"Set1\",\n",
    "           label=\"Partition\")\n",
    "ax.set(xlabel=\"Feature 0\", ylabel=\"target\", title=\"Non-stationary data (by partition)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's fit two estimators:\n",
    "\n",
    "1. One `BlockwiseVotingRegressor` on the entire dataset (which fits a `LinearRegression` on each partition)\n",
    "2. One `LinearRegression` on a sample from the entire dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:10.988822Z",
     "iopub.status.busy": "2021-07-26T20:19:10.988143Z",
     "iopub.status.idle": "2021-07-26T20:19:11.087075Z",
     "shell.execute_reply": "2021-07-26T20:19:11.086600Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LinearRegression()\n",
    "clf = dask_ml.ensemble.BlockwiseVotingRegressor(\n",
    "    subestimator,\n",
    ")\n",
    "clf.fit(X2, y2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:11.095118Z",
     "iopub.status.busy": "2021-07-26T20:19:11.090747Z",
     "iopub.status.idle": "2021-07-26T20:19:11.151839Z",
     "shell.execute_reply": "2021-07-26T20:19:11.152220Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_sampled, y_sampled = dask.compute(X2[::10], y2[::10])\n",
    "\n",
    "subestimator.fit(X_sampled, y_sampled)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comparing the scores, we find that the sampled dataset performs much better, despite training on less data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:11.183493Z",
     "iopub.status.busy": "2021-07-26T20:19:11.159756Z",
     "iopub.status.idle": "2021-07-26T20:19:11.366938Z",
     "shell.execute_reply": "2021-07-26T20:19:11.366071Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-11.154062558523927"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X2, y2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-26T20:19:11.371864Z",
     "iopub.status.busy": "2021-07-26T20:19:11.371417Z",
     "iopub.status.idle": "2021-07-26T20:19:11.453736Z",
     "shell.execute_reply": "2021-07-26T20:19:11.454129Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.03517659566372422"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subestimator.score(X2, y2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This shows that ensuring your needs to be relatively uniform across partitions. Even including the standard controls to normalize whatever underlying force is generating the non-stationary data (e.g. a time trend compontent or differencing timeseries data, dummy variables for geographic regions, etc) is not sufficient when your dataset is partioned by the non-uniform variable. You would still need to either shuffle your data prior to fitting, or just sample and fit the sub-estimator on the sub-sample that fits in memory."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
