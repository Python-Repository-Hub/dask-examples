{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Scale XGBoost\n",
    "=============\n",
    "\n",
    "Dask and XGBoost can work together to train gradient boosted trees in parallel. This notebook shows how to use Dask and XGBoost together.\n",
    "\n",
    "XGBoost provides a powerful prediction framework, and it works well in practice. It wins Kaggle contests and is popular in industry because it has good performance and can be easily interpreted (i.e., it's easy to find the important features from a XGBoost model).\n",
    "\n",
    "<img src=\"http://dask.readthedocs.io/en/latest/_images/dask_horizontal.svg\" width=\"30%\" alt=\"Dask logo\"> <img src=\"https://raw.githubusercontent.com/dmlc/dmlc.github.io/master/img/logo-m/xgboost.png\" width=\"25%\" alt=\"Dask logo\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup Dask\n",
    "We setup a Dask client, which provides performance and progress metrics via the dashboard.\n",
    "\n",
    "You can view the dashboard by clicking the link after running the cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-05T21:43:12.011415Z",
     "iopub.status.busy": "2022-05-05T21:43:12.011092Z",
     "iopub.status.idle": "2022-05-05T21:43:15.808442Z",
     "shell.execute_reply": "2022-05-05T21:43:15.807334Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "    <div style=\"width: 24px; height: 24px; background-color: #e1e1e1; border: 3px solid #9D9D9D; border-radius: 5px; position: absolute;\"> </div>\n",
       "    <div style=\"margin-left: 48px;\">\n",
       "        <h3 style=\"margin-bottom: 0px;\">Client</h3>\n",
       "        <p style=\"color: #9D9D9D; margin-bottom: 0px;\">Client-5cd2c8a6-ccbc-11ec-a77a-00224852fbbc</p>\n",
       "        <table style=\"width: 100%; text-align: left;\">\n",
       "\n",
       "        <tr>\n",
       "        \n",
       "            <td style=\"text-align: left;\"><strong>Connection method:</strong> Cluster object</td>\n",
       "            <td style=\"text-align: left;\"><strong>Cluster type:</strong> distributed.LocalCluster</td>\n",
       "        \n",
       "        </tr>\n",
       "\n",
       "        \n",
       "            <tr>\n",
       "                <td style=\"text-align: left;\">\n",
       "                    <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:8787/status\" target=\"_blank\">http://127.0.0.1:8787/status</a>\n",
       "                </td>\n",
       "                <td style=\"text-align: left;\"></td>\n",
       "            </tr>\n",
       "        \n",
       "\n",
       "        </table>\n",
       "\n",
       "        \n",
       "            <details>\n",
       "            <summary style=\"margin-bottom: 20px;\"><h3 style=\"display: inline;\">Cluster Info</h3></summary>\n",
       "            <div class=\"jp-RenderedHTMLCommon jp-RenderedHTML jp-mod-trusted jp-OutputArea-output\">\n",
       "    <div style=\"width: 24px; height: 24px; background-color: #e1e1e1; border: 3px solid #9D9D9D; border-radius: 5px; position: absolute;\">\n",
       "    </div>\n",
       "    <div style=\"margin-left: 48px;\">\n",
       "        <h3 style=\"margin-bottom: 0px; margin-top: 0px;\">LocalCluster</h3>\n",
       "        <p style=\"color: #9D9D9D; margin-bottom: 0px;\">ff0ba384</p>\n",
       "        <table style=\"width: 100%; text-align: left;\">\n",
       "            <tr>\n",
       "                <td style=\"text-align: left;\">\n",
       "                    <strong>Dashboard:</strong> <a href=\"http://127.0.0.1:8787/status\" target=\"_blank\">http://127.0.0.1:8787/status</a>\n",
       "                </td>\n",
       "                <td style=\"text-align: left;\">\n",
       "                    <strong>Workers:</strong> 4\n",
       "                </td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td style=\"text-align: left;\">\n",
       "                    <strong>Total threads:</strong> 4\n",
       "                </td>\n",
       "                <td style=\"text-align: left;\">\n",
       "                    <strong>Total memory:</strong> 6.78 GiB\n",
       "                </td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "    <td style=\"text-align: left;\"><strong>Status:</strong> running</td>\n",
       "    <td style=\"text-align: left;\"><strong>Using processes:</strong> True</td>\n",
       "</tr>\n",
       "\n",
       "            \n",
       "        </table>\n",
       "\n",
       "        <details>\n",
       "            <summary style=\"margin-bottom: 20px;\">\n",
       "                <h3 style=\"display: inline;\">Scheduler Info</h3>\n",
       "            </summary>\n",
       "\n",
       "            <div style=\"\">\n",
       "    <div>\n",
       "        <div style=\"width: 24px; height: 24px; background-color: #FFF7E5; border: 3px solid #FF6132; border-radius: 5px; position: absolute;\"> </div>\n",
       "        <div style=\"margin-left: 48px;\">\n",
       "            <h3 style=\"margin-bottom: 0px;\">Scheduler</h3>\n",
       "            <p style=\"color: #9D9D9D; margin-bottom: 0px;\">Scheduler-cceaf03a-336c-4553-b17f-692d53ad04e4</p>\n",
       "            <table style=\"width: 100%; text-align: left;\">\n",
       "                <tr>\n",
       "                    <td style=\"text-align: left;\">\n",
       "                        <strong>Comm:</strong> tcp://127.0.0.1:40149\n",
       "                    </td>\n",
       "                    <td style=\"text-align: left;\">\n",
       "                        <strong>Workers:</strong> 4\n",
       "                    </td>\n",
       "                </tr>\n",
       "                <tr>\n",
       "                    <td style=\"text-align: left;\">\n",
       "                        <strong>Dashboard:</strong> <a href=\"http://127.0.0.1:8787/status\" target=\"_blank\">http://127.0.0.1:8787/status</a>\n",
       "                    </td>\n",
       "                    <td style=\"text-align: left;\">\n",
       "                        <strong>Total threads:</strong> 4\n",
       "                    </td>\n",
       "                </tr>\n",
       "                <tr>\n",
       "                    <td style=\"text-align: left;\">\n",
       "                        <strong>Started:</strong> Just now\n",
       "                    </td>\n",
       "                    <td style=\"text-align: left;\">\n",
       "                        <strong>Total memory:</strong> 6.78 GiB\n",
       "                    </td>\n",
       "                </tr>\n",
       "            </table>\n",
       "        </div>\n",
       "    </div>\n",
       "\n",
       "    <details style=\"margin-left: 48px;\">\n",
       "        <summary style=\"margin-bottom: 20px;\">\n",
       "            <h3 style=\"display: inline;\">Workers</h3>\n",
       "        </summary>\n",
       "\n",
       "        \n",
       "        <div style=\"margin-bottom: 20px;\">\n",
       "            <div style=\"width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;\"> </div>\n",
       "            <div style=\"margin-left: 48px;\">\n",
       "            <details>\n",
       "                <summary>\n",
       "                    <h4 style=\"margin-bottom: 0px; display: inline;\">Worker: 0</h4>\n",
       "                </summary>\n",
       "                <table style=\"width: 100%; text-align: left;\">\n",
       "                    <tr>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Comm: </strong> tcp://127.0.0.1:33405\n",
       "                        </td>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Total threads: </strong> 1\n",
       "                        </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:33373/status\" target=\"_blank\">http://127.0.0.1:33373/status</a>\n",
       "                        </td>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Memory: </strong> 1.70 GiB\n",
       "                        </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Nanny: </strong> tcp://127.0.0.1:44877\n",
       "                        </td>\n",
       "                        <td style=\"text-align: left;\"></td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <td colspan=\"2\" style=\"text-align: left;\">\n",
       "                            <strong>Local directory: </strong> /home/runner/work/dask-examples/dask-examples/machine-learning/dask-worker-space/worker-8s_91mh7\n",
       "                        </td>\n",
       "                    </tr>\n",
       "\n",
       "                    \n",
       "\n",
       "                    \n",
       "\n",
       "                </table>\n",
       "            </details>\n",
       "            </div>\n",
       "        </div>\n",
       "        \n",
       "        <div style=\"margin-bottom: 20px;\">\n",
       "            <div style=\"width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;\"> </div>\n",
       "            <div style=\"margin-left: 48px;\">\n",
       "            <details>\n",
       "                <summary>\n",
       "                    <h4 style=\"margin-bottom: 0px; display: inline;\">Worker: 1</h4>\n",
       "                </summary>\n",
       "                <table style=\"width: 100%; text-align: left;\">\n",
       "                    <tr>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Comm: </strong> tcp://127.0.0.1:39485\n",
       "                        </td>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Total threads: </strong> 1\n",
       "                        </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:44727/status\" target=\"_blank\">http://127.0.0.1:44727/status</a>\n",
       "                        </td>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Memory: </strong> 1.70 GiB\n",
       "                        </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Nanny: </strong> tcp://127.0.0.1:39559\n",
       "                        </td>\n",
       "                        <td style=\"text-align: left;\"></td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <td colspan=\"2\" style=\"text-align: left;\">\n",
       "                            <strong>Local directory: </strong> /home/runner/work/dask-examples/dask-examples/machine-learning/dask-worker-space/worker-llpv0kd0\n",
       "                        </td>\n",
       "                    </tr>\n",
       "\n",
       "                    \n",
       "\n",
       "                    \n",
       "\n",
       "                </table>\n",
       "            </details>\n",
       "            </div>\n",
       "        </div>\n",
       "        \n",
       "        <div style=\"margin-bottom: 20px;\">\n",
       "            <div style=\"width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;\"> </div>\n",
       "            <div style=\"margin-left: 48px;\">\n",
       "            <details>\n",
       "                <summary>\n",
       "                    <h4 style=\"margin-bottom: 0px; display: inline;\">Worker: 2</h4>\n",
       "                </summary>\n",
       "                <table style=\"width: 100%; text-align: left;\">\n",
       "                    <tr>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Comm: </strong> tcp://127.0.0.1:43197\n",
       "                        </td>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Total threads: </strong> 1\n",
       "                        </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:43755/status\" target=\"_blank\">http://127.0.0.1:43755/status</a>\n",
       "                        </td>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Memory: </strong> 1.70 GiB\n",
       "                        </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Nanny: </strong> tcp://127.0.0.1:36719\n",
       "                        </td>\n",
       "                        <td style=\"text-align: left;\"></td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <td colspan=\"2\" style=\"text-align: left;\">\n",
       "                            <strong>Local directory: </strong> /home/runner/work/dask-examples/dask-examples/machine-learning/dask-worker-space/worker-7wzij2rr\n",
       "                        </td>\n",
       "                    </tr>\n",
       "\n",
       "                    \n",
       "\n",
       "                    \n",
       "\n",
       "                </table>\n",
       "            </details>\n",
       "            </div>\n",
       "        </div>\n",
       "        \n",
       "        <div style=\"margin-bottom: 20px;\">\n",
       "            <div style=\"width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;\"> </div>\n",
       "            <div style=\"margin-left: 48px;\">\n",
       "            <details>\n",
       "                <summary>\n",
       "                    <h4 style=\"margin-bottom: 0px; display: inline;\">Worker: 3</h4>\n",
       "                </summary>\n",
       "                <table style=\"width: 100%; text-align: left;\">\n",
       "                    <tr>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Comm: </strong> tcp://127.0.0.1:36725\n",
       "                        </td>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Total threads: </strong> 1\n",
       "                        </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Dashboard: </strong> <a href=\"http://127.0.0.1:34311/status\" target=\"_blank\">http://127.0.0.1:34311/status</a>\n",
       "                        </td>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Memory: </strong> 1.70 GiB\n",
       "                        </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <td style=\"text-align: left;\">\n",
       "                            <strong>Nanny: </strong> tcp://127.0.0.1:39477\n",
       "                        </td>\n",
       "                        <td style=\"text-align: left;\"></td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <td colspan=\"2\" style=\"text-align: left;\">\n",
       "                            <strong>Local directory: </strong> /home/runner/work/dask-examples/dask-examples/machine-learning/dask-worker-space/worker-8rarpzz8\n",
       "                        </td>\n",
       "                    </tr>\n",
       "\n",
       "                    \n",
       "\n",
       "                    \n",
       "\n",
       "                </table>\n",
       "            </details>\n",
       "            </div>\n",
       "        </div>\n",
       "        \n",
       "\n",
       "    </details>\n",
       "</div>\n",
       "\n",
       "        </details>\n",
       "    </div>\n",
       "</div>\n",
       "            </details>\n",
       "        \n",
       "\n",
       "    </div>\n",
       "</div>"
      ],
      "text/plain": [
       "<Client: 'tcp://127.0.0.1:40149' processes=4 threads=4, memory=6.78 GiB>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from dask.distributed import Client\n",
    "\n",
    "client = Client(n_workers=4, threads_per_worker=1)\n",
    "client"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we create a bunch of synthetic data, with 100,000 examples and 20 features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-05T21:43:15.812554Z",
     "iopub.status.busy": "2022-05-05T21:43:15.812167Z",
     "iopub.status.idle": "2022-05-05T21:43:16.740644Z",
     "shell.execute_reply": "2022-05-05T21:43:16.739987Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda3/envs/dask-examples/lib/python3.9/site-packages/dask/base.py:1283: UserWarning: Running on a single-machine scheduler when a distributed client is active might lead to unexpected results.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table>\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 15.26 MiB </td>\n",
       "                        <td> 156.25 kiB </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (100000, 20) </td>\n",
       "                        <td> (1000, 20) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Count </th>\n",
       "                        <td> 100 Tasks </td>\n",
       "                        <td> 100 Chunks </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                    <th> Type </th>\n",
       "                    <td> float64 </td>\n",
       "                    <td> numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"6\" x2=\"25\" y2=\"6\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"18\" x2=\"25\" y2=\"18\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"25\" y2=\"25\" />\n",
       "  <line x1=\"0\" y1=\"31\" x2=\"25\" y2=\"31\" />\n",
       "  <line x1=\"0\" y1=\"37\" x2=\"25\" y2=\"37\" />\n",
       "  <line x1=\"0\" y1=\"43\" x2=\"25\" y2=\"43\" />\n",
       "  <line x1=\"0\" y1=\"50\" x2=\"25\" y2=\"50\" />\n",
       "  <line x1=\"0\" y1=\"56\" x2=\"25\" y2=\"56\" />\n",
       "  <line x1=\"0\" y1=\"62\" x2=\"25\" y2=\"62\" />\n",
       "  <line x1=\"0\" y1=\"68\" x2=\"25\" y2=\"68\" />\n",
       "  <line x1=\"0\" y1=\"75\" x2=\"25\" y2=\"75\" />\n",
       "  <line x1=\"0\" y1=\"81\" x2=\"25\" y2=\"81\" />\n",
       "  <line x1=\"0\" y1=\"87\" x2=\"25\" y2=\"87\" />\n",
       "  <line x1=\"0\" y1=\"93\" x2=\"25\" y2=\"93\" />\n",
       "  <line x1=\"0\" y1=\"100\" x2=\"25\" y2=\"100\" />\n",
       "  <line x1=\"0\" y1=\"106\" x2=\"25\" y2=\"106\" />\n",
       "  <line x1=\"0\" y1=\"112\" x2=\"25\" y2=\"112\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 25.412616514582485,0.0 25.412616514582485,120.0 0.0,120.0\" style=\"fill:#8B4903A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">100000</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(100000, 20), dtype=float64, chunksize=(1000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from dask_ml.datasets import make_classification\n",
    "\n",
    "X, y = make_classification(n_samples=100000, n_features=20,\n",
    "                           chunks=1000, n_informative=4,\n",
    "                           random_state=0)\n",
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dask-XGBoost works with both arrays and dataframes. For more information on creating dask arrays and dataframes from real data, see documentation on [Dask arrays](https://dask.pydata.org/en/latest/array-creation.html) or [Dask dataframes](https://dask.pydata.org/en/latest/dataframe-create.html)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split data for training and testing\n",
    "We split our dataset into training and testing data to aid evaluation by making sure we have a fair test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-05T21:43:16.743510Z",
     "iopub.status.busy": "2022-05-05T21:43:16.743329Z",
     "iopub.status.idle": "2022-05-05T21:43:17.016463Z",
     "shell.execute_reply": "2022-05-05T21:43:17.015198Z"
    }
   },
   "outputs": [],
   "source": [
    "from dask_ml.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's try to do something with this data using [dask-xgboost][dxgb].\n",
    "\n",
    "[dxgb]:https://github.com/dask/dask-xgboost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train Dask-XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-05T21:43:17.021239Z",
     "iopub.status.busy": "2022-05-05T21:43:17.020869Z",
     "iopub.status.idle": "2022-05-05T21:43:17.082394Z",
     "shell.execute_reply": "2022-05-05T21:43:17.081502Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda3/envs/dask-examples/lib/python3.9/site-packages/xgboost/compat.py:36: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n",
      "  from pandas import MultiIndex, Int64Index\n"
     ]
    }
   ],
   "source": [
    "import dask\n",
    "import xgboost\n",
    "import dask_xgboost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "dask-xgboost is a small wrapper around xgboost. Dask sets XGBoost up, gives XGBoost data and lets XGBoost do it's training in the background using all the workers Dask has available."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's do some training:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-05T21:43:17.086110Z",
     "iopub.status.busy": "2022-05-05T21:43:17.085346Z",
     "iopub.status.idle": "2022-05-05T21:43:23.918029Z",
     "shell.execute_reply": "2022-05-05T21:43:23.910908Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception in thread Thread-4:\n",
      "Traceback (most recent call last):\n",
      "  File \"/usr/share/miniconda3/envs/dask-examples/lib/python3.9/threading.py\", line 973, in _bootstrap_inner\n",
      "    self.run()\n",
      "  File \"/usr/share/miniconda3/envs/dask-examples/lib/python3.9/threading.py\", line 910, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/usr/share/miniconda3/envs/dask-examples/lib/python3.9/site-packages/dask_xgboost/tracker.py\", line 365, in join\n",
      "    while self.thread.isAlive():\n",
      "AttributeError: 'Thread' object has no attribute 'isAlive'\n"
     ]
    }
   ],
   "source": [
    "params = {'objective': 'binary:logistic',\n",
    "          'max_depth': 4, 'eta': 0.01, 'subsample': 0.5, \n",
    "          'min_child_weight': 0.5}\n",
    "\n",
    "bst = dask_xgboost.train(client, params, X_train, y_train, num_boost_round=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualize results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `bst` object is a regular `xgboost.Booster` object. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-05T21:43:23.922202Z",
     "iopub.status.busy": "2022-05-05T21:43:23.921854Z",
     "iopub.status.idle": "2022-05-05T21:43:23.933514Z",
     "shell.execute_reply": "2022-05-05T21:43:23.932792Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xgboost.core.Booster at 0x7f89aec42520>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bst"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This means all the methods mentioned in the [XGBoost documentation][2] are available. We show two examples to expand on this, but these examples are of XGBoost instead of Dask.\n",
    "\n",
    "[2]:https://xgboost.readthedocs.io/en/latest/python/python_intro.html#"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot feature importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-05T21:43:23.936873Z",
     "iopub.status.busy": "2022-05-05T21:43:23.936497Z",
     "iopub.status.idle": "2022-05-05T21:43:24.834561Z",
     "shell.execute_reply": "2022-05-05T21:43:24.833880Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "ax = xgboost.plot_importance(bst, height=0.8, max_num_features=9)\n",
    "ax.grid(False, axis=\"y\")\n",
    "ax.set_title('Estimated feature importance')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We specified that only 4 features were informative while creating our data, and only 3 features show up as important."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the Receiver Operating Characteristic curve\n",
    "We can use a fancier metric to determine how well our classifier is doing by plotting the [Receiver Operating Characteristic (ROC) curve](https://en.wikipedia.org/wiki/Receiver_operating_characteristic):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-05T21:43:24.837903Z",
     "iopub.status.busy": "2022-05-05T21:43:24.837567Z",
     "iopub.status.idle": "2022-05-05T21:43:24.911283Z",
     "shell.execute_reply": "2022-05-05T21:43:24.910686Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[21:43:24] WARNING: /home/conda/feedstock_root/build_artifacts/xgboost-split_1645117766796/work/src/learner.cc:1264: Empty dataset at worker: 0\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table>\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 58.59 kiB </td>\n",
       "                        <td> 600 B </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (15000,) </td>\n",
       "                        <td> (150,) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Count </th>\n",
       "                        <td> 100 Tasks </td>\n",
       "                        <td> 100 Chunks </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                    <th> Type </th>\n",
       "                    <td> float32 </td>\n",
       "                    <td> numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"170\" height=\"75\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"6\" y1=\"0\" x2=\"6\" y2=\"25\" />\n",
       "  <line x1=\"12\" y1=\"0\" x2=\"12\" y2=\"25\" />\n",
       "  <line x1=\"18\" y1=\"0\" x2=\"18\" y2=\"25\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"25\" />\n",
       "  <line x1=\"31\" y1=\"0\" x2=\"31\" y2=\"25\" />\n",
       "  <line x1=\"37\" y1=\"0\" x2=\"37\" y2=\"25\" />\n",
       "  <line x1=\"43\" y1=\"0\" x2=\"43\" y2=\"25\" />\n",
       "  <line x1=\"50\" y1=\"0\" x2=\"50\" y2=\"25\" />\n",
       "  <line x1=\"56\" y1=\"0\" x2=\"56\" y2=\"25\" />\n",
       "  <line x1=\"62\" y1=\"0\" x2=\"62\" y2=\"25\" />\n",
       "  <line x1=\"68\" y1=\"0\" x2=\"68\" y2=\"25\" />\n",
       "  <line x1=\"75\" y1=\"0\" x2=\"75\" y2=\"25\" />\n",
       "  <line x1=\"81\" y1=\"0\" x2=\"81\" y2=\"25\" />\n",
       "  <line x1=\"87\" y1=\"0\" x2=\"87\" y2=\"25\" />\n",
       "  <line x1=\"93\" y1=\"0\" x2=\"93\" y2=\"25\" />\n",
       "  <line x1=\"100\" y1=\"0\" x2=\"100\" y2=\"25\" />\n",
       "  <line x1=\"106\" y1=\"0\" x2=\"106\" y2=\"25\" />\n",
       "  <line x1=\"112\" y1=\"0\" x2=\"112\" y2=\"25\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 120.0,0.0 120.0,25.412616514582485 0.0,25.412616514582485\" style=\"fill:#8B4903A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"45.412617\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >15000</text>\n",
       "  <text x=\"140.000000\" y=\"12.706308\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(0,140.000000,12.706308)\">1</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<_predict_part, shape=(15000,), dtype=float32, chunksize=(150,), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_hat = dask_xgboost.predict(client, bst, X_test).persist()\n",
    "y_hat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-05T21:43:24.915928Z",
     "iopub.status.busy": "2022-05-05T21:43:24.915595Z",
     "iopub.status.idle": "2022-05-05T21:43:27.209777Z",
     "shell.execute_reply": "2022-05-05T21:43:27.208831Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_curve\n",
    "\n",
    "y_test, y_hat = dask.compute(y_test, y_hat)\n",
    "fpr, tpr, _ = roc_curve(y_test, y_hat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-05T21:43:27.218003Z",
     "iopub.status.busy": "2022-05-05T21:43:27.217771Z",
     "iopub.status.idle": "2022-05-05T21:43:27.411368Z",
     "shell.execute_reply": "2022-05-05T21:43:27.410540Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAVIAAAFNCAYAAABSVeehAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAABMv0lEQVR4nO3dd3gU5fbA8e9JSAglhN5baCK9SRGVXhQQEVDQK4i9YLtce7nXcvVexYbgDxtWyhUBQaQ3UQHpvSsthBpaKOnn98cuS4AQliSb2d2cz/Psk5nZ2ZkzKSfvzNtEVTHGGJN1IU4HYIwxgc4SqTHGZJMlUmOMySZLpMYYk02WSI0xJpsskRpjTDZZIjXGmGyyRGp8SkR2isgZETkpIvtF5CsRKXzBPteKyDwRiReR4yLyk4jUuWCfIiLygYjsdh9ru3u95CXOKyLyuIisF5FTIhIjIuNFpL4vr9fkTZZITW7ooaqFgUZAY+D5s2+ISCtgFjAZKA9EA2uA30WkmnufcGAuUBfoChQBrgXigOaXOOeHwBPA40BxoBbwI9DtSoMXkXxX+hmTx6iqvezlsxewE+iYbv1t4Od0678CH2fwuenAN+7l+4ADQGEvz1kTSAWaZ7LPAuC+dOt3A7+lW1fgUWAbsAMYCQy94BiTgb+7l8sDE4BD7v0fd/p7b6/ce1mJ1OQaEakI3Ahsd68XxFWyHJ/B7t8DndzLHYEZqnrSy1N1AGJUdWn2IuYWoAVQBxgD3C4iAiAixYDOwDgRCQF+wlWSruA+/5Mi0iWb5zcBwhKpyQ0/ikg8sAc4CPzTvb04rt/BfRl8Zh9w9vlniUvscylXuv+lvKWqR1T1DK6SswLXu9/rAyxW1VjgGqCUqr6mqkmq+hfwGdAvB2IwAcASqckNt6hqJNAWqM25BHkUSAPKZfCZcsBh93LcJfa5lCvd/1L2nF1QVQXGAf3dm+4ARruXqwDlReTY2RfwAlAmB2IwAcASqck1qvoL8BUw1L1+ClgM9M1g99twVTABzAG6iEghL081F6goIs0y2ecUUDDdetmMQr5gfSzQR0Sq4Lrln+DevgfYoapF070iVfUmL+M1Ac4SqcltHwCdRKSRe/05YKC7qVKkiBQTkTeAVsCr7n2+xZWsJohIbREJEZESIvKCiFyUrFR1G/AxMFZE2opIuIhEiEg/EXnOvdtq4FYRKSgiNYB7Lxe4qq7CVZn0OTBTVY+531oKnBCRZ0WkgIiEikg9EbnmSr85JjBZIjW5SlUPAd8AL7vXfwO6ALfieq65C1cTqevcCRFVTcRV4bQZmA2cwJW8SgJ/XOJUjwPDgRHAMeBPoBeuSiGA94EkXK0BvubcbfrljHXHMibdNaUCPXA179qB65HE50CUl8c0AU5cj36MMcZklZVIjTEmm3yWSEVklIgcFJH1l3hfRGSYu6vfWhFp4qtYjDHGl3xZIv0KV3e+S7kRVw+UmsADwP/5MBZjjPEZnyVSVV0IHMlkl564ugCqqi4BiopITrT9M8aYXOXkM9IKpGvwDMS4txljTEBxclQbyWBbhk0IROQBXLf/FCpUqGnt2rV9GZcxxg+kpikJyakkJKdyOjmV04mppKqSmpZzLY1UlZSj+9DUJEhNOayqpbJyHCcTaQxQKd16RSA2ox1V9VPgU4BmzZrp8uXLfR+dMSZXJCSnsv3gSTbvj2frgXjX1/3xHD6R4NmngPuVXRFhIRQtEE5UgTAKhabwxyfPEnvgTwpFFefU8SO7snpcJxPpFGCwiIzD1d3uuKrmxEATxhg/lJKaxs640+clyy0H4tkVd4orKWSGCBQt6EqGZ19FC4ZR9Oy6+72iBcKISre9SIEwIsJCAYiPj6dbt27EblxO2bJlmTt3LnXr1s3ytfkskYrIWFyDVJQUkRhcI/6EAajqSGAacBOuIdVOA4N8FYsxJvckJKey/3gCMUfPsD72OFv2x7NlfzzbD50kKSXN6+OEh4ZQo3RhriobSd3yRahVJpKryxWheKFwQkMyejLonePHj3PjjTeyePFiKlSowLx586hVq1aWjwc+TKSq2v8y758dONcYE6C2H4xnxa6jbD94ki0HTrLtQDz7jidc/oPpiEDVEoW4qkwktcpGclWZSK4qG0nVEgXJF5qz9eGJiYl06tSJZcuWUblyZebNm0f16tWzfdygmEIhOTmZmJgYEhKu7AdoTHZFRERQsWJFwsLCnA7F5w6eSGBD7Ak2xB5nQ+wJ1sYcZ++xM1d0jLJFItzJsjBXlS3CVWUiqVG6MAXCQ30U9fny58/PzTffzOHDh5k/fz5VqlTJkeMGXF/7jCqbduzYQWRkJCVKlMA9gLkxPqeqxMXFER8fT3R0tNPh5BhVZc+RM2yIPc56d9LcEHuCQ/GJXn0+X4hQpkgEZYrkp3LxgjSpUozaZYtQq0xhihYM93H03jl+/DhRUeePKSMiK1Q1s6EXLykoSqQJCQlUrVrVkqjJVSJCiRIlOHTokNOhZEtamrLlQDwrdx9l7Z7jzNy4n2Onk736bL4QoW6FKNrWKsVVZSOpVcY3t+TZsW/fPu655x5GjhzpKYFemESzKygSKWBJ1DgiEH/vzibOJX/FseSvOP7YccSrxFkgLJQ65YtQ1/OKomaZwuTPlzu35VkRExND+/bt2bZtG48//jiTJ0/2yXmCJpEaYzJ2KD6RtTHHWBtznHV7j7Ny99HLJs6iBcOoVz6KuuWLuJNnFNElC2Wrtjy37dy5k/bt27Njxw4aNWrEF1984bNzWSLNIaGhodSvX5+UlBSio6P59ttvKVq0KAAbNmzgscceIyYmBlVlwIABvPTSS57SzPTp03n55Zc5deoUqkr37t0ZOnToRefwdj9fUVU6dOjAjz/+SJEiRXLtvFfi66+/5o033gDgpZdeYuDAgRft89RTTzF//nwATp8+zcGDBzl27BgAzzzzDD///DNpaWl06tSJDz/8EBGhX79+vP7669SsWTPXriWrTielsGDLIWas38+ynUe8qkUvUSicFtWKc3XZIrSqXoKmVYoFZGn7rD///JP27duze/durrnmGmbOnEmxYsV8d0Kn54O+0lfTpk31Qhs3brxoW24rVKiQZ3nAgAH6xhtvqKrq6dOntVq1ajpz5kxVVT116pR27dpVhw8frqqq69at02rVqummTZtUVTU5OVlHjBhx0fG93e9SUlJSsnZh6UydOlWffPLJK/pMTpzXW3FxcRodHa1xcXF65MgRjY6O1iNHjmT6mWHDhumgQYNUVfX333/Xa6+9VlNSUjQlJUVbtmyp8+fPV1XVBQsW6H333ZfhMfzh9+/4mSSdtDJG7/96mdZ6cZpWeXZqpq8mr83SR75bod8s2qFb95/QtLQ0py8hx2zevFkrVKiggLZq1UqPHTvm1eeA5ZrFvGQlUh9o1aoVa9euBWDMmDG0bt2azp07A1CwYEGGDx9O27ZtefTRR3n77bd58cUXOTt+QL58+XjkkUcuOmZm+9199910796dPn36AFC4cGFOnjzJggULePXVVylXrhyrV6+mR48eVKlSxfO5f/3rX0RGRjJkyBDeeecdvv/+exITE+nVqxevvvrqRTGMHj2aBx54wLN+yy23sGfPHhISEnjiiSc87xUuXJi///3vzJw5k3fffZedO3cybNgwkpKSaNGiBR9//DGhoaE8/PDDLFu2jDNnztCnT58Mz3klZs6cSadOnShevDgAnTp1YsaMGfTvf+kmzWPHjvWcV0RISEggKSkJVSU5OZkyZVwTgV5//fXcfffdpKSkkC+ff/zZHDmVxOyN+5mxfj+/bT9McmrGLXAiwkKoWz6KBhXPvopSrWShgC5xZmb27Nns3buXG264galTpxIZGenzc/rHb0QOqvrczz479s7/dLvsPqmpqcydO5d773XNpbZhwwaaNm163j7Vq1fn5MmTnDhxgvXr1zNkyJDLHtfb/S60dOlS1q9fT3R0NKtWreLJJ5/0JNLvv/+eGTNmMGvWLLZt28bSpUtRVW6++WYWLlzIDTfccN6xfv/9dz755BPP+qhRoyhevDhnzpzhmmuuoXfv3pQoUYJTp05Rr149XnvtNTZt2sR///tffv/9d8LCwnjkkUcYPXo0AwYM4N///jfFixcnNTWVDh06sHbtWho0aHDeOd955x1Gj754OqUbbriBYcOGnbdt7969VKp0bviGihUrsnfv3kt+b3bt2sWOHTto37494PoH2K5dO8qVK4eqMnjwYK6++moAQkJCqFGjBmvWrLno55mb9hw5zfwtB5m5YT9L/jpyyQE8apUpTNd65ehcpwy1y0b6VS26rw0ePJioqChuvfVWChXyduLZ7Am6ROqUM2fO0KhRI3bu3EnTpk3p1KkT4Hp0cqn//LlRImjevLmnjWPjxo05ePAgsbGxHDp0iGLFilG5cmWGDRvGrFmzaNy4MQAnT55k27ZtFyXSI0eOnPfffdiwYUyaNAmAPXv2sG3bNkqUKEFoaCi9e/cGYO7cuaxYsYJrrnFNqHnmzBlKly4NuBL5p59+SkpKCvv27WPjxo0XJdKnn36ap59+2qtr1QzaRGf2PR43bhx9+vQhNNRV67x9+3Y2bdpETEwM4CrRpv+HUrp0aWJjY3M9kaoqfx46xYj525m06tL/GOpXiKJrvbJ0rVeW6qUK52KEzlu5ciVRUVGeXkp33XVXrp7fEmkOKVCgAKtXr+b48eN0796dESNG8Pjjj1O3bl0WLlx43r5//fUXhQsXJjIykrp167JixQoaNmyY6fEz2y9fvnykpbn6MKsqSUlJnvcu/I/cp08ffvjhB/bv30+/fv08n3n++ed58MEHM43h7HlCQkJYsGABc+bMYfHixRQsWJC2bdt6epZFRER4kpOqMnDgQN56663zjrVjxw6GDh3KsmXLKFasGHfffXeGPdOupERasWJFFixY4FmPiYmhbdu2l7yecePGMWLECM/6pEmTaNmyJYULu5LQjTfeyJIlSzyJNCEhgQIFcmIMoss7lZjCkr/iWLj1EHM2HbxkD6KmVYpxY72ydKlblkrFC+ZKbP7mjz/+oEuXLkRFRbF48WLKly+f+0Fk9eGqU69AqGxauXKlVqpUSZOSkvT06dMaHR2ts2fPVlVX5VO3bt102LBhqqq6Zs0arV69um7ZskVVVVNTU/Xdd9+96PiZ7ff666/rM888o6qqkyZNUtePVXX+/PnarVu3846zfv16bdWqldasWVNjY2NVVXXmzJnavHlzjY+PV1XVmJgYPXDgwEUxtGjRQrdt26aqqj/++KN2795dVVU3bdqk+fPn91TMpP9ebNiwQWvUqOE5XlxcnO7cuVNXr16tDRo00NTUVN2/f7+WLl1av/zyy8t/ozMRFxenVatW1SNHjuiRI0e0atWqGhcXl+G+mzdv1ipVqpxXyTJu3Djt0KGDJicna1JSkrZv316nTJnieb9evXqe71l6OfH7l5Kapqt3H9WP5m7V20Yu0hov/JxpZdHH87fr/uNnsn3eQPfrr79qZGSkAtq7d29NTEzM8rGwyib/0rhxYxo2bMi4ceO46667mDx5Mo899hiPPvooqamp3HXXXQwePBiABg0a8MEHH9C/f39Onz6NiNCt28XPYjPb7/7776dnz540b96cDh06ZPpcqG7dusTHx1OhQgXKlXPN7NK5c2c2bdpEq1atAFdl0Xfffee5BT+rW7duLFiwgBo1atC1a1dGjhxJgwYNuOqqq2jZsmWG56tTpw5vvPEGnTt3Ji0tjbCwMEaMGEHLli1p3LgxdevWpVq1arRu3frKv9EXKF68OC+//LLnMcIrr7ziqXh65ZVXaNasGTfffDPgqmTq16/febf+ffr0Yd68edSvXx8RoWvXrvTo0QOAAwcOUKBAAc/3LCekpSlLdsQxceVe5mw6kGnbzsL583Ft9RLcUKsUN9YrS4nC+XMsjkC1YMECunfvzqlTp+jXrx/ffvutYxWBQdHXftOmTZ5KAeM7+/btY8CAAcyePdvpUHLd+++/T5EiRTyViOld6e/fpn0neHfWFpbtPMrxM5dOnrXLRnJDrVJcX7MkLaJLEJ4v71QYXc7s2bPp2bMnZ86cYcCAAYwaNcrzOCmr8nxfe5M7ypUrx/3338+JEyf8tkG+rxQtWjTbFRi7407z3uwtTF4TS0bll5KF83NDzZJcX6skrWuUpHRkRLbOF6x27dpFjx49SExM5L777uOTTz4hJMTZfzKWSM0Vue2225wOwRGDBmV93PH9xxMYMX87Y5fuJuWC5kpFC4Zxc8Py3NqkIg0rRgVt286cVKVKFf71r3+xZ88ePvroI8eTKARRItVMmhkZ4yuZPRrbfvAkz09cy8bYE5xKSj3vvY5Xl+bhtjVoVKloQPVfd1JCQgIREa5S+nPPPedXf/NBkUgjIiKIi4uz8UhNrlJ1jUd69o8bXBVIE1bGMH55DMt2HbnoFr55dHGe7XoVTasUz+VoA9uYMWN48cUXmTdvnqddtD/9rQdFIq1YsSIxMTEBPy6kCTxnR8g/ciqJmRv2M27ZHtbsOZbhvl8Ouoa2tUr5VQIIBF9//TWDBg1CVZk0aRJ///vfnQ7pIkGRSMPCwoJqhHITGFSVKWtieX72cpbuOHLRTJghAm2vKs2j7apbCTSLPvvsMx588EFUlddee80vkygESSI1JjclpqTy05p9fPn7DjbEnrjo/XwhwoNtqnH3tdGUirT2nlk1YsQIT3vr//73vzzzzDMOR3RplkiN8dLB+AS+W7KbMX/s4vDJpIveb1SpKDc3LE+3BuUoU8SaLmXH+++/7yl9vv/++zz55JPOBnQZlkiNuYy1Mcf48vedTF0be9FQdfnzhdDh6tIMaFWVltVKOBRh8Dk7dsTHH3/Mww8/7HA0l2eJ1JgMpKSmMWPDfr78fScrdh296P1yURHc1aoK/a+pTLFC/jEzZjAZMmQIHTt2vOxgPv7CEqkx6Rw9lcTYZbv5dvGuDKfoaFqlGINaV6VL3bKE5aExPn1NVXnnnXfo1auXZzqXQEmiYInUGAC27I/nq0U7mLRqLwnJaee9FxYqdG9QnkGtq9KgYlFnAgxiqsozzzzD0KFDGTlyJJs2bSJ//sCqpLNEavKstDRl3uaDfLloB79vj7vo/ZKFw7mjRRX+1qIypa3yyCdUlSeffJJhw4YRFhbG0KFDAy6JgiVSkwfFJyQzfnkMXy/eya640xe9X7d8EQa1jqZ7g3JEhPnvnO2BLi0tjUceeYRPPvmE8PBwfvjhB8+whYHGEqnJMxKSU3l/zlZGL9nNycSU894LEehStyyDWkdzTdXAnoo4EKSmpnL//ffz5ZdfEhERwaRJk+jatavTYWWZJVIT9BJTUhk+bztjl+7h8MnE894rEpGP/s0rc1erKlQsljen6nDCnDlz+PLLLylQoAA//fQTHTp0cDqkbLFEaoKWqvLdkl28O3vrRaPPVytViEGto+ndpAIFw+3PILd16dKFDz74gMaNG180yWIgst8gE5SOnkriremb+H55zEXv3XddNC/cdDUhNnxdrkpKSiI2NpaqVasC8MQTTzgbUA6yRGqCyuGTiYxbupvPft1x3jQexQuFc+910dzcsHyenW3TSQkJCfTp04dVq1bxyy+/UKNGDadDylGWSE1QWPJXHOOW7mbauv0kpZ7fDrTj1aX5oF9jCue3X3cnnD59ml69ejFr1ixKlCjByZMnnQ4px9lvlglop5NS6DbsN3YcPnXRe5WLF+SlblfTqU4Zq4V3yKlTp+jRowfz58+ndOnSzJkzh/r16zsdVo6zRGoC1qrdR3l09EpiL+jK2bhyUQa0qsJN9cuRP5+1A3VKfHw83bp149dff6Vs2bLMmzcvaGf7tURqAo6q8t0fu/nXlA2kphtNuVrJQrzWsx7X1SzpYHQGIDk5mS5durB48WIqVKjAvHnzqFWrltNh+YwlUhNQYo+d4ZXJG5iz6YBnW6HwUF7odjX9r6lsNfF+IiwsjNtvv53Y2FjmzZtHtWrVnA7JpySzWRD9UbNmzXT58uVOh2Fy2dlS6H+mbTpvRs6KxQrw1aBrqFE60sHozKXEx8cTGRkYPxsRWaGqzbLyWRsHzPi9tDTl/m9W8PKP689Lone0qMzPj19vSdRPHDhwgE6dOrF161bPtkBJotllt/bGr62NOcYrkzewOt3MnFVLFOTtPg1pHm0TyvmL2NhYOnTowObNm3nssceYOXOm0yHlKkukxi+pKv+dsYVPFv553tzwtctG8v1DrSgSEeZccOY8e/bsoX379mzfvp0GDRrw3XffOR1SrrNEavyOqjLyl78Y+cufnm1hocI9raN5smMtCoRbkyZ/sXPnTtq1a8fOnTtp0qSJp9F9XmOJ1PgNVeW37Ye564ul521vEV2c//RuQHTJQg5FZjKyfft22rdvz549e2jRogUzZsygaNGiToflCEukxnFJKWn8tCaWL37bwcZ9588TX6VEQb4a1NxKoX5o4cKF7Nmzh9atWzNt2jSKFCnidEiOsURqHJOSmsbYZXsYMW87+0+c3zspPDSEG+uX5bWe9SyJ+ql77rmHyMhIbrzxRgoXLux0OI7yaSIVka7Ah0Ao8Lmq/ueC96OA74DK7liGquqXvozJ+IcVu47yxLhVxBw9c972sFDhtmaVGNy+BuWiCjgUnbmUNWvWEBYWRp06dQDo27evwxH5B58lUhEJBUYAnYAYYJmITFHVjel2exTYqKo9RKQUsEVERqtqkq/iMs5SVcYsdXXvTE49Vx1ftGAY97aOpl/zypSKDLzJz/KC5cuX07lzZ/Lnz8/ixYs944oa35ZImwPbVfUvABEZB/QE0idSBSLFNTRPYeAIkHLhgUxwSEhO5Z+TN/C/5Xs82yLz5+POllUY3L6GDXPnx5YsWUKXLl04ceIEN998M+XKlXM6JL/iy9/cCsCedOsxQIsL9hkOTAFigUjgdlVNu2AfROQB4AGAypUr+yRY41uxx87w8HcrWBNz3LOtTrkifHJXUxto2c/9+uuv3HTTTZw8eZLevXszZswYwsPDnQ7Lr/iyi2hGo0dc2LG/C7AaKA80AoaLyEVVf6r6qao2U9VmpUqVyuk4jQ+pKt8v30OPj347L4n2alyBCQ9fa0nUz82bN4+uXbty8uRJ+vfvz7hx4yyJZsCXJdIYoFK69Yq4Sp7pDQL+o66RU7aLyA6gNrAUE/DS0pRnJqzlhxXn5k0KDRFe7nY1A6+taoMt+7nY2Fi6d+/OmTNnGDhwIF988QWhodaCIiO+TKTLgJoiEg3sBfoBd1ywz26gA/CriJQBrgL+8mFMJpdMWhXDG1M3EXfqXL1hycLhDL+jCS2r5b2eL4GofPnyvPPOO6xZs4aRI0cSEmJjHF2KzxKpqqaIyGBgJq7mT6NUdYOIPOR+fyTwOvCViKzD9SjgWVU97KuYTO74etFO/jllw3nbrqtRkhF3NCGqoPWR93dnzpyhQAFX07NHH30UVbW7h8vwaTWpqk4Dpl2wbWS65Vigsy9jMLlHVRkxfztDZ50bRk0EHmlbncHtalrD+gAwfvx4nnrqKebMmUPt2rUBLIl6wcrqJkccPZXE4DGrzkui+UKE355tz9NdalsSDQCjR4+mX79+7N27l0mTJjkdTkCxhnsm237Zeoinx6/hYHyiZ1vRgmF8Pag5FYpa76RA8NVXX3HPPfegqvzzn//kueeeczqkgGKJ1GRZQnIqb03bxNeLd523vX/zyrzU7WoKWQP7gPDpp5/y4IMPAvDvf/+bF154weGIAo/9ppssSU5NY+Copfyx44hnW8nC4fy3dwM6XF3GwcjMlRg+fDiPPfYYAEOHDmXIkCEORxSYLJGaLPm/BX+el0Q7Xl2G//SuT8nC1k8+kISHhyMifPjhh56Eaq6cJVJzxRZsOch7s89VKg1qXZVXutex2t0A9MADD9C6dWvq1q3rdCgBzWrtzRX5ddshHvx2hWe9YaWivNTNkmigUFXefvtt1q9f79lmSTT7LJEary3ceoh7v15OYoprXJnw0BA+vL0RoSGWRAOBqvLCCy/w7LPP0qVLF06dOuV0SEHDbu3NZZ1MTOHTX/5k2Lztnm0VihZg7P0tqVzCBh0JBKrKP/7xD9577z1CQ0N5//33KVTI5sDKKZZITaaW7zzCg9+uOK/PfKnI/Ix7oKWN3BQg0tLSeOKJJxg+fDhhYWH873//o1evXk6HFVQskZpLOpGQzGNjV52XRGuXjeTDfo0tiQaItLQ0HnroIT777DPCw8OZMGEC3bt3dzqsoGOJ1FzSW9M2s+/4uUnp3u7TgN5NKtoz0QDy22+/8dlnnxEREcHkyZPp3NmGtvAFS6QmQ/M2H2Ds0t2e9Y/6N6ZHw/IORmSy4oYbbuDTTz+levXqtG/f3ulwgpYlUnOetDTluz928cbPmzzbrq9Zku4NbI6eQJGcnMyuXbuoUaMGAPfff7/DEQU/a/5kPPYcOc2dn//BK5M3kORu4lQuKoJ/31Lf2okGiMTERPr27UurVq3YsGHD5T9gcoSVSA0AK3cfZcAXSzmZeG4S11plCvPFwGusYilAJCQk0Lt3b6ZNm0bRokU5c+aM0yHlGZZIDScSkrn/6+WeJBoi8FCb6jzRsSb589k4ooHg9OnT9OzZkzlz5lCiRAnmzJlDo0aNnA4rz7BEmscdPJHAoK+WeZo4FQwPZcz9LWlUqaizgRmvnTx5kh49erBgwQJKly7N3LlzqVevntNh5SmWSPOo1DTlx1V7eXfWFmLTNXF6qVsdS6IBJDU1lW7durFw4ULKlSvHvHnzPFOEmNxjiTQPOnIqibu/XMradPPMh4YI/76lHv2aV3YwMnOlQkNDGTBgADt27GDu3LnUrFnT6ZDyJHFNKR84mjVrpsuXL3c6jIC15K84nhy3mv0nzpVCowqE8cHtjWhXu7SDkZnsOHXqlPWdzyYRWaGqzbLyWWv+lIf8tu0w/T5dcl4Sva1ZRX59tp0l0QBy6NAh2rdvz5o1azzbLIk6y27t84idh09x3zfLztv2f3c24cb61tA+kOzfv58OHTqwceNGBg8ezMKFC62Nrx+wRJoHxCckc8/Xy0hIdo8jmi+EEXc0oVMdm1spkOzdu5f27duzdetW6tSpw/jx4y2J+glLpEHu8MlE7vt6OX8dcg3iGx4awnf3tqB5dHGHIzNXYvfu3bRv354///yThg0bMnv2bEqVKuV0WMbNEmkQO52Uwt1fLmX93hOebW/3aWBJNMDs2LGDdu3asWvXLpo2bcqsWbMoXtx+hv7EKpuCVFqa8o/xazxJNETgtZ51uaVxBYcjM1dq2bJl7N69mxYtWjBnzhxLon7ISqRB6oM5W5m2br9n/fVb6nFniyoORmSy6rbbbiMiIoK2bdtSpEgRp8MxGbBEGoS+X7bnvPmV7r62qiXRALN+/XqSk5Np3LgxADfffLPDEZnMWCINMlPXxvLcxLWe9etrluSlblc7GJG5UqtXr6Zjx46oKosXL6ZWrVpOh2Quw56RBpH5mw/y5LjVpLk7q9UpV4ThdzQhX6j9mAPF8uXLad++PXFxcbRs2ZLKla3LbiCwv7AgsfjPOB76bgUp7ixavVQhvr23OVEFwhyOzHhr8eLFdOjQgaNHj9KzZ08mTpxIRESE02EZL3idSEXE+qD5qdV7jnHf18tIdI9qX7FYAb67rwUlCud3ODLjrYULF9K5c2dOnDhB3759GT9+PPnz288vUFw2kYrItSKyEdjkXm8oIh/7PDLjlc37TzBw1FJOJaUCUDoyP2Pua0m5qAIOR2a8dfjwYbp3787Jkye58847GTNmDGFhdicRSLypbHof6AJMAVDVNSJyg0+jMl45eCKBgaOWcvxMMgDFCoYx+r4WVC5hU4MEkpIlS/LRRx+xcOFCPv30U0JDbVaCQONVrb2q7rmgT2+qb8Ix3tqyP56+IxdxIsE1PUhk/nx8c08LapaJdDgy4630Q98NHDiQgQMHOhyRySpvnpHuEZFrARWRcBH5B+7bfOOMY6eTuO+bZZ4kCvDmrfWpXzHKwajMlZg0aRLVq1dn1apVTodicoA3ifQh4FGgAhADNAIe8WFMJhOpacqjY1ay54hrhsgCYaF8cldTejQs73Bkxlv/+9//6Nu3LwcOHGDKlClOh2NygDe39lep6p3pN4hIa+B334RkLiXm6Gnu/2YFm/adG4Tkg36N6FK3rINRmSvx3XffMXDgQNLS0njxxRd55ZVXnA7J5ABvSqQfebnN+NBPa2Lp9N7C85LowFZVLIkGkFGjRjFgwADS0tJ49dVXeeONN2w80SBxyRKpiLQCrgVKicjf071VBLBqxVy06M/DPDb2/Gdpd7aozAvW9TNgfPLJJzz00EMAvPXWWzz33HMOR2RyUma39uFAYfc+6auCTwB9fBmUOWfq2lgGjzk/iU54+FqaVinmUEQmKwoXLkxISAhDhw7lqaeecjock8MuO4uoiFRR1V25FM9l5aVZRH/ddoi7vljqWS8QFsq0J64nuqR1MgtEmzdvtjnn/ZivZxE9LSLviMg0EZl39pWVkxnvbT94kvu/Of8fxuTBrS2JBpChQ4eS/p++JdHg5U0iHQ1sBqKBV4GdwLLMPmCyJzVNeXbCWs9kdfnzhTDpkWupZY3tA4Kq8sorr/D000/TtWtXjh8/7nRIxse8SaQlVPULIFlVf1HVe4CW3hxcRLqKyBYR2S4iGT5dF5G2IrJaRDaIyC9XEHvQ+mbxTlbsOgpAvhBh3AMtaVzZnokGAlXlueee4/XXXyckJIQPP/yQqCjrKBHsvGlHmuz+uk9EugGxQMXLfUhEQoERQCdcDfmXicgUVd2Ybp+iwMdAV1XdLSKlrzD+oLPnyGnenrHFs/5IuxqWRAOEqvL3v/+dDz74gHz58jFmzBj69u3rdFgmF3iTSN8QkShgCK72o0WAJ734XHNgu6r+BSAi44CewMZ0+9wBTFTV3QCqetD70IOPqvL8xHWcSXYNZVCrTGEGt6vhcFTGG2lpaTz22GN8/PHHhIWF8f3333PLLbc4HZbJJZe9tVfVqap6XFXXq2o7VW0KHPHi2BWAPenWY9zb0qsFFBORBSKyQkQGeB15EPp++R5+234YcM36+XafhoTns7G3A8Hy5csZOXIk+fPnZ9KkSZZE85jMGuSHArfhSn4zVHW9iHQHXgAKAI0vc+yMumxc2NYqH9AU6OA+5mIRWaKqWy+I5QHgASBop15YuuMIz05Y51m/97poGlUq6lxA5oo0b96cb775hlKlStG5c2enwzG5LLNb+y+ASsBSYJiI7AJaAc+p6o9eHDvG/fmzKuJ6vnrhPodV9RRwSkQWAg2B8xKpqn4KfAqudqRenDugHIxP4JHRKz3r0SUL8fdOVzkYkfFGSkoK27dv9zRruvPOOy/zCROsMrtvbAZ0UtXngZuAvkBbL5MouJpI1RSRaBEJB/rhHhw6ncnA9SKST0QKAi3IY0P0paYpT4xdzeGTiQBERuTjk7uaUiDceuH6s+TkZPr370/Lli3JKx1EzKVlViJNUtU0AFVNEJGtqrrf2wOraoqIDAZm4uqbP0pVN4jIQ+73R6rqJhGZAawF0oDPVXV9lq8mAH04ZyuL/4oDQAQ+vrOJtRf1c4mJidx2221MmTKFqKgoUlNtnPO8LrNEWltEzk6QLkB197oAqqoNLndwVZ0GTLtg28gL1t8B3rmiqIPEvM0H+Gj+ds/64+1rcn3NUg5GZC7nzJkz9O7dm+nTp1O8eHFmzZpF06ZNnQ7LOCyzRGpDC/nQT2tizxvRqXWNEjzeoaaDEZnLOX36ND179mTOnDmULFmSOXPm0LBhQ6fDMn7gkonUnwYqCTYnEpJ5c9q5R8ElC+fng9sbExpiY1P6K1X1JNEyZcowd+5c6tat63RYxk9YI0UHvPnzJvYdT/CsfzXoGkpF2hzm/kxEuO+++6hcuTK//PKLJVFzHkukuWzh1kOMW3aun8LHdzahXgXri+2v0g8zefvtt7N582auusqappnzeZVIRaSAiNhvTzbFJyTz3IS1nvWb6pflpvrlHIzIZCYuLo727dvzxx9/eLYVKFDAwYiMv7psIhWRHsBqYIZ7vZGI2NSHVyglNY3Hx64i1n1LX6xgGK/1rOdwVOZSDh48SLt27ViwYAGPPfbYeSVTYy7kTYn0X7gGIDkGoKqrgaq+CihYTV27j/lbDnnWX+1Zj5KF7bmoP9q3bx9t27Zl3bp11K5dmx9//NEmqTOZ8iaRpqiqjUybDQnJqbw7+9zQeP2bV+Jmm4feL8XExNCmTRs2bdpEvXr1WLBgAeXL28/KZM6bRLpeRO4AQkWkpoh8BCzycVxB5dOFf7HnyBkAihYM4+kuNuWEP9q1axdt2rRh27ZtNGrUiPnz51OmTBmnwzIBwJtE+hhQF0gExgDH8W48UgNsjD3Bh3O3edaHdL6K4oXCHYzIXMratWvZtWsXzZo1Y+7cuZQsWdLpkEyA8GZg56tU9UXgRV8HE4zGLN1FapqrouLqckW4o3lwDgMYDHr06MHUqVNp1aqVTQ9irog3JdL3RGSziLwuItYK+Qocik/kuyW7PevP31jbei/5mY0bN7J48WLPeteuXS2JmivmzQj57YC2wCHgUxFZJyIv+TqwQBefkMzAUefmpC9ZOJzratitoj9Zt24dbdu2pWvXrqxbt+7yHzDmErxqkK+q+1V1GPAQrjalr/gyqGDw2a872LjvBOAaHu+1nvUIsdKo31i1ahXt2rXj0KFDtGzZkho1bG4sk3XeNMi/WkT+JSLrgeG4auwvO4toXrb32Bm+/G2HZ/3JDrWsB5MfWbp0Ke3btycuLo5u3boxefJk67FkssWbyqYvgbFAZ1W9cKoQc4HjZ5K5e9RS4hNTAKhSoiAPtqnmcFTmrEWLFtG1a1fi4+Pp1asX48aNIzzcWlGY7LlsIlXVlrkRSDBIS1MeHb2SbQdPera927chEWE2bYg/OH78ON27dyc+Pp7bbruN7777jrCwMKfDMkEgs1lEv1fV20RkHefP/un1CPl5zdR1+zzTKYMriTarWtzBiEx6UVFRfPbZZ/z00098/vnn5MvnzQ2ZMZeX2W/SE+6v3XMjkECXkJzKB7PPTX56//XR9G5qj5L9QXx8PJGRrnmwevfuTe/evR2OyASbS1Y2qeo+9+Ijqror/Qt4JHfCCwypacoLE9fx1+FTgGsm0MHtbNoQfzBlyhSio6NZtMh6NRvf8ab5U6cMtt2Y04EEqtQ05d6vlzFx1V7Ptme61iaqoD17c9qECRPo3bs3cXFx/PTTT06HY4JYZs9IH8ZV8qyWbjZRgEjgd18HFih+XrePBemGx+vdpCJ/a2HdQJ02duxY7rrrLlJTU3n66ad58803nQ7JBLHMnpGOAaYDbwHPpdser6pHfBpVgDiVmMJ/0k1i16Nhef7bu76NXemwb775hkGDBpGWlsaLL77I66+/bj8T41OZJVJV1Z0i8uiFb4hIcUum8MS41Z4R74sXCuf1nnXJF2rTYDlp1KhR3Hfffagqr732Gi+//LLTIZk84HIl0u7AClzNn9L/S1cgT7cyPxifwNzNBzzrf2tZhaIFrWG300qUKEFoaChvvPEGzz77rNPhmDwis3ntu7u/RudeOIHj+QnrSD+Nz8BWVZwLxnj07NmTTZs2Wd95k6u86WvfWkQKuZf/JiLviUierk1Ztfsoczcf9KyPvq8FJWz+Jce89957LFy40LNuSdTkNm8e6P0fcFpEGgLPALuAb30alZ/7etFOz3L3BuVobcPjOeb1119nyJAh9OjRg8OHD1/+A8b4gLeT3ynQE/hQVT/E1QQqTzp+Jpnp6/d71h9qU93BaPIuVeXll1/mlVdeISQkhGHDhtnUIMYx3nQ2jheR54G7gOtFJBTIs63NJ66MITElDYC65YtQr4KNpp7bVJXnnnuOt99+m9DQUL799lv69+/vdFgmD/OmRHo7ronv7lHV/UAF4B2fRuWnUlLTGPX7uXFGb2tWycFo8iZV5amnnuLtt98mX758jBs3zpKocZw3U43sB0YDUSLSHUhQ1W98Hpkfmrp2n2da5agCYfRtZoOS5Lb169fz8ccfExYWxg8//ECfPn2cDsmYy9/ai8htuEqgC3C1Jf1IRJ5W1R98HJvfefWnDZ7lu6+tSsFwG4Ytt9WvX5/vv/+e8PBwbrrpJqfDMQbw7hnpi8A1qnoQQERKAXOAPJVID8UncvR0smf97murOhdMHpOamsqmTZuoV68eALfccouzARlzAW+ekYacTaJucV5+Lqgs+vP8pjXFClkvptyQnJzM3/72N1q0aMGvv/7qdDjGZMibEukMEZmJa94mcFU+TfNdSP5pwspzw+Q91bGWg5HkHUlJSfTv35+JEycSGRlJSEie+/9tAoQ3czY9LSK3Atfhekb6qapO8nlkfiT22Bl+3eYaKk8Eejet4HBEwS8xMZG+ffvy008/UbRoUWbOnEnz5s2dDsuYDGU2HmlNYChQHVgH/ENV915q/2A2YUWMp1996+olqVisoLMBBbkzZ87Qq1cvZs6cSfHixZk9ezZNmjRxOixjLimze6VRwFSgN64RoD7KlYj8TFqa8v2KPZ71266xtqO+pKr06dOHmTNnUqpUKRYsWGBJ1Pi9zG7tI1X1M/fyFhFZmRsB+ZslO+I8bUeLROSjc50yDkcU3ESEhx9+mPXr1zN9+nTq1KnjdEjGXFZmiTRCRBpzbhzSAunXVTVPJNbxy2M8y7c0rmBz1PuIqnpGse/evTsdO3YkIiLC4aiM8U5mt/b7gPeAd92v/enWh/o+NOcdP5PMtHX7POvWJdQ3jh49Srt27ViwYIFnmyVRE0gyG9i5XW4G4o9+WhPrGaCkTjkboMQXDh8+TKdOnVi9ejWPP/44q1atIjTUSv0msFgfx0yMX56uksn61ee4AwcO0LFjR9avX0/NmjWZNm2aJVETkCyRXsL6vcdZE3McgPDQEHo2srajOSk2NpYOHTqwefNmateuzbx58yhXrpzTYRmTJT7tKiIiXUVki4hsF5HnMtnvGhFJFRG/Gcon/XB5neqWsS6hOWjPnj20adOGzZs3U69ePRYsWGBJ1AQ0b+ZsEvdcTa+41yuLyGW7mLgHgB4B3AjUAfqLyEVtWdz7/ReYeaXB+8qJhGSmrjlXyXRrYyuN5qQtW7awe/duGjVqxPz58ylTxpqUmcDmTYn0Y6AVcHb03HhcCfJymgPbVfUvVU0CxuGaruRCjwETgIMZvOeIUb/tICnVVclUpURB2tcu7XBEwaVjx45Mnz6defPm2fQgJih4k0hbqOqjQAKAqh4FvLnPrQDsSbce497mISIVgF7ASK+izQXHTifxxa/nbuuf6FDT077RZN3WrVuZN2+eZ719+/YUK1bMwYiMyTneJNJk9+23gmc80jQvPpdR9tEL1j8AnlXV1EwPJPKAiCwXkeWHDh3y4tRZN3HlXuITUwCoXqqQVTLlgI0bN3LDDTfQvXt3li1b5nQ4xuQ4bxLpMGASUFpE/g38BrzpxedigPQt2CsCsRfs0wwYJyI7gT7AxyJyy4UHUtVPVbWZqjYrVaqUF6fOuoXbziXqu1tHExpipdHsWLt2LW3btuXAgQNce+211uXTBCVvhtEbLSIrgA64Spm3qOomL469DKgpItHAXqAfcMcFx44+uywiXwFTVfVHr6PPYYdPJrJgy7lE2raWb5N2sFu5ciWdOnXiyJEjdO3alYkTJ1KgQAGnwzImx3kzZ1Nl4DTwU/ptqro7s8+paoqIDMZVGx8KjFLVDSLykPt9v3kuetb/lp17pFu7bCSVittweVm1dOlSunTpwrFjx+jRowfjx48nf/78TodljE940yD/Z1zPNgWIAKKBLUDdy31QVadxwWj6l0qgqnq3F7H4TEpqGqOX7PKs39yovIPRBLZTp07Ro0cPjh07Ru/evRkzZgzh4dYO1wQvb27t66dfF5EmwIM+i8ghy3cdJfZ4AgBFC4ZxT+voy3zCXEqhQoX4+uuvGTduHJ9//jn58lkHOhPcrvg3XFVXisg1vgjGSUv+ivMs31ivnA2XlwXHjx8nKso1sEvXrl3p2rWrwxEZkzu86dn093Svf4jIGMC3bZAc8MdfRzzLLasVdzCSwDRt2jSqVq3K3LlznQ7FmFznTfOnyHSv/LiemWbUQylgJaaksnL3Uc96i+gSDkYTeCZPnswtt9zCsWPHmDYtz00wa0zmt/buhviFVfXpXIrHEWv2HPeMO1q1REHKRtmgwt764Ycf6N+/PykpKTz55JMMHZonxvw25jyXLJGKSD53j6Ogn3nsj3TPR6006r0xY8bQr18/UlJSePbZZ3nvvfesO63JkzIrkS7FlURXi8gUYDxw6uybqjrRx7HlijNJqfycbjqRFvZ81Cvffvstd999N2lpabz88su8+uqrlkRNnuVNrX1xIA5oz7n2pAoERSIdMX87m/fHAxAWKlxX00Yj8kbZsmUJCwvjpZde4qWXXnI6HGMclVkiLS0ifwfWcy6BnnXh4CMBa9bG/Z7lJzvWonSkPR/1RqdOndi4cSPVqlVzOhRjHJdZrX0oUNj9iky3fPYV8JJT09h64KRnfUCrKg5G4/8+/PBDZs48N/62JVFjXDIrke5T1ddyLRIHLP7zXCVT2SIRREaEORiNf/vPf/7D888/T4ECBfjzzz9tahBj0smsRBr0NQffLD7Xt7566UIORuK/VJXXXnuN559/HhHho48+siRqzAUyK5F2yLUoHLBp3wnmbj7gWX/+xqsdjMY/qSovvfQSb775JiEhIXz11VfcddddTodljN+5ZCJV1SOXei8Y/LhqL+quMmtcuSj1KkQ5G5CfUVWeeeYZhg4dSmhoKKNHj+b22293Oixj/FKeHJYnLU2ZuvZc29H7r7dKkwtt27aN4cOHExYWxrhx47j11ludDskYv5UnE+mSHXHsPXYGcA2Z1/Fqmw74QrVq1WLy5MkkJibSo0cPp8Mxxq/lyUQ6ceVez3LPhuUJz+fN2C3BLzU1lbVr19K4cWMAOnfu7HBExgSGPJdBTiam8MOKGM96ryYVHYzGf6SkpDBgwABatmx5XltRY8zl5blE+tKkdZ7laqUK0bCiVTIlJydzxx13MGbMGMLCwmyCOmOuUJ66tT9+Oplp6851Ce1Qu3SeH2gjMTGRfv368eOPP1KkSBGmT5/Otdde63RYxgSUPJVIp6/fR1Kqa9zRclER/KPLVQ5H5KyEhAR69+7NtGnTKFq0KLNmzeKaa4JuFhljfC5PJdLJq2M9y/deF03+fHl7XqY77riDadOmUaJECWbPnu2pZDLGXJk884x0//EEluxw9a0XgR4NbbrlwYMHU6VKFebPn29J1JhsyDMl0p/WxHp6Ml1bvQRliuTN4fJU1fNcuH379mzZsoX8+fM7HJUxgS3PlEh/XJ2+7WgFByNxzrFjx2jXrt15E9RZEjUm+/JEiXT7wXg2xJ4AIDxfCF3rl3U4otx35MgRunTpwvLly9m/fz+dO3cmX7488eM3xufyxF/SzA3nRnlqf1VpiuSxcUcPHz5Mp06dWL16NdWqVWPmzJmWRI3JQXniryn9AM4d6+StfvUHDhygQ4cObNiwgVq1ajF37lwqVrTeXMbkpKB/RpqYksryXedGBGxVPe9MtxwbG0vbtm3ZsGEDderUYcGCBZZEjfGBoE+kq3cfIyHZ1Qi/SomCVCiad7o/7tixg127dlG/fn3mz59vI9sb4yNBf2u/+K9zt/XX5qHSKEDr1q2ZPXs2tWvXpkSJvHXtxuSmoC+Rpn8+2rJa8CeT7du3n9e8qXXr1pZEjfGxoE6kp5NSWLn7qGe9VZAn0s2bN3PDDTdwyy238OuvvzodjjF5RlAn0qU7jpCc6urOdFWZSEoHcW+m9evX06ZNG/bt20fr1q2ty6cxuSioE+lv2w57llvXKOlgJL61Zs0a2rVrx8GDB+nUqRM///wzhQsXdjosY/KM4E6k288l0utrBmciXb58Oe3atePw4cPcdNNNTJkyhYIFCzodljF5StAm0oPxCWzeHw9AWKjQPLq4wxHlvMTERG655RaOHj1Kz549mThxIhERwfv4whh/FbSJdNH2c7X1jSsXo1D+4GvplT9/fkaPHs2AAQMYP368DUBijEOCL7u4/Zru+ej1QfZ89OjRoxQrVgyANm3a0KZNG4cjMiZvC8oSqary2/ZDnvXrguj56KxZs6hatSo//fST06EYY9yCMpFuP3iSAycSAYiMyEf9CsExU+jPP/9Mjx49OHHiBDNmzHA6HGOMW1Am0vS19ddWL0G+0MC/zEmTJtGrVy+SkpJ45JFH+Oijj5wOyRjjFvgZJgPp249eV7OUg5HkjO+//56+ffuSnJzMU089xfDhwwkJCcofnTEBKej+GpNT01iSbqCSQK9oGjt2LP379yc1NZVnn32Wd9991zPnkjHGPwRdrf2q3cc4lZQKQIWiBahSIrAbp1eqVIkCBQowZMgQ/vWvf1kSNcYPBV0i/W3budr662uWDPjEc91117FhwwaqVKnidCjGmEvw6a29iHQVkS0isl1Ensvg/TtFZK37tUhEGmb3nDM27PcsB2qzpxEjRjBx4kTPuiVRY/ybz0qkIhIKjAA6ATHAMhGZoqob0+22A2ijqkdF5EbgU6BFVs95KD6RrQdOAhAi0Paq0lmO3ynvvfceQ4YMITw8nK1bt1oSNSYA+LJE2hzYrqp/qWoSMA7omX4HVV2kqmcHDF0CZGtCofSj4derEEXhAOsW+tZbbzFkyBAAhg0bZknUmADhy0RaAdiTbj3Gve1S7gWmZ/SGiDwgIstFZPmhQ4cy2gVwzc901g0B1OxJVXn11Vd54YUXEBFGjRrFgw8+6HRYxhgv+bLIllEtj2a4o0g7XIn0uozeV9VPcd3206xZswyPAbBqz7nR8JtUKep9pA5SVV566SXefPNNQkJC+Prrr/nb3/7mdFjGmCvgy0QaA1RKt14RiL1wJxFpAHwO3KiqcRe+763ElFQ2xJ7wrDeqVCyrh8pVu3fvZtiwYYSGhjJmzBhuu+02p0MyxlwhXybSZUBNEYkG9gL9gDvS7yAilYGJwF2qujU7J9u0L56klHPTLhcvFJ6dw+WaKlWqMH36dA4dOkSvXr2cDscYkwU+S6SqmiIig4GZQCgwSlU3iMhD7vdHAq8AJYCP3e09U1S1WVbOtzrdJHeNKxXNXvA+lpaWxooVK7jmmmsAV1tRY0zg8mk7UlWdpqq1VLW6qv7bvW2kO4miqvepajFVbeR+ZSmJAqyNOe5ZbuTHiTQ1NZV7772XVq1a8eOPPzodjjEmBwRW+6BMbD0Y71muU94/h81LSUlh4MCBjBkzhoIFC1KkSBGnQzLG5ICgSKQnE1M8DfEBapT2vxk0k5OTufPOOxk/fjyFCxdm2rRpXH/99U6HZYzJAUGRSH/ZcshT0VS7bKTfVTQlJiZy++23M3nyZIoUKcKMGTNo1aqV02EZY3JIUCTSNTHHPMsdrva/bqGDBg1i8uTJFCtWjFmzZtGsWZYfBRtj/FBQjEe6/eC52/raZf3vueNjjz1GdHQ08+bNsyRqTBAKihLphthzNfZXlY10MJJzVNUzhF+rVq3YsmULYWFhDkdljPGFgC+RHjiR4JnormB4KNVLOV/RdOLECdq1a8f48eM92yyJGhO8Ar5Emr79aL3yUYSGODuQ87Fjx+jatSt//PEHe/bs4eabbyZ//vyOxmSM8a0gSKTHPMv1KzrbfvTIkSN07tyZFStWULVqVebOnWtJ1Jg8IAgS6bkSaQMHE+mhQ4fo2LEja9eupXr16syfP59KlSpd/oPGmIAX8M9I/zrsfI39/v37adu2LWvXruWqq65i4cKFlkSNyUMCOpEeOZXEniNnAAgPDXFsxtC9e/cSExND3bp1+eWXXyhfvrwjcRhjnBHQt/ar0o34VLdCESLCQh2Jo2nTpsydO5cqVapQqlTgjMxvjMkZAV0iXZkukTapnLsDOf/111/nzfTZrFkzS6LG5FGBnUh3HfMsN65cNNfOu23bNtq0acNtt93GrFmzcu28xhj/FLCJNCU17bw+9rlVIt20aRM33HADMTExtGrVipYtW+bKeY0x/itgE+mWA/GcTkoFoGyRCMoXLeDzc65bt442bdqwf/9+2rVrx/Tp021MUWNM4CbSlemmXs6NGUNXrVpFu3btOHToEJ06dWLq1KkULux8d1RjjPMCNpGuysWKpuTkZHr37k1cXBw33XQTU6ZMoWBBZ5paGWP8TwAn0mOe5cY+TqRhYWGMGzeOu+66i4kTJxIREeHT8xljAktAJtL4hGR2HD4FQFioUK+Cb55TxsXFeZabN2/ON998Y33njTEXCchEuvfYGc9ypWIFyZ8v5xviz5s3j+joaMaNG5fjxzbGBJeATKT7jiV4lssVzfnb7JkzZ9KtWzfi4+OZO3dujh/fGBNcAjKRxh4/VyItH5WzzZ6mTp3KzTffTEJCAg888ACffPJJjh7fGBN8AjORpru1L5eD7UcnTZrErbfeSlJSEoMHD2bkyJGEhATkt8gYk4sCMkukv7UvH5Uzt/YTJkygb9++JCcnM2TIEIYNG+aZc8kYYzITkKM/pa9syqkeTdHR0URGRvLII4/wxhtvWBI1xngtIBPpvuPpSqQ5VNnUpEkT1q9fT/ny5S2JGmOuSGDe2qerbCqXjcqmkSNH8u2333rWK1SoYEnUGHPFAq5EmpKmJKcqAFEFwiiUP2uXMGzYMJ544glCQ0Np0aIFtWrVyskwjTF5SMCVSJNS0jzLWX0++s477/DEE08A8MEHH1gSNcZkS8Al0uTUdIk0CzX2b7zxBs888wwiwieffMLgwYNzMjxjTB4UcLf26RPplfRqUlX++c9/8vrrryMijBo1irvvvtsHERpj8poATKRKmHv5Sm7t9+3bx/DhwwkNDeWbb77hjjvu8E2Axpg8JwATadq5RHoFNfbly5dn9uzZ7Ny5k969e/smOGNMnhRwz0ivpLIpLS2NRYsWedabNm1qSdQYk+MCLpGe94w0k8qmtLQ0HnzwQa677jpGjx6dG6EZY/KogLu1T0lztSEVgbKXSKSpqancc889fPPNN0RERFC6dOncDNEYk8cEXCI9q3RkfsJCLy5Qp6SkMGDAAMaOHUvBggWZOnUq7dq1cyBCY0xeEbCJNKPno0lJSdxxxx1MmDCByMhIpk2bxnXXXedAdMaYvCRwE2kGNfYPPfQQEyZMICoqihkzZtCyZUsHIjPG5DUBV9l0VkYVTY8//jjVq1dn7ty5lkSNMbkmcEuk7lv7tLQ0zyj2jRo1YvPmzeTLF7CXZYwJQAFbIi1fNIKTJ0/SsWNHvvrqK892S6LGmNwWsFknMiSJLl26sGjRIrZv307fvn0pVKiQ02EZY/Ign5ZIRaSriGwRke0i8lwG74uIDHO/v1ZEmnhz3NSEkzx2Vx8WLVpEpUqVmDdvniVRY4xjRFV9c2CRUGAr0AmIAZYB/VV1Y7p9bgIeA24CWgAfqmqLzI4bXqaahkgIiQf+pGrVqsyfP5+qVav65BqMMXmHiKxQ1WZZ+awvS6TNge2q+peqJgHjgJ4X7NMT+EZdlgBFRaRcZgdNObKXxAN/UqNGDRYuXGhJ1BjjOF8m0grAnnTrMe5tV7rPeTQ1hcgylfnll1+oVKlSjgRqjDHZ4cvKpoxmkbvwOYI3+yAiDwAPuFcT4w/sXl+hQqb5NpCVBA47HYQP2fUFrmC+NoCrsvpBXybSGCB9kbEiEJuFfVDVT4FPAURkeVafYwQCu77AFszXF8zXBq7ry+pnfXlrvwyoKSLRIhIO9AOmXLDPFGCAu/a+JXBcVff5MCZjjMlxPiuRqmqKiAwGZgKhwChV3SAiD7nfHwlMw1Vjvx04DQzyVTzGGOMrPm2Qr6rTcCXL9NtGpltW4NErPOynORCaP7PrC2zBfH3BfG2QjevzWTtSY4zJKwK2r70xxvgLv02kvupe6i+8uL473de1VkQWiUhDJ+LMistdW7r9rhGRVBHpk5vxZZc31ycibUVktYhsEJFfcjvG7PDidzNKRH4SkTXu6wuYug0RGSUiB0Vk/SXez1peUVW/e+GqnPoTqAaEA2uAOhfscxMwHVdb1JbAH07HncPXdy1QzL18Y6BcnzfXlm6/ebieofdxOu4c/tkVBTYCld3rpZ2OO4ev7wXgv+7lUsARINzp2L28vhuAJsD6S7yfpbziryVSn3Qv9SOXvT5VXaSqR92rS3C1sQ0E3vzswDXGwgTgYG4GlwO8ub47gImquhtAVQPpGr25PgUiRUSAwrgSaUruhpk1qroQV7yXkqW84q+J1CfdS/3IlcZ+L67/koHgstcmIhWAXsBIAo83P7taQDERWSAiK0RkQK5Fl33eXN9w4GpcnWfWAU+oahrBIUt5xV/HI82x7qV+yuvYRaQdrkQaKLP4eXNtHwDPqmqqq1ATULy5vnxAU6ADUABYLCJLVHWrr4PLAd5cXxdgNdAeqA7MFpFfVfWEj2PLDVnKK/6aSHOse6mf8ip2EWkAfA7cqKpxuRRbdnlzbc2Ace4kWhK4SURSVPXHXIkwe7z93TysqqeAUyKyEGiIa1hJf+fN9Q0C/qOuh4rbRWQHUBtYmjsh+lTW8orTD38v8cA3H/AXEM25B951L9inG+c/FF7qdNw5fH2VcfX4utbpeHP62i7Y/ysCq7LJm5/d1cBc974FgfVAPadjz8Hr+z/gX+7lMsBeoKTTsV/BNVbl0pVNWcorflki1SDvXurl9b0ClAA+dpfcUjQABozw8toCljfXp6qbRGQGsBZIAz5X1Qyb2/gbL39+rwNficg6XAnnWVUNiFGhRGQs0BYoKSIxwD+BMMheXrGeTcYYk03+WmtvjDEBwxKpMcZkkyVSY4zJJkukxhiTTZZIjTEmmyyRGq+4R2lane5VNZN9T+bA+b4SkR3uc60UkVZZOMbnIlLHvfzCBe8tym6M7uOc/b6sd4+IVPQy+zcSkZty4tzGf1jzJ+MVETmpqoVzet9MjvEVMFVVfxCRzsBQVW2QjeNlO6bLHVdEvga2quq/M9n/bqCZqg7O6ViMc6xEarJERAqLyFx3aXGdiFw0wpOIlBORhelKbNe7t3cWkcXuz44XkcsluIVADfdn/+4+1noRedK9rZCI/OweH3O9iNzu3r5ARJqJyH+AAu44RrvfO+n++r/0JUR3Sbi3iISKyDsissw9LuWDXnxbFuMe4EJEmotrHNlV7q9XiWsSyNeA292x3O6OfZT7PKsy+j6aAOB0dy17BcYLSMU1UMVqYBKuroRF3O+VxNUT5Owdzkn31yHAi+7lUCDSve9CoJB7+7PAKxmc7yvcXUeBvsAfuAYCWQcUwjV82wagMdAb+CzdZ6PcXxfgKv15Ykq3z9kYewFfu5fDcY38UwB4AHjJvT0/sByIziDOk+mubzzQ1b1eBMjnXu4ITHAv3w0MT/f5N4G/uZeL4uqPX8jpn7e9ruzll11EjV86o6qNzq6ISBjwpojcgKsbZAVc/a73p/vMMmCUe98fVXW1iLQB6gC/u7u+huMqyWXkHRF5CTiEawSsDsAkdQ0GgohMBK4HZgBDReS/uB4H/HoF1zUdGCYi+YGuwEJVPeN+nNBAzo3eHwXUBHZc8PkCIrIaV//tFcDsdPt/LSI1cY0eFHaJ83cGbhaRf7jXI3CNs7DpCq7BOMwSqcmqO3GNjt5UVZNFZCeuJOChqgvdibYb8K2IvAMcBWaran8vzvG0qv5wdkVEOma0k6puFZGmuPpIvyUis1T1NW8uQlUTRGQBrqHhbgfGnj0d8JiqzrzMIc6oaiMRiQKm4poVdxiu/ujzVbWXu2JuwSU+L0BvVd3iTbzGP9kzUpNVUcBBdxJtB1S5cAcRqeLe5zPgC1xTPCwBWovI2WeeBUWklpfnXAjc4v5MIVy35b+KSHngtKp+Bwx1n+dCye6ScUbG4Rqc4npcg3Xg/vrw2c+ISC33OTOkqseBx4F/uD8ThWtUJHDdzp8Vj+sRx1kzgcfEXTwXkcaXOofxX5ZITVaNBpqJyHJcpdPNGezTFlgtIqtwPcf8UFUP4UosY0VkLa7EWtubE6rqSlzPTpfiemb6uaquAuoDS9232C8Cb2Tw8U+BtWcrmy4wC9dcPnPUNb0GuMaB3QisFNdEaZ9wmTs4dyxrgH7A27hKx7/jen561nygztnKJlwl1zB3bOvd6ybAWPMnY4zJJiuRGmNMNlkiNcaYbLJEaowx2WSJ1BhjsskSqTHGZJMlUmOMySZLpMYYk02WSI0xJpv+H7tys8g82Wv9AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import auc\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(5, 5))\n",
    "ax.plot(fpr, tpr, lw=3,\n",
    "        label='ROC Curve (area = {:.2f})'.format(auc(fpr, tpr)))\n",
    "ax.plot([0, 1], [0, 1], 'k--', lw=2)\n",
    "ax.set(\n",
    "    xlim=(0, 1),\n",
    "    ylim=(0, 1),\n",
    "    title=\"ROC Curve\",\n",
    "    xlabel=\"False Positive Rate\",\n",
    "    ylabel=\"True Positive Rate\",\n",
    ")\n",
    "ax.legend();\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This Receiver Operating Characteristic (ROC) curve tells how well our classifier is doing. We can tell it's doing well by how far it bends the upper-left. A perfect classifier would be in the upper-left corner, and a random classifier would follow the diagonal line.\n",
    "\n",
    "The area under this curve is `area = 0.76`. This tells us the probability that our classifier will predict correctly for a randomly chosen instance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Learn more\n",
    "* Recorded screencast stepping through the real world example above:\n",
    "* A blogpost on dask-xgboost http://matthewrocklin.com/blog/work/2017/03/28/dask-xgboost\n",
    "* XGBoost documentation: https://xgboost.readthedocs.io/en/latest/python/python_intro.html#\n",
    "* Dask-XGBoost documentation: http://ml.dask.org/xgboost.html"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
