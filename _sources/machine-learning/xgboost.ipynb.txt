{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Scale XGBoost\n",
    "=============\n",
    "\n",
    "Dask and XGBoost can work together to train gradient boosted trees in parallel. This notebook shows how to use Dask and XGBoost together.\n",
    "\n",
    "XGBoost provides a powerful prediction framework, and it works well in practice. It wins Kaggle contests and is popular in industry because it has good performance and can be easily interpreted (i.e., it's easy to find the important features from a XGBoost model).\n",
    "\n",
    "<img src=\"http://dask.readthedocs.io/en/latest/_images/dask_horizontal.svg\" width=\"30%\" alt=\"Dask logo\"> <img src=\"https://raw.githubusercontent.com/dmlc/dmlc.github.io/master/img/logo-m/xgboost.png\" width=\"25%\" alt=\"Dask logo\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup Dask\n",
    "We setup a Dask client, which provides performance and progress metrics via the dashboard.\n",
    "\n",
    "You can view the dashboard by clicking the link after running the cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:27:41.199407Z",
     "iopub.status.busy": "2021-03-14T13:27:41.197477Z",
     "iopub.status.idle": "2021-03-14T13:27:45.769164Z",
     "shell.execute_reply": "2021-03-14T13:27:45.769667Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table style=\"border: 2px solid white;\">\n",
       "<tr>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Client</h3>\n",
       "<ul style=\"text-align: left; list-style: none; margin: 0; padding: 0;\">\n",
       "  <li><b>Scheduler: </b>tcp://127.0.0.1:34421</li>\n",
       "  <li><b>Dashboard: </b><a href='http://127.0.0.1:8787/status' target='_blank'>http://127.0.0.1:8787/status</a></li>\n",
       "</ul>\n",
       "</td>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Cluster</h3>\n",
       "<ul style=\"text-align: left; list-style:none; margin: 0; padding: 0;\">\n",
       "  <li><b>Workers: </b>4</li>\n",
       "  <li><b>Cores: </b>4</li>\n",
       "  <li><b>Memory: </b>7.29 GB</li>\n",
       "</ul>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Client: 'tcp://127.0.0.1:34421' processes=4 threads=4, memory=7.29 GB>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from dask.distributed import Client\n",
    "\n",
    "client = Client(n_workers=4, threads_per_worker=1)\n",
    "client"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we create a bunch of synthetic data, with 100,000 examples and 20 features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:27:45.773342Z",
     "iopub.status.busy": "2021-03-14T13:27:45.772894Z",
     "iopub.status.idle": "2021-03-14T13:27:47.031644Z",
     "shell.execute_reply": "2021-03-14T13:27:47.031085Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 16.00 MB </td> <td> 160.00 kB </td></tr>\n",
       "    <tr><th> Shape </th><td> (100000, 20) </td> <td> (1000, 20) </td></tr>\n",
       "    <tr><th> Count </th><td> 100 Tasks </td><td> 100 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> float64 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"1\" x2=\"25\" y2=\"1\" />\n",
       "  <line x1=\"0\" y1=\"2\" x2=\"25\" y2=\"2\" />\n",
       "  <line x1=\"0\" y1=\"3\" x2=\"25\" y2=\"3\" />\n",
       "  <line x1=\"0\" y1=\"4\" x2=\"25\" y2=\"4\" />\n",
       "  <line x1=\"0\" y1=\"6\" x2=\"25\" y2=\"6\" />\n",
       "  <line x1=\"0\" y1=\"7\" x2=\"25\" y2=\"7\" />\n",
       "  <line x1=\"0\" y1=\"8\" x2=\"25\" y2=\"8\" />\n",
       "  <line x1=\"0\" y1=\"9\" x2=\"25\" y2=\"9\" />\n",
       "  <line x1=\"0\" y1=\"10\" x2=\"25\" y2=\"10\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"13\" x2=\"25\" y2=\"13\" />\n",
       "  <line x1=\"0\" y1=\"14\" x2=\"25\" y2=\"14\" />\n",
       "  <line x1=\"0\" y1=\"15\" x2=\"25\" y2=\"15\" />\n",
       "  <line x1=\"0\" y1=\"16\" x2=\"25\" y2=\"16\" />\n",
       "  <line x1=\"0\" y1=\"18\" x2=\"25\" y2=\"18\" />\n",
       "  <line x1=\"0\" y1=\"19\" x2=\"25\" y2=\"19\" />\n",
       "  <line x1=\"0\" y1=\"20\" x2=\"25\" y2=\"20\" />\n",
       "  <line x1=\"0\" y1=\"21\" x2=\"25\" y2=\"21\" />\n",
       "  <line x1=\"0\" y1=\"22\" x2=\"25\" y2=\"22\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"25\" y2=\"25\" />\n",
       "  <line x1=\"0\" y1=\"26\" x2=\"25\" y2=\"26\" />\n",
       "  <line x1=\"0\" y1=\"27\" x2=\"25\" y2=\"27\" />\n",
       "  <line x1=\"0\" y1=\"28\" x2=\"25\" y2=\"28\" />\n",
       "  <line x1=\"0\" y1=\"30\" x2=\"25\" y2=\"30\" />\n",
       "  <line x1=\"0\" y1=\"31\" x2=\"25\" y2=\"31\" />\n",
       "  <line x1=\"0\" y1=\"32\" x2=\"25\" y2=\"32\" />\n",
       "  <line x1=\"0\" y1=\"33\" x2=\"25\" y2=\"33\" />\n",
       "  <line x1=\"0\" y1=\"34\" x2=\"25\" y2=\"34\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"37\" x2=\"25\" y2=\"37\" />\n",
       "  <line x1=\"0\" y1=\"38\" x2=\"25\" y2=\"38\" />\n",
       "  <line x1=\"0\" y1=\"39\" x2=\"25\" y2=\"39\" />\n",
       "  <line x1=\"0\" y1=\"40\" x2=\"25\" y2=\"40\" />\n",
       "  <line x1=\"0\" y1=\"42\" x2=\"25\" y2=\"42\" />\n",
       "  <line x1=\"0\" y1=\"43\" x2=\"25\" y2=\"43\" />\n",
       "  <line x1=\"0\" y1=\"44\" x2=\"25\" y2=\"44\" />\n",
       "  <line x1=\"0\" y1=\"45\" x2=\"25\" y2=\"45\" />\n",
       "  <line x1=\"0\" y1=\"46\" x2=\"25\" y2=\"46\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"49\" x2=\"25\" y2=\"49\" />\n",
       "  <line x1=\"0\" y1=\"50\" x2=\"25\" y2=\"50\" />\n",
       "  <line x1=\"0\" y1=\"51\" x2=\"25\" y2=\"51\" />\n",
       "  <line x1=\"0\" y1=\"52\" x2=\"25\" y2=\"52\" />\n",
       "  <line x1=\"0\" y1=\"54\" x2=\"25\" y2=\"54\" />\n",
       "  <line x1=\"0\" y1=\"55\" x2=\"25\" y2=\"55\" />\n",
       "  <line x1=\"0\" y1=\"56\" x2=\"25\" y2=\"56\" />\n",
       "  <line x1=\"0\" y1=\"57\" x2=\"25\" y2=\"57\" />\n",
       "  <line x1=\"0\" y1=\"58\" x2=\"25\" y2=\"58\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"61\" x2=\"25\" y2=\"61\" />\n",
       "  <line x1=\"0\" y1=\"62\" x2=\"25\" y2=\"62\" />\n",
       "  <line x1=\"0\" y1=\"63\" x2=\"25\" y2=\"63\" />\n",
       "  <line x1=\"0\" y1=\"64\" x2=\"25\" y2=\"64\" />\n",
       "  <line x1=\"0\" y1=\"66\" x2=\"25\" y2=\"66\" />\n",
       "  <line x1=\"0\" y1=\"67\" x2=\"25\" y2=\"67\" />\n",
       "  <line x1=\"0\" y1=\"68\" x2=\"25\" y2=\"68\" />\n",
       "  <line x1=\"0\" y1=\"69\" x2=\"25\" y2=\"69\" />\n",
       "  <line x1=\"0\" y1=\"70\" x2=\"25\" y2=\"70\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"73\" x2=\"25\" y2=\"73\" />\n",
       "  <line x1=\"0\" y1=\"74\" x2=\"25\" y2=\"74\" />\n",
       "  <line x1=\"0\" y1=\"75\" x2=\"25\" y2=\"75\" />\n",
       "  <line x1=\"0\" y1=\"76\" x2=\"25\" y2=\"76\" />\n",
       "  <line x1=\"0\" y1=\"78\" x2=\"25\" y2=\"78\" />\n",
       "  <line x1=\"0\" y1=\"79\" x2=\"25\" y2=\"79\" />\n",
       "  <line x1=\"0\" y1=\"80\" x2=\"25\" y2=\"80\" />\n",
       "  <line x1=\"0\" y1=\"81\" x2=\"25\" y2=\"81\" />\n",
       "  <line x1=\"0\" y1=\"82\" x2=\"25\" y2=\"82\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"85\" x2=\"25\" y2=\"85\" />\n",
       "  <line x1=\"0\" y1=\"86\" x2=\"25\" y2=\"86\" />\n",
       "  <line x1=\"0\" y1=\"87\" x2=\"25\" y2=\"87\" />\n",
       "  <line x1=\"0\" y1=\"88\" x2=\"25\" y2=\"88\" />\n",
       "  <line x1=\"0\" y1=\"90\" x2=\"25\" y2=\"90\" />\n",
       "  <line x1=\"0\" y1=\"91\" x2=\"25\" y2=\"91\" />\n",
       "  <line x1=\"0\" y1=\"92\" x2=\"25\" y2=\"92\" />\n",
       "  <line x1=\"0\" y1=\"93\" x2=\"25\" y2=\"93\" />\n",
       "  <line x1=\"0\" y1=\"94\" x2=\"25\" y2=\"94\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"97\" x2=\"25\" y2=\"97\" />\n",
       "  <line x1=\"0\" y1=\"98\" x2=\"25\" y2=\"98\" />\n",
       "  <line x1=\"0\" y1=\"99\" x2=\"25\" y2=\"99\" />\n",
       "  <line x1=\"0\" y1=\"100\" x2=\"25\" y2=\"100\" />\n",
       "  <line x1=\"0\" y1=\"102\" x2=\"25\" y2=\"102\" />\n",
       "  <line x1=\"0\" y1=\"103\" x2=\"25\" y2=\"103\" />\n",
       "  <line x1=\"0\" y1=\"104\" x2=\"25\" y2=\"104\" />\n",
       "  <line x1=\"0\" y1=\"105\" x2=\"25\" y2=\"105\" />\n",
       "  <line x1=\"0\" y1=\"106\" x2=\"25\" y2=\"106\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"109\" x2=\"25\" y2=\"109\" />\n",
       "  <line x1=\"0\" y1=\"110\" x2=\"25\" y2=\"110\" />\n",
       "  <line x1=\"0\" y1=\"111\" x2=\"25\" y2=\"111\" />\n",
       "  <line x1=\"0\" y1=\"112\" x2=\"25\" y2=\"112\" />\n",
       "  <line x1=\"0\" y1=\"114\" x2=\"25\" y2=\"114\" />\n",
       "  <line x1=\"0\" y1=\"115\" x2=\"25\" y2=\"115\" />\n",
       "  <line x1=\"0\" y1=\"116\" x2=\"25\" y2=\"116\" />\n",
       "  <line x1=\"0\" y1=\"117\" x2=\"25\" y2=\"117\" />\n",
       "  <line x1=\"0\" y1=\"118\" x2=\"25\" y2=\"118\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 25.412617,0.000000 25.412617,120.000000 0.000000,120.000000\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">100000</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(100000, 20), dtype=float64, chunksize=(1000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from dask_ml.datasets import make_classification\n",
    "\n",
    "X, y = make_classification(n_samples=100000, n_features=20,\n",
    "                           chunks=1000, n_informative=4,\n",
    "                           random_state=0)\n",
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dask-XGBoost works with both arrays and dataframes. For more information on creating dask arrays and dataframes from real data, see documentation on [Dask arrays](https://dask.pydata.org/en/latest/array-creation.html) or [Dask dataframes](https://dask.pydata.org/en/latest/dataframe-create.html)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split data for training and testing\n",
    "We split our dataset into training and testing data to aid evaluation by making sure we have a fair test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:27:47.037834Z",
     "iopub.status.busy": "2021-03-14T13:27:47.037173Z",
     "iopub.status.idle": "2021-03-14T13:27:47.435917Z",
     "shell.execute_reply": "2021-03-14T13:27:47.434984Z"
    }
   },
   "outputs": [],
   "source": [
    "from dask_ml.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's try to do something with this data using [dask-xgboost][dxgb].\n",
    "\n",
    "[dxgb]:https://github.com/dask/dask-xgboost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train Dask-XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:27:47.441526Z",
     "iopub.status.busy": "2021-03-14T13:27:47.440847Z",
     "iopub.status.idle": "2021-03-14T13:27:47.486338Z",
     "shell.execute_reply": "2021-03-14T13:27:47.485759Z"
    }
   },
   "outputs": [],
   "source": [
    "import dask\n",
    "import xgboost\n",
    "import dask_xgboost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "dask-xgboost is a small wrapper around xgboost. Dask sets XGBoost up, gives XGBoost data and lets XGBoost do it's training in the background using all the workers Dask has available."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's do some training:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:27:47.495338Z",
     "iopub.status.busy": "2021-03-14T13:27:47.494734Z",
     "iopub.status.idle": "2021-03-14T13:28:01.154014Z",
     "shell.execute_reply": "2021-03-14T13:28:01.153315Z"
    }
   },
   "outputs": [],
   "source": [
    "params = {'objective': 'binary:logistic',\n",
    "          'max_depth': 4, 'eta': 0.01, 'subsample': 0.5, \n",
    "          'min_child_weight': 0.5}\n",
    "\n",
    "bst = dask_xgboost.train(client, params, X_train, y_train, num_boost_round=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualize results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `bst` object is a regular `xgboost.Booster` object. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:28:01.163687Z",
     "iopub.status.busy": "2021-03-14T13:28:01.163073Z",
     "iopub.status.idle": "2021-03-14T13:28:01.172364Z",
     "shell.execute_reply": "2021-03-14T13:28:01.171680Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xgboost.core.Booster at 0x7ff404918100>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bst"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This means all the methods mentioned in the [XGBoost documentation][2] are available. We show two examples to expand on this, but these examples are of XGBoost instead of Dask.\n",
    "\n",
    "[2]:https://xgboost.readthedocs.io/en/latest/python/python_intro.html#"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot feature importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:28:01.182871Z",
     "iopub.status.busy": "2021-03-14T13:28:01.182365Z",
     "iopub.status.idle": "2021-03-14T13:28:02.012594Z",
     "shell.execute_reply": "2021-03-14T13:28:02.011631Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "ax = xgboost.plot_importance(bst, height=0.8, max_num_features=9)\n",
    "ax.grid(False, axis=\"y\")\n",
    "ax.set_title('Estimated feature importance')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We specified that only 4 features were informative while creating our data, and only 3 features show up as important."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the Receiver Operating Characteristic curve\n",
    "We can use a fancier metric to determine how well our classifier is doing by plotting the [Receiver Operating Characteristic (ROC) curve](https://en.wikipedia.org/wiki/Receiver_operating_characteristic):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:28:02.021360Z",
     "iopub.status.busy": "2021-03-14T13:28:02.020799Z",
     "iopub.status.idle": "2021-03-14T13:28:02.506083Z",
     "shell.execute_reply": "2021-03-14T13:28:02.504441Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<tr>\n",
       "<td>\n",
       "<table>\n",
       "  <thead>\n",
       "    <tr><td> </td><th> Array </th><th> Chunk </th></tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr><th> Bytes </th><td> 60.00 kB </td> <td> 600 B </td></tr>\n",
       "    <tr><th> Shape </th><td> (15000,) </td> <td> (150,) </td></tr>\n",
       "    <tr><th> Count </th><td> 100 Tasks </td><td> 100 Chunks </td></tr>\n",
       "    <tr><th> Type </th><td> float32 </td><td> numpy.ndarray </td></tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</td>\n",
       "<td>\n",
       "<svg width=\"170\" height=\"75\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"1\" y1=\"0\" x2=\"1\" y2=\"25\" />\n",
       "  <line x1=\"2\" y1=\"0\" x2=\"2\" y2=\"25\" />\n",
       "  <line x1=\"3\" y1=\"0\" x2=\"3\" y2=\"25\" />\n",
       "  <line x1=\"4\" y1=\"0\" x2=\"4\" y2=\"25\" />\n",
       "  <line x1=\"6\" y1=\"0\" x2=\"6\" y2=\"25\" />\n",
       "  <line x1=\"7\" y1=\"0\" x2=\"7\" y2=\"25\" />\n",
       "  <line x1=\"8\" y1=\"0\" x2=\"8\" y2=\"25\" />\n",
       "  <line x1=\"9\" y1=\"0\" x2=\"9\" y2=\"25\" />\n",
       "  <line x1=\"10\" y1=\"0\" x2=\"10\" y2=\"25\" />\n",
       "  <line x1=\"12\" y1=\"0\" x2=\"12\" y2=\"25\" />\n",
       "  <line x1=\"13\" y1=\"0\" x2=\"13\" y2=\"25\" />\n",
       "  <line x1=\"14\" y1=\"0\" x2=\"14\" y2=\"25\" />\n",
       "  <line x1=\"15\" y1=\"0\" x2=\"15\" y2=\"25\" />\n",
       "  <line x1=\"16\" y1=\"0\" x2=\"16\" y2=\"25\" />\n",
       "  <line x1=\"18\" y1=\"0\" x2=\"18\" y2=\"25\" />\n",
       "  <line x1=\"19\" y1=\"0\" x2=\"19\" y2=\"25\" />\n",
       "  <line x1=\"20\" y1=\"0\" x2=\"20\" y2=\"25\" />\n",
       "  <line x1=\"21\" y1=\"0\" x2=\"21\" y2=\"25\" />\n",
       "  <line x1=\"22\" y1=\"0\" x2=\"22\" y2=\"25\" />\n",
       "  <line x1=\"24\" y1=\"0\" x2=\"24\" y2=\"25\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"25\" />\n",
       "  <line x1=\"26\" y1=\"0\" x2=\"26\" y2=\"25\" />\n",
       "  <line x1=\"27\" y1=\"0\" x2=\"27\" y2=\"25\" />\n",
       "  <line x1=\"28\" y1=\"0\" x2=\"28\" y2=\"25\" />\n",
       "  <line x1=\"30\" y1=\"0\" x2=\"30\" y2=\"25\" />\n",
       "  <line x1=\"31\" y1=\"0\" x2=\"31\" y2=\"25\" />\n",
       "  <line x1=\"32\" y1=\"0\" x2=\"32\" y2=\"25\" />\n",
       "  <line x1=\"33\" y1=\"0\" x2=\"33\" y2=\"25\" />\n",
       "  <line x1=\"34\" y1=\"0\" x2=\"34\" y2=\"25\" />\n",
       "  <line x1=\"36\" y1=\"0\" x2=\"36\" y2=\"25\" />\n",
       "  <line x1=\"37\" y1=\"0\" x2=\"37\" y2=\"25\" />\n",
       "  <line x1=\"38\" y1=\"0\" x2=\"38\" y2=\"25\" />\n",
       "  <line x1=\"39\" y1=\"0\" x2=\"39\" y2=\"25\" />\n",
       "  <line x1=\"40\" y1=\"0\" x2=\"40\" y2=\"25\" />\n",
       "  <line x1=\"42\" y1=\"0\" x2=\"42\" y2=\"25\" />\n",
       "  <line x1=\"43\" y1=\"0\" x2=\"43\" y2=\"25\" />\n",
       "  <line x1=\"44\" y1=\"0\" x2=\"44\" y2=\"25\" />\n",
       "  <line x1=\"45\" y1=\"0\" x2=\"45\" y2=\"25\" />\n",
       "  <line x1=\"46\" y1=\"0\" x2=\"46\" y2=\"25\" />\n",
       "  <line x1=\"48\" y1=\"0\" x2=\"48\" y2=\"25\" />\n",
       "  <line x1=\"49\" y1=\"0\" x2=\"49\" y2=\"25\" />\n",
       "  <line x1=\"50\" y1=\"0\" x2=\"50\" y2=\"25\" />\n",
       "  <line x1=\"51\" y1=\"0\" x2=\"51\" y2=\"25\" />\n",
       "  <line x1=\"52\" y1=\"0\" x2=\"52\" y2=\"25\" />\n",
       "  <line x1=\"54\" y1=\"0\" x2=\"54\" y2=\"25\" />\n",
       "  <line x1=\"55\" y1=\"0\" x2=\"55\" y2=\"25\" />\n",
       "  <line x1=\"56\" y1=\"0\" x2=\"56\" y2=\"25\" />\n",
       "  <line x1=\"57\" y1=\"0\" x2=\"57\" y2=\"25\" />\n",
       "  <line x1=\"58\" y1=\"0\" x2=\"58\" y2=\"25\" />\n",
       "  <line x1=\"60\" y1=\"0\" x2=\"60\" y2=\"25\" />\n",
       "  <line x1=\"61\" y1=\"0\" x2=\"61\" y2=\"25\" />\n",
       "  <line x1=\"62\" y1=\"0\" x2=\"62\" y2=\"25\" />\n",
       "  <line x1=\"63\" y1=\"0\" x2=\"63\" y2=\"25\" />\n",
       "  <line x1=\"64\" y1=\"0\" x2=\"64\" y2=\"25\" />\n",
       "  <line x1=\"66\" y1=\"0\" x2=\"66\" y2=\"25\" />\n",
       "  <line x1=\"67\" y1=\"0\" x2=\"67\" y2=\"25\" />\n",
       "  <line x1=\"68\" y1=\"0\" x2=\"68\" y2=\"25\" />\n",
       "  <line x1=\"69\" y1=\"0\" x2=\"69\" y2=\"25\" />\n",
       "  <line x1=\"70\" y1=\"0\" x2=\"70\" y2=\"25\" />\n",
       "  <line x1=\"72\" y1=\"0\" x2=\"72\" y2=\"25\" />\n",
       "  <line x1=\"73\" y1=\"0\" x2=\"73\" y2=\"25\" />\n",
       "  <line x1=\"74\" y1=\"0\" x2=\"74\" y2=\"25\" />\n",
       "  <line x1=\"75\" y1=\"0\" x2=\"75\" y2=\"25\" />\n",
       "  <line x1=\"76\" y1=\"0\" x2=\"76\" y2=\"25\" />\n",
       "  <line x1=\"78\" y1=\"0\" x2=\"78\" y2=\"25\" />\n",
       "  <line x1=\"79\" y1=\"0\" x2=\"79\" y2=\"25\" />\n",
       "  <line x1=\"80\" y1=\"0\" x2=\"80\" y2=\"25\" />\n",
       "  <line x1=\"81\" y1=\"0\" x2=\"81\" y2=\"25\" />\n",
       "  <line x1=\"82\" y1=\"0\" x2=\"82\" y2=\"25\" />\n",
       "  <line x1=\"84\" y1=\"0\" x2=\"84\" y2=\"25\" />\n",
       "  <line x1=\"85\" y1=\"0\" x2=\"85\" y2=\"25\" />\n",
       "  <line x1=\"86\" y1=\"0\" x2=\"86\" y2=\"25\" />\n",
       "  <line x1=\"87\" y1=\"0\" x2=\"87\" y2=\"25\" />\n",
       "  <line x1=\"88\" y1=\"0\" x2=\"88\" y2=\"25\" />\n",
       "  <line x1=\"90\" y1=\"0\" x2=\"90\" y2=\"25\" />\n",
       "  <line x1=\"91\" y1=\"0\" x2=\"91\" y2=\"25\" />\n",
       "  <line x1=\"92\" y1=\"0\" x2=\"92\" y2=\"25\" />\n",
       "  <line x1=\"93\" y1=\"0\" x2=\"93\" y2=\"25\" />\n",
       "  <line x1=\"94\" y1=\"0\" x2=\"94\" y2=\"25\" />\n",
       "  <line x1=\"96\" y1=\"0\" x2=\"96\" y2=\"25\" />\n",
       "  <line x1=\"97\" y1=\"0\" x2=\"97\" y2=\"25\" />\n",
       "  <line x1=\"98\" y1=\"0\" x2=\"98\" y2=\"25\" />\n",
       "  <line x1=\"99\" y1=\"0\" x2=\"99\" y2=\"25\" />\n",
       "  <line x1=\"100\" y1=\"0\" x2=\"100\" y2=\"25\" />\n",
       "  <line x1=\"102\" y1=\"0\" x2=\"102\" y2=\"25\" />\n",
       "  <line x1=\"103\" y1=\"0\" x2=\"103\" y2=\"25\" />\n",
       "  <line x1=\"104\" y1=\"0\" x2=\"104\" y2=\"25\" />\n",
       "  <line x1=\"105\" y1=\"0\" x2=\"105\" y2=\"25\" />\n",
       "  <line x1=\"106\" y1=\"0\" x2=\"106\" y2=\"25\" />\n",
       "  <line x1=\"108\" y1=\"0\" x2=\"108\" y2=\"25\" />\n",
       "  <line x1=\"109\" y1=\"0\" x2=\"109\" y2=\"25\" />\n",
       "  <line x1=\"110\" y1=\"0\" x2=\"110\" y2=\"25\" />\n",
       "  <line x1=\"111\" y1=\"0\" x2=\"111\" y2=\"25\" />\n",
       "  <line x1=\"112\" y1=\"0\" x2=\"112\" y2=\"25\" />\n",
       "  <line x1=\"114\" y1=\"0\" x2=\"114\" y2=\"25\" />\n",
       "  <line x1=\"115\" y1=\"0\" x2=\"115\" y2=\"25\" />\n",
       "  <line x1=\"116\" y1=\"0\" x2=\"116\" y2=\"25\" />\n",
       "  <line x1=\"117\" y1=\"0\" x2=\"117\" y2=\"25\" />\n",
       "  <line x1=\"118\" y1=\"0\" x2=\"118\" y2=\"25\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.000000,0.000000 120.000000,0.000000 120.000000,25.412617 0.000000,25.412617\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"45.412617\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >15000</text>\n",
       "  <text x=\"140.000000\" y=\"12.706308\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(0,140.000000,12.706308)\">1</text>\n",
       "</svg>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<_predict_part, shape=(15000,), dtype=float32, chunksize=(150,), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_hat = dask_xgboost.predict(client, bst, X_test).persist()\n",
    "y_hat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:28:02.526242Z",
     "iopub.status.busy": "2021-03-14T13:28:02.525602Z",
     "iopub.status.idle": "2021-03-14T13:28:07.172832Z",
     "shell.execute_reply": "2021-03-14T13:28:07.173923Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_curve\n",
    "\n",
    "y_test, y_hat = dask.compute(y_test, y_hat)\n",
    "fpr, tpr, _ = roc_curve(y_test, y_hat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:28:07.194566Z",
     "iopub.status.busy": "2021-03-14T13:28:07.193970Z",
     "iopub.status.idle": "2021-03-14T13:28:07.884913Z",
     "shell.execute_reply": "2021-03-14T13:28:07.883329Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import auc\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(5, 5))\n",
    "ax.plot(fpr, tpr, lw=3,\n",
    "        label='ROC Curve (area = {:.2f})'.format(auc(fpr, tpr)))\n",
    "ax.plot([0, 1], [0, 1], 'k--', lw=2)\n",
    "ax.set(\n",
    "    xlim=(0, 1),\n",
    "    ylim=(0, 1),\n",
    "    title=\"ROC Curve\",\n",
    "    xlabel=\"False Positive Rate\",\n",
    "    ylabel=\"True Positive Rate\",\n",
    ")\n",
    "ax.legend();\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This Receiver Operating Characteristic (ROC) curve tells how well our classifier is doing. We can tell it's doing well by how far it bends the upper-left. A perfect classifier would be in the upper-left corner, and a random classifier would follow the diagonal line.\n",
    "\n",
    "The area under this curve is `area = 0.76`. This tells us the probability that our classifier will predict correctly for a randomly chosen instance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Learn more\n",
    "* Similar example that uses DataFrames for a real world dataset: http://ml.dask.org/examples/xgboost.html\n",
    "* Recorded screencast stepping through the real world example above:\n",
    "* A blogpost on dask-xgboost http://matthewrocklin.com/blog/work/2017/03/28/dask-xgboost\n",
    "* XGBoost documentation: https://xgboost.readthedocs.io/en/latest/python/python_intro.html#\n",
    "* Dask-XGBoost documentation: http://ml.dask.org/xgboost.html"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
