{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dask Bags\n",
    "\n",
    "\n",
    "Dask Bag implements operations like `map`, `filter`, `groupby` and aggregations on collections of Python objects. It does this in parallel and in small memory using Python iterators. It is similar to a parallel version of itertools or a Pythonic version of the PySpark RDD.\n",
    "\n",
    "Dask Bags are often used to do simple preprocessing on log files, JSON records, or other user defined Python objects.\n",
    "\n",
    "Full API documentation is available here: http://docs.dask.org/en/latest/bag-api.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Start Dask Client for Dashboard\n",
    "\n",
    "Starting the Dask Client is optional.  It will provide a dashboard which \n",
    "is useful to gain insight on the computation.  \n",
    "\n",
    "The link to the dashboard will become visible when you create the client below.  We recommend having it open on one side of your screen while using your notebook on the other side.  This can take some effort to arrange your windows, but seeing them both at the same is very useful when learning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:22.513383Z",
     "iopub.status.busy": "2021-07-19T14:35:22.512400Z",
     "iopub.status.idle": "2021-07-19T14:35:24.946460Z",
     "shell.execute_reply": "2021-07-19T14:35:24.947149Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages/distributed/node.py:151: UserWarning: Port 8787 is already in use.\n",
      "Perhaps you already have a cluster running?\n",
      "Hosting the HTTP server on port 45533 instead\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table style=\"border: 2px solid white;\">\n",
       "<tr>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Client</h3>\n",
       "<ul style=\"text-align: left; list-style: none; margin: 0; padding: 0;\">\n",
       "  <li><b>Scheduler: </b>tcp://127.0.0.1:41855</li>\n",
       "  <li><b>Dashboard: </b><a href='http://127.0.0.1:45533/status' target='_blank'>http://127.0.0.1:45533/status</a></li>\n",
       "</ul>\n",
       "</td>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Cluster</h3>\n",
       "<ul style=\"text-align: left; list-style:none; margin: 0; padding: 0;\">\n",
       "  <li><b>Workers: </b>4</li>\n",
       "  <li><b>Cores: </b>4</li>\n",
       "  <li><b>Memory: </b>7.29 GB</li>\n",
       "</ul>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Client: 'tcp://127.0.0.1:41855' processes=4 threads=4, memory=7.29 GB>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from dask.distributed import Client, progress\n",
    "client = Client(n_workers=4, threads_per_worker=1)\n",
    "client"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create Random Data\n",
    "\n",
    "We create a random set of record data and store it to disk as many JSON files.  This will serve as our data for this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:24.956033Z",
     "iopub.status.busy": "2021-07-19T14:35:24.954923Z",
     "iopub.status.idle": "2021-07-19T14:35:26.804575Z",
     "shell.execute_reply": "2021-07-19T14:35:26.804191Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/home/runner/work/dask-examples/dask-examples/data/0.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/1.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/2.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/3.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/4.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/5.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/6.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/7.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/8.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/9.json']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import dask\n",
    "import json\n",
    "import os\n",
    "\n",
    "os.makedirs('data', exist_ok=True)              # Create data/ directory\n",
    "\n",
    "b = dask.datasets.make_people()                 # Make records of people\n",
    "b.map(json.dumps).to_textfiles('data/*.json')   # Encode as JSON, write to disk"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read JSON data\n",
    "\n",
    "Now that we have some JSON data in a file lets take a look at it with Dask Bag and Python JSON module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:26.809619Z",
     "iopub.status.busy": "2021-07-19T14:35:26.807460Z",
     "iopub.status.idle": "2021-07-19T14:35:26.988968Z",
     "shell.execute_reply": "2021-07-19T14:35:26.989320Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\"age\": 21, \"name\": [\"Duane\", \"Campbell\"], \"occupation\": \"Purchasing Assistant\", \"telephone\": \"1-292-318-0180\", \"address\": {\"address\": \"187 Ship Ferry\", \"city\": \"Chickasha\"}, \"credit-card\": {\"number\": \"2466 6916 3234 5822\", \"expiration-date\": \"12/23\"}}\r\n",
      "{\"age\": 32, \"name\": [\"Jeramy\", \"Owen\"], \"occupation\": \"Ticket Agent\", \"telephone\": \"+1-(068)-235-2690\", \"address\": {\"address\": \"777 Cottonwood Road\", \"city\": \"Downers Grove\"}, \"credit-card\": {\"number\": \"5166 0447 4858 0831\", \"expiration-date\": \"08/22\"}}\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 2 data/0.json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:26.994253Z",
     "iopub.status.busy": "2021-07-19T14:35:26.993747Z",
     "iopub.status.idle": "2021-07-19T14:35:27.000821Z",
     "shell.execute_reply": "2021-07-19T14:35:27.001593Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dask.bag<loads, npartitions=10>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import dask.bag as db\n",
    "import json\n",
    "\n",
    "b = db.read_text('data/*.json').map(json.loads)\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:27.005416Z",
     "iopub.status.busy": "2021-07-19T14:35:27.004999Z",
     "iopub.status.idle": "2021-07-19T14:35:27.026067Z",
     "shell.execute_reply": "2021-07-19T14:35:27.025406Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 21,\n",
       "  'name': ['Duane', 'Campbell'],\n",
       "  'occupation': 'Purchasing Assistant',\n",
       "  'telephone': '1-292-318-0180',\n",
       "  'address': {'address': '187 Ship Ferry', 'city': 'Chickasha'},\n",
       "  'credit-card': {'number': '2466 6916 3234 5822',\n",
       "   'expiration-date': '12/23'}},\n",
       " {'age': 32,\n",
       "  'name': ['Jeramy', 'Owen'],\n",
       "  'occupation': 'Ticket Agent',\n",
       "  'telephone': '+1-(068)-235-2690',\n",
       "  'address': {'address': '777 Cottonwood Road', 'city': 'Downers Grove'},\n",
       "  'credit-card': {'number': '5166 0447 4858 0831',\n",
       "   'expiration-date': '08/22'}})"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.take(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Map, Filter, Aggregate\n",
    "\n",
    "We can process this data by filtering out only certain records of interest, mapping functions over it to process our data, and aggregating those results to a total value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:27.029933Z",
     "iopub.status.busy": "2021-07-19T14:35:27.029240Z",
     "iopub.status.idle": "2021-07-19T14:35:27.049563Z",
     "shell.execute_reply": "2021-07-19T14:35:27.049222Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 32,\n",
       "  'name': ['Jeramy', 'Owen'],\n",
       "  'occupation': 'Ticket Agent',\n",
       "  'telephone': '+1-(068)-235-2690',\n",
       "  'address': {'address': '777 Cottonwood Road', 'city': 'Downers Grove'},\n",
       "  'credit-card': {'number': '5166 0447 4858 0831',\n",
       "   'expiration-date': '08/22'}},\n",
       " {'age': 66,\n",
       "  'name': ['Derek', 'Mckee'],\n",
       "  'occupation': 'Training Advisor',\n",
       "  'telephone': '(919) 025-7441',\n",
       "  'address': {'address': '295 Gates Manor', 'city': 'Johns Creek'},\n",
       "  'credit-card': {'number': '3734 062986 52007', 'expiration-date': '04/20'}})"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.filter(lambda record: record['age'] > 30).take(2)  # Select only people over 30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:27.052244Z",
     "iopub.status.busy": "2021-07-19T14:35:27.051163Z",
     "iopub.status.idle": "2021-07-19T14:35:27.075364Z",
     "shell.execute_reply": "2021-07-19T14:35:27.075000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Purchasing Assistant', 'Ticket Agent')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.map(lambda record: record['occupation']).take(2)  # Select the occupation field"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:27.078565Z",
     "iopub.status.busy": "2021-07-19T14:35:27.078175Z",
     "iopub.status.idle": "2021-07-19T14:35:27.200690Z",
     "shell.execute_reply": "2021-07-19T14:35:27.199977Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.count().compute()  # Count total number of records"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chain computations\n",
    "\n",
    "It is common to do many of these steps in one pipeline, only calling `compute` or `take` at the end."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:27.205717Z",
     "iopub.status.busy": "2021-07-19T14:35:27.205310Z",
     "iopub.status.idle": "2021-07-19T14:35:27.209832Z",
     "shell.execute_reply": "2021-07-19T14:35:27.210474Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dask.bag<topk-aggregate, npartitions=1>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = (b.filter(lambda record: record['age'] > 30)\n",
    "           .map(lambda record: record['occupation'])\n",
    "           .frequencies(sort=True)\n",
    "           .topk(10, key=1))\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As with all lazy Dask collections, we need to call `compute` to actually evaluate our result.  The `take` method used in earlier examples is also like `compute` and will also trigger computation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:27.213171Z",
     "iopub.status.busy": "2021-07-19T14:35:27.212238Z",
     "iopub.status.idle": "2021-07-19T14:35:27.315503Z",
     "shell.execute_reply": "2021-07-19T14:35:27.315141Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Marble Mason', 16),\n",
       " ('Bus Driver', 15),\n",
       " ('Regulator', 14),\n",
       " ('Hospital Doctor', 14),\n",
       " ('Production Engineer', 14),\n",
       " ('Quality Controller', 13),\n",
       " ('Patent Agent', 13),\n",
       " ('Househusband', 13),\n",
       " ('Video Artist', 13),\n",
       " ('Builder', 13)]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transform and Store\n",
    "\n",
    "Sometimes we want to compute aggregations as above, but sometimes we want to store results to disk for future analyses.  For that we can use methods like `to_textfiles` and `json.dumps`, or we can convert to Dask Dataframes and use their storage systems, which we'll see more of in the next section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:27.318823Z",
     "iopub.status.busy": "2021-07-19T14:35:27.317422Z",
     "iopub.status.idle": "2021-07-19T14:35:27.451954Z",
     "shell.execute_reply": "2021-07-19T14:35:27.451612Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/home/runner/work/dask-examples/dask-examples/data/processed.0.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.1.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.2.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.3.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.4.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.5.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.6.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.7.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.8.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.9.json']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(b.filter(lambda record: record['age'] > 30)  # Select records of interest\n",
    "  .map(json.dumps)                            # Convert Python objects to text\n",
    "  .to_textfiles('data/processed.*.json'))     # Write to local disk"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert to Dask Dataframes\n",
    "\n",
    "Dask Bags are good for reading in initial data, doing a bit of pre-processing, and then handing off to some other more efficient form like Dask Dataframes.  Dask Dataframes use Pandas internally, and so can be much faster on numeric data and also have more complex algorithms.  \n",
    "\n",
    "However, Dask Dataframes also expect data that is organized as flat columns.  It does not support nested JSON data very well (Bag is better for this).\n",
    "\n",
    "Here we make a function to flatten down our nested data structure, map that across our records, and then convert that to a Dask Dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:27.454646Z",
     "iopub.status.busy": "2021-07-19T14:35:27.453821Z",
     "iopub.status.idle": "2021-07-19T14:35:27.477769Z",
     "shell.execute_reply": "2021-07-19T14:35:27.477434Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 21,\n",
       "  'name': ['Duane', 'Campbell'],\n",
       "  'occupation': 'Purchasing Assistant',\n",
       "  'telephone': '1-292-318-0180',\n",
       "  'address': {'address': '187 Ship Ferry', 'city': 'Chickasha'},\n",
       "  'credit-card': {'number': '2466 6916 3234 5822',\n",
       "   'expiration-date': '12/23'}},)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.take(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:27.482225Z",
     "iopub.status.busy": "2021-07-19T14:35:27.481731Z",
     "iopub.status.idle": "2021-07-19T14:35:27.503835Z",
     "shell.execute_reply": "2021-07-19T14:35:27.503496Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 21,\n",
       "  'occupation': 'Purchasing Assistant',\n",
       "  'telephone': '1-292-318-0180',\n",
       "  'credit-card-number': '2466 6916 3234 5822',\n",
       "  'credit-card-expiration': '12/23',\n",
       "  'name': 'Duane Campbell',\n",
       "  'street-address': '187 Ship Ferry',\n",
       "  'city': 'Chickasha'},)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def flatten(record):\n",
    "    return {\n",
    "        'age': record['age'],\n",
    "        'occupation': record['occupation'],\n",
    "        'telephone': record['telephone'],\n",
    "        'credit-card-number': record['credit-card']['number'],\n",
    "        'credit-card-expiration': record['credit-card']['expiration-date'],\n",
    "        'name': ' '.join(record['name']),\n",
    "        'street-address': record['address']['address'],\n",
    "        'city': record['address']['city']   \n",
    "    }\n",
    "\n",
    "b.map(flatten).take(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:27.506702Z",
     "iopub.status.busy": "2021-07-19T14:35:27.505700Z",
     "iopub.status.idle": "2021-07-19T14:35:28.091760Z",
     "shell.execute_reply": "2021-07-19T14:35:28.091421Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>occupation</th>\n",
       "      <th>telephone</th>\n",
       "      <th>credit-card-number</th>\n",
       "      <th>credit-card-expiration</th>\n",
       "      <th>name</th>\n",
       "      <th>street-address</th>\n",
       "      <th>city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21</td>\n",
       "      <td>Purchasing Assistant</td>\n",
       "      <td>1-292-318-0180</td>\n",
       "      <td>2466 6916 3234 5822</td>\n",
       "      <td>12/23</td>\n",
       "      <td>Duane Campbell</td>\n",
       "      <td>187 Ship Ferry</td>\n",
       "      <td>Chickasha</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>32</td>\n",
       "      <td>Ticket Agent</td>\n",
       "      <td>+1-(068)-235-2690</td>\n",
       "      <td>5166 0447 4858 0831</td>\n",
       "      <td>08/22</td>\n",
       "      <td>Jeramy Owen</td>\n",
       "      <td>777 Cottonwood Road</td>\n",
       "      <td>Downers Grove</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>66</td>\n",
       "      <td>Training Advisor</td>\n",
       "      <td>(919) 025-7441</td>\n",
       "      <td>3734 062986 52007</td>\n",
       "      <td>04/20</td>\n",
       "      <td>Derek Mckee</td>\n",
       "      <td>295 Gates Manor</td>\n",
       "      <td>Johns Creek</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>39</td>\n",
       "      <td>Insurance Consultant</td>\n",
       "      <td>660.353.3622</td>\n",
       "      <td>2527 6472 1553 2332</td>\n",
       "      <td>09/22</td>\n",
       "      <td>Fidelia Conley</td>\n",
       "      <td>1109 Fair Terrace</td>\n",
       "      <td>Bensenville</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>63</td>\n",
       "      <td>Riveter</td>\n",
       "      <td>959-796-5137</td>\n",
       "      <td>4686 8010 6785 5688</td>\n",
       "      <td>11/19</td>\n",
       "      <td>Piedad Ortega</td>\n",
       "      <td>265 Newhall Alley</td>\n",
       "      <td>Freeport</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age            occupation          telephone   credit-card-number  \\\n",
       "0   21  Purchasing Assistant     1-292-318-0180  2466 6916 3234 5822   \n",
       "1   32          Ticket Agent  +1-(068)-235-2690  5166 0447 4858 0831   \n",
       "2   66      Training Advisor     (919) 025-7441    3734 062986 52007   \n",
       "3   39  Insurance Consultant       660.353.3622  2527 6472 1553 2332   \n",
       "4   63               Riveter       959-796-5137  4686 8010 6785 5688   \n",
       "\n",
       "  credit-card-expiration            name       street-address           city  \n",
       "0                  12/23  Duane Campbell       187 Ship Ferry      Chickasha  \n",
       "1                  08/22     Jeramy Owen  777 Cottonwood Road  Downers Grove  \n",
       "2                  04/20     Derek Mckee      295 Gates Manor    Johns Creek  \n",
       "3                  09/22  Fidelia Conley    1109 Fair Terrace    Bensenville  \n",
       "4                  11/19   Piedad Ortega    265 Newhall Alley       Freeport  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = b.map(flatten).to_dataframe()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now perform the same computation as before, but now using Pandas and Dask dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-19T14:35:28.105057Z",
     "iopub.status.busy": "2021-07-19T14:35:28.104656Z",
     "iopub.status.idle": "2021-07-19T14:35:28.844968Z",
     "shell.execute_reply": "2021-07-19T14:35:28.844497Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Marble Mason           16\n",
       "Bus Driver             15\n",
       "Regulator              14\n",
       "Production Engineer    14\n",
       "Hospital Doctor        14\n",
       "Patent Agent           13\n",
       "Video Artist           13\n",
       "Accounts Assistant     13\n",
       "Quality Controller     13\n",
       "Builder                13\n",
       "Name: occupation, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.age > 30].occupation.value_counts().nlargest(10).compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Learn More\n",
    "\n",
    "You may be interested in the following links:\n",
    "\n",
    "-  [Dask Bag Documentation](https://docs.dask.org/en/latest/bag.html)\n",
    "-  [API Documentation](http://docs.dask.org/en/latest/bag-api.html)\n",
    "-  [dask tutorial](https://github.com/dask/dask-tutorial), notebook 02, for a more in-depth introduction."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
