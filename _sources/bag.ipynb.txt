{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dask Bags\n",
    "\n",
    "\n",
    "Dask Bag implements operations like `map`, `filter`, `groupby` and aggregations on collections of Python objects. It does this in parallel and in small memory using Python iterators. It is similar to a parallel version of itertools or a Pythonic version of the PySpark RDD.\n",
    "\n",
    "Dask Bags are often used to do simple preprocessing on log files, JSON records, or other user defined Python objects.\n",
    "\n",
    "Full API documentation is available here: http://docs.dask.org/en/latest/bag-api.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Start Dask Client for Dashboard\n",
    "\n",
    "Starting the Dask Client is optional.  It will provide a dashboard which \n",
    "is useful to gain insight on the computation.  \n",
    "\n",
    "The link to the dashboard will become visible when you create the client below.  We recommend having it open on one side of your screen while using your notebook on the other side.  This can take some effort to arrange your windows, but seeing them both at the same is very useful when learning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:35.603925Z",
     "iopub.status.busy": "2021-03-14T13:17:35.602579Z",
     "iopub.status.idle": "2021-03-14T13:17:38.484174Z",
     "shell.execute_reply": "2021-03-14T13:17:38.486724Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda3/envs/dask-examples/lib/python3.8/site-packages/distributed/node.py:151: UserWarning: Port 8787 is already in use.\n",
      "Perhaps you already have a cluster running?\n",
      "Hosting the HTTP server on port 39077 instead\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table style=\"border: 2px solid white;\">\n",
       "<tr>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Client</h3>\n",
       "<ul style=\"text-align: left; list-style: none; margin: 0; padding: 0;\">\n",
       "  <li><b>Scheduler: </b>tcp://127.0.0.1:37711</li>\n",
       "  <li><b>Dashboard: </b><a href='http://127.0.0.1:39077/status' target='_blank'>http://127.0.0.1:39077/status</a></li>\n",
       "</ul>\n",
       "</td>\n",
       "<td style=\"vertical-align: top; border: 0px solid white\">\n",
       "<h3 style=\"text-align: left;\">Cluster</h3>\n",
       "<ul style=\"text-align: left; list-style:none; margin: 0; padding: 0;\">\n",
       "  <li><b>Workers: </b>4</li>\n",
       "  <li><b>Cores: </b>4</li>\n",
       "  <li><b>Memory: </b>7.29 GB</li>\n",
       "</ul>\n",
       "</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Client: 'tcp://127.0.0.1:37711' processes=4 threads=4, memory=7.29 GB>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from dask.distributed import Client, progress\n",
    "client = Client(n_workers=4, threads_per_worker=1)\n",
    "client"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create Random Data\n",
    "\n",
    "We create a random set of record data and store it to disk as many JSON files.  This will serve as our data for this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:38.494581Z",
     "iopub.status.busy": "2021-03-14T13:17:38.490781Z",
     "iopub.status.idle": "2021-03-14T13:17:40.519626Z",
     "shell.execute_reply": "2021-03-14T13:17:40.518840Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/home/runner/work/dask-examples/dask-examples/data/0.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/1.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/2.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/3.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/4.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/5.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/6.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/7.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/8.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/9.json']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import dask\n",
    "import json\n",
    "import os\n",
    "\n",
    "os.makedirs('data', exist_ok=True)              # Create data/ directory\n",
    "\n",
    "b = dask.datasets.make_people()                 # Make records of people\n",
    "b.map(json.dumps).to_textfiles('data/*.json')   # Encode as JSON, write to disk"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read JSON data\n",
    "\n",
    "Now that we have some JSON data in a file lets take a look at it with Dask Bag and Python JSON module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:40.525423Z",
     "iopub.status.busy": "2021-03-14T13:17:40.524639Z",
     "iopub.status.idle": "2021-03-14T13:17:40.687983Z",
     "shell.execute_reply": "2021-03-14T13:17:40.688351Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\"age\": 45, \"name\": [\"Ellyn\", \"Head\"], \"occupation\": \"Health Visitor\", \"telephone\": \"+1-(485)-639-9596\", \"address\": {\"address\": \"955 Flora Extension\", \"city\": \"Lake Zurich\"}, \"credit-card\": {\"number\": \"4193 2628 9870 3827\", \"expiration-date\": \"06/22\"}}\r\n",
      "{\"age\": 45, \"name\": [\"Ta\", \"Schmidt\"], \"occupation\": \"Optical Advisor\", \"telephone\": \"357-161-9324\", \"address\": {\"address\": \"336 Sutro Heights Townline\", \"city\": \"Manchester\"}, \"credit-card\": {\"number\": \"3741 717460 63871\", \"expiration-date\": \"12/19\"}}\r\n"
     ]
    }
   ],
   "source": [
    "!head -n 2 data/0.json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:40.693032Z",
     "iopub.status.busy": "2021-03-14T13:17:40.692298Z",
     "iopub.status.idle": "2021-03-14T13:17:40.700943Z",
     "shell.execute_reply": "2021-03-14T13:17:40.701572Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dask.bag<loads, npartitions=10>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import dask.bag as db\n",
    "import json\n",
    "\n",
    "b = db.read_text('data/*.json').map(json.loads)\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:40.706557Z",
     "iopub.status.busy": "2021-03-14T13:17:40.706041Z",
     "iopub.status.idle": "2021-03-14T13:17:40.726685Z",
     "shell.execute_reply": "2021-03-14T13:17:40.727244Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 45,\n",
       "  'name': ['Ellyn', 'Head'],\n",
       "  'occupation': 'Health Visitor',\n",
       "  'telephone': '+1-(485)-639-9596',\n",
       "  'address': {'address': '955 Flora Extension', 'city': 'Lake Zurich'},\n",
       "  'credit-card': {'number': '4193 2628 9870 3827',\n",
       "   'expiration-date': '06/22'}},\n",
       " {'age': 45,\n",
       "  'name': ['Ta', 'Schmidt'],\n",
       "  'occupation': 'Optical Advisor',\n",
       "  'telephone': '357-161-9324',\n",
       "  'address': {'address': '336 Sutro Heights Townline', 'city': 'Manchester'},\n",
       "  'credit-card': {'number': '3741 717460 63871', 'expiration-date': '12/19'}})"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.take(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Map, Filter, Aggregate\n",
    "\n",
    "We can process this data by filtering out only certain records of interest, mapping functions over it to process our data, and aggregating those results to a total value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:40.732635Z",
     "iopub.status.busy": "2021-03-14T13:17:40.732154Z",
     "iopub.status.idle": "2021-03-14T13:17:40.752344Z",
     "shell.execute_reply": "2021-03-14T13:17:40.753625Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 45,\n",
       "  'name': ['Ellyn', 'Head'],\n",
       "  'occupation': 'Health Visitor',\n",
       "  'telephone': '+1-(485)-639-9596',\n",
       "  'address': {'address': '955 Flora Extension', 'city': 'Lake Zurich'},\n",
       "  'credit-card': {'number': '4193 2628 9870 3827',\n",
       "   'expiration-date': '06/22'}},\n",
       " {'age': 45,\n",
       "  'name': ['Ta', 'Schmidt'],\n",
       "  'occupation': 'Optical Advisor',\n",
       "  'telephone': '357-161-9324',\n",
       "  'address': {'address': '336 Sutro Heights Townline', 'city': 'Manchester'},\n",
       "  'credit-card': {'number': '3741 717460 63871', 'expiration-date': '12/19'}})"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.filter(lambda record: record['age'] > 30).take(2)  # Select only people over 30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:40.757214Z",
     "iopub.status.busy": "2021-03-14T13:17:40.755996Z",
     "iopub.status.idle": "2021-03-14T13:17:40.775779Z",
     "shell.execute_reply": "2021-03-14T13:17:40.776462Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Health Visitor', 'Optical Advisor')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.map(lambda record: record['occupation']).take(2)  # Select the occupation field"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:40.779601Z",
     "iopub.status.busy": "2021-03-14T13:17:40.778516Z",
     "iopub.status.idle": "2021-03-14T13:17:40.884824Z",
     "shell.execute_reply": "2021-03-14T13:17:40.885246Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.count().compute()  # Count total number of records"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chain computations\n",
    "\n",
    "It is common to do many of these steps in one pipeline, only calling `compute` or `take` at the end."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:40.890972Z",
     "iopub.status.busy": "2021-03-14T13:17:40.890507Z",
     "iopub.status.idle": "2021-03-14T13:17:40.894397Z",
     "shell.execute_reply": "2021-03-14T13:17:40.895075Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dask.bag<topk-aggregate, npartitions=1>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = (b.filter(lambda record: record['age'] > 30)\n",
    "           .map(lambda record: record['occupation'])\n",
    "           .frequencies(sort=True)\n",
    "           .topk(10, key=1))\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As with all lazy Dask collections, we need to call `compute` to actually evaluate our result.  The `take` method used in earlier examples is also like `compute` and will also trigger computation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:40.904814Z",
     "iopub.status.busy": "2021-03-14T13:17:40.902269Z",
     "iopub.status.idle": "2021-03-14T13:17:41.037432Z",
     "shell.execute_reply": "2021-03-14T13:17:41.037041Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Body Fitter', 15),\n",
       " ('Optical Advisor', 14),\n",
       " ('Research Consultant', 14),\n",
       " ('Telecommunication', 13),\n",
       " ('Haulage Contractor', 13),\n",
       " ('Gilder', 13),\n",
       " ('Quality Controller', 12),\n",
       " ('Induction Moulder', 12),\n",
       " ('Furniture Restorer', 12),\n",
       " ('Technical Manager', 12)]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transform and Store\n",
    "\n",
    "Sometimes we want to compute aggregations as above, but sometimes we want to store results to disk for future analyses.  For that we can use methods like `to_textfiles` and `json.dumps`, or we can convert to Dask Dataframes and use their storage systems, which we'll see more of in the next section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:41.050828Z",
     "iopub.status.busy": "2021-03-14T13:17:41.046265Z",
     "iopub.status.idle": "2021-03-14T13:17:41.205349Z",
     "shell.execute_reply": "2021-03-14T13:17:41.204947Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/home/runner/work/dask-examples/dask-examples/data/processed.0.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.1.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.2.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.3.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.4.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.5.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.6.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.7.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.8.json',\n",
       " '/home/runner/work/dask-examples/dask-examples/data/processed.9.json']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(b.filter(lambda record: record['age'] > 30)  # Select records of interest\n",
    "  .map(json.dumps)                            # Convert Python objects to text\n",
    "  .to_textfiles('data/processed.*.json'))     # Write to local disk"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert to Dask Dataframes\n",
    "\n",
    "Dask Bags are good for reading in initial data, doing a bit of pre-processing, and then handing off to some other more efficient form like Dask Dataframes.  Dask Dataframes use Pandas internally, and so can be much faster on numeric data and also have more complex algorithms.  \n",
    "\n",
    "However, Dask Dataframes also expect data that is organized as flat columns.  It does not support nested JSON data very well (Bag is better for this).\n",
    "\n",
    "Here we make a function to flatten down our nested data structure, map that across our records, and then convert that to a Dask Dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:41.209557Z",
     "iopub.status.busy": "2021-03-14T13:17:41.208981Z",
     "iopub.status.idle": "2021-03-14T13:17:41.225619Z",
     "shell.execute_reply": "2021-03-14T13:17:41.225221Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 45,\n",
       "  'name': ['Ellyn', 'Head'],\n",
       "  'occupation': 'Health Visitor',\n",
       "  'telephone': '+1-(485)-639-9596',\n",
       "  'address': {'address': '955 Flora Extension', 'city': 'Lake Zurich'},\n",
       "  'credit-card': {'number': '4193 2628 9870 3827',\n",
       "   'expiration-date': '06/22'}},)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.take(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:41.228062Z",
     "iopub.status.busy": "2021-03-14T13:17:41.227642Z",
     "iopub.status.idle": "2021-03-14T13:17:41.255583Z",
     "shell.execute_reply": "2021-03-14T13:17:41.256170Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'age': 45,\n",
       "  'occupation': 'Health Visitor',\n",
       "  'telephone': '+1-(485)-639-9596',\n",
       "  'credit-card-number': '4193 2628 9870 3827',\n",
       "  'credit-card-expiration': '06/22',\n",
       "  'name': 'Ellyn Head',\n",
       "  'street-address': '955 Flora Extension',\n",
       "  'city': 'Lake Zurich'},)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def flatten(record):\n",
    "    return {\n",
    "        'age': record['age'],\n",
    "        'occupation': record['occupation'],\n",
    "        'telephone': record['telephone'],\n",
    "        'credit-card-number': record['credit-card']['number'],\n",
    "        'credit-card-expiration': record['credit-card']['expiration-date'],\n",
    "        'name': ' '.join(record['name']),\n",
    "        'street-address': record['address']['address'],\n",
    "        'city': record['address']['city']   \n",
    "    }\n",
    "\n",
    "b.map(flatten).take(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:41.258966Z",
     "iopub.status.busy": "2021-03-14T13:17:41.258062Z",
     "iopub.status.idle": "2021-03-14T13:17:41.834053Z",
     "shell.execute_reply": "2021-03-14T13:17:41.834731Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>occupation</th>\n",
       "      <th>telephone</th>\n",
       "      <th>credit-card-number</th>\n",
       "      <th>credit-card-expiration</th>\n",
       "      <th>name</th>\n",
       "      <th>street-address</th>\n",
       "      <th>city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>45</td>\n",
       "      <td>Health Visitor</td>\n",
       "      <td>+1-(485)-639-9596</td>\n",
       "      <td>4193 2628 9870 3827</td>\n",
       "      <td>06/22</td>\n",
       "      <td>Ellyn Head</td>\n",
       "      <td>955 Flora Extension</td>\n",
       "      <td>Lake Zurich</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45</td>\n",
       "      <td>Optical Advisor</td>\n",
       "      <td>357-161-9324</td>\n",
       "      <td>3741 717460 63871</td>\n",
       "      <td>12/19</td>\n",
       "      <td>Ta Schmidt</td>\n",
       "      <td>336 Sutro Heights Townline</td>\n",
       "      <td>Manchester</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>40</td>\n",
       "      <td>Typist</td>\n",
       "      <td>+1-(524)-800-5717</td>\n",
       "      <td>2315 2650 3569 6447</td>\n",
       "      <td>11/24</td>\n",
       "      <td>Jewell Newman</td>\n",
       "      <td>83 Friendship Townline</td>\n",
       "      <td>Rock Springs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>66</td>\n",
       "      <td>Technical Engineer</td>\n",
       "      <td>975-610-6376</td>\n",
       "      <td>3798 841624 11839</td>\n",
       "      <td>12/22</td>\n",
       "      <td>Kieth Clarke</td>\n",
       "      <td>318 Marietta Private</td>\n",
       "      <td>Yukon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27</td>\n",
       "      <td>TV Editor</td>\n",
       "      <td>854-587-3780</td>\n",
       "      <td>4342 2710 5891 2011</td>\n",
       "      <td>11/21</td>\n",
       "      <td>Titus Holloway</td>\n",
       "      <td>1175 State Mall</td>\n",
       "      <td>Richmond</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age          occupation          telephone   credit-card-number  \\\n",
       "0   45      Health Visitor  +1-(485)-639-9596  4193 2628 9870 3827   \n",
       "1   45     Optical Advisor       357-161-9324    3741 717460 63871   \n",
       "2   40              Typist  +1-(524)-800-5717  2315 2650 3569 6447   \n",
       "3   66  Technical Engineer       975-610-6376    3798 841624 11839   \n",
       "4   27           TV Editor       854-587-3780  4342 2710 5891 2011   \n",
       "\n",
       "  credit-card-expiration            name              street-address  \\\n",
       "0                  06/22      Ellyn Head         955 Flora Extension   \n",
       "1                  12/19      Ta Schmidt  336 Sutro Heights Townline   \n",
       "2                  11/24   Jewell Newman      83 Friendship Townline   \n",
       "3                  12/22    Kieth Clarke        318 Marietta Private   \n",
       "4                  11/21  Titus Holloway             1175 State Mall   \n",
       "\n",
       "           city  \n",
       "0   Lake Zurich  \n",
       "1    Manchester  \n",
       "2  Rock Springs  \n",
       "3         Yukon  \n",
       "4      Richmond  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = b.map(flatten).to_dataframe()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now perform the same computation as before, but now using Pandas and Dask dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-03-14T13:17:41.839627Z",
     "iopub.status.busy": "2021-03-14T13:17:41.836853Z",
     "iopub.status.idle": "2021-03-14T13:17:42.665713Z",
     "shell.execute_reply": "2021-03-14T13:17:42.665122Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Body Fitter            15\n",
       "Research Consultant    14\n",
       "Optical Advisor        14\n",
       "Gilder                 13\n",
       "Telecommunication      13\n",
       "Haulage Contractor     13\n",
       "Auto Electrician       12\n",
       "Pharmacist             12\n",
       "Ticket Agent           12\n",
       "Quality Controller     12\n",
       "Name: occupation, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.age > 30].occupation.value_counts().nlargest(10).compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Learn More\n",
    "\n",
    "You may be interested in the following links:\n",
    "\n",
    "-  [Dask Bag Documentation](https://docs.dask.org/en/latest/bag.html)\n",
    "-  [API Documentation](http://docs.dask.org/en/latest/bag-api.html)\n",
    "-  [dask tutorial](https://github.com/dask/dask-tutorial), notebook 02, for a more in-depth introduction."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
